
midi-2-cv-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050bc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005254  08005254  00006254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800526c  0800526c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800526c  0800526c  0000626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005274  08005274  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005274  08005274  00006274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800527c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  2000005c  080052d8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080052d8  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fb0  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac0  00000000  00000000  0001a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e07  00000000  00000000  0001dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c1b  00000000  00000000  0001eacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e4c  00000000  00000000  000376ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000983f9  00000000  00000000  0004d536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e592f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  000e5974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000ea828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800523c 	.word	0x0800523c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	0800523c 	.word	0x0800523c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <buffer_init>:
#include "app/buffer.h"
#include <stdint.h>
#include <stdlib.h>

BUFFER_STATUS buffer_init(Buffer *buf, uint16_t buffer_size) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	 if (!buf || buffer_size == 0) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <buffer_init+0x18>
 80004da:	887b      	ldrh	r3, [r7, #2]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d101      	bne.n	80004e4 <buffer_init+0x1c>
		return BUFFER_FAILURE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	e054      	b.n	800058e <buffer_init+0xc6>
	}

	// Initialize structure first
	buf->buffer = NULL;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
	buf->idx_front = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	801a      	strh	r2, [r3, #0]
	buf->idx_rear = 0;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	805a      	strh	r2, [r3, #2]
	buf->length = 0;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	809a      	strh	r2, [r3, #4]

	// Now safe to free
	buffer_u8_free(buf);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 f84a 	bl	8000596 <buffer_u8_free>

	// Buffer size should be power of 2 for the bitwise operations to work
	if ((buffer_size & (buffer_size - 1)) != 0) {
 8000502:	887a      	ldrh	r2, [r7, #2]
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	3b01      	subs	r3, #1
 8000508:	4013      	ands	r3, r2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d01d      	beq.n	800054a <buffer_init+0x82>
		// Round up to next power of 2
		buffer_size--;
 800050e:	887b      	ldrh	r3, [r7, #2]
 8000510:	3b01      	subs	r3, #1
 8000512:	807b      	strh	r3, [r7, #2]
		buffer_size |= buffer_size >> 1;
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	085b      	lsrs	r3, r3, #1
 8000518:	b29a      	uxth	r2, r3
 800051a:	887b      	ldrh	r3, [r7, #2]
 800051c:	4313      	orrs	r3, r2
 800051e:	807b      	strh	r3, [r7, #2]
		buffer_size |= buffer_size >> 2;
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	089b      	lsrs	r3, r3, #2
 8000524:	b29a      	uxth	r2, r3
 8000526:	887b      	ldrh	r3, [r7, #2]
 8000528:	4313      	orrs	r3, r2
 800052a:	807b      	strh	r3, [r7, #2]
		buffer_size |= buffer_size >> 4;
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	091b      	lsrs	r3, r3, #4
 8000530:	b29a      	uxth	r2, r3
 8000532:	887b      	ldrh	r3, [r7, #2]
 8000534:	4313      	orrs	r3, r2
 8000536:	807b      	strh	r3, [r7, #2]
		buffer_size |= buffer_size >> 8;
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	0a1b      	lsrs	r3, r3, #8
 800053c:	b29a      	uxth	r2, r3
 800053e:	887b      	ldrh	r3, [r7, #2]
 8000540:	4313      	orrs	r3, r2
 8000542:	807b      	strh	r3, [r7, #2]
		buffer_size++;
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	3301      	adds	r3, #1
 8000548:	807b      	strh	r3, [r7, #2]
	}

	buf->buffer = (uint8_t *)malloc(buffer_size * sizeof(uint8_t));
 800054a:	887b      	ldrh	r3, [r7, #2]
 800054c:	4618      	mov	r0, r3
 800054e:	f004 fd1b 	bl	8004f88 <malloc>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	609a      	str	r2, [r3, #8]
	if (NULL == buf->buffer) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <buffer_init+0x9e>
		return BUFFER_FAILURE;
 8000562:	2300      	movs	r3, #0
 8000564:	e013      	b.n	800058e <buffer_init+0xc6>
	}

	for (uint32_t i = 0; i < buffer_size; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e008      	b.n	800057e <buffer_init+0xb6>
		buf->buffer[i] = 0;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4413      	add	r3, r2
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < buffer_size; i++) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	429a      	cmp	r2, r3
 8000584:	d3f2      	bcc.n	800056c <buffer_init+0xa4>
	}

	buf->length = buffer_size;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	809a      	strh	r2, [r3, #4]
	return BUFFER_SUCCESS;
 800058c:	2301      	movs	r3, #1
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <buffer_u8_free>:

BUFFER_STATUS buffer_u8_free(Buffer *buf) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	 if (!buf) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d101      	bne.n	80005a8 <buffer_u8_free+0x12>
		return BUFFER_FAILURE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	e016      	b.n	80005d6 <buffer_u8_free+0x40>
	}

	if (buf->buffer != NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d007      	beq.n	80005c0 <buffer_u8_free+0x2a>
		free(buf->buffer);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fcef 	bl	8004f98 <free>
		buf->buffer = NULL;  // Prevent use-after-free
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	}

	buf->idx_front = buf->idx_rear = 0;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	805a      	strh	r2, [r3, #2]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	885a      	ldrh	r2, [r3, #2]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	801a      	strh	r2, [r3, #0]
	buf->length = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	809a      	strh	r2, [r3, #4]

	return BUFFER_SUCCESS;
 80005d4:	2301      	movs	r3, #1
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <buffer_push>:

BUFFER_STATUS buffer_push(Buffer *buf, const uint8_t *input) {
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
	  if (!buf || !buf->buffer || !input) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <buffer_push+0x1e>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <buffer_push+0x1e>
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <buffer_push+0x22>
		return BUFFER_FAILURE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	e01f      	b.n	8000640 <buffer_push+0x62>
	}

	uint16_t next_front = (buf->idx_front + 1) & (buf->length - 1);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	b29b      	uxth	r3, r3
 8000608:	b21a      	sxth	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	889b      	ldrh	r3, [r3, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	b29b      	uxth	r3, r3
 8000612:	b21b      	sxth	r3, r3
 8000614:	4013      	ands	r3, r2
 8000616:	b21b      	sxth	r3, r3
 8000618:	81fb      	strh	r3, [r7, #14]
	if (next_front == buf->idx_rear) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	885b      	ldrh	r3, [r3, #2]
 800061e:	89fa      	ldrh	r2, [r7, #14]
 8000620:	429a      	cmp	r2, r3
 8000622:	d101      	bne.n	8000628 <buffer_push+0x4a>
		return BUFFER_FAILURE;  // Buffer full
 8000624:	2300      	movs	r3, #0
 8000626:	e00b      	b.n	8000640 <buffer_push+0x62>
	}

	buf->buffer[buf->idx_front] = *input;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	8812      	ldrh	r2, [r2, #0]
 8000630:	4413      	add	r3, r2
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	7812      	ldrb	r2, [r2, #0]
 8000636:	701a      	strb	r2, [r3, #0]
	buf->idx_front = next_front;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	89fa      	ldrh	r2, [r7, #14]
 800063c:	801a      	strh	r2, [r3, #0]
	return BUFFER_SUCCESS;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <buffer_pop>:

BUFFER_STATUS buffer_pop(Buffer *buf, uint8_t *ret) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	 if (!buf || !buf->buffer || !ret) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <buffer_pop+0x1e>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <buffer_pop+0x1e>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <buffer_pop+0x22>
		return BUFFER_FAILURE;
 800066a:	2300      	movs	r3, #0
 800066c:	e01f      	b.n	80006ae <buffer_pop+0x62>
	}

	if (buf->idx_front == buf->idx_rear) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	881a      	ldrh	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	885b      	ldrh	r3, [r3, #2]
 8000676:	429a      	cmp	r2, r3
 8000678:	d101      	bne.n	800067e <buffer_pop+0x32>
		return BUFFER_FAILURE;  // Buffer empty
 800067a:	2300      	movs	r3, #0
 800067c:	e017      	b.n	80006ae <buffer_pop+0x62>
	}

	*ret = buf->buffer[buf->idx_rear];
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	8852      	ldrh	r2, [r2, #2]
 8000686:	4413      	add	r3, r2
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	701a      	strb	r2, [r3, #0]
	buf->idx_rear = (buf->idx_rear + 1) & (buf->length - 1);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	885b      	ldrh	r3, [r3, #2]
 8000692:	3301      	adds	r3, #1
 8000694:	b29b      	uxth	r3, r3
 8000696:	b21a      	sxth	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	889b      	ldrh	r3, [r3, #4]
 800069c:	3b01      	subs	r3, #1
 800069e:	b29b      	uxth	r3, r3
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4013      	ands	r3, r2
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	805a      	strh	r2, [r3, #2]
	return BUFFER_SUCCESS;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <MCP4728_FastWrite>:
HAL_StatusTypeDef MCP4728_FastWrite(I2C_HandleTypeDef* I2CHandler,
                                    uint16_t ch_a,
                                    uint16_t ch_b,
                                    uint16_t ch_c,
                                    uint16_t ch_d)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b088      	sub	sp, #32
 80006be:	af02      	add	r7, sp, #8
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	4608      	mov	r0, r1
 80006c4:	4611      	mov	r1, r2
 80006c6:	461a      	mov	r2, r3
 80006c8:	4603      	mov	r3, r0
 80006ca:	817b      	strh	r3, [r7, #10]
 80006cc:	460b      	mov	r3, r1
 80006ce:	813b      	strh	r3, [r7, #8]
 80006d0:	4613      	mov	r3, r2
 80006d2:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    // Format data for each channel (12-bit values)
    data[0] = (ch_a >> 8) & 0x0F; // Upper 4 bits
 80006d4:	897b      	ldrh	r3, [r7, #10]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	743b      	strb	r3, [r7, #16]
    data[1] = ch_a & 0xFF; // Lower 8 bits
 80006e4:	897b      	ldrh	r3, [r7, #10]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	747b      	strb	r3, [r7, #17]
    data[2] = (ch_b >> 8) & 0x0F;
 80006ea:	893b      	ldrh	r3, [r7, #8]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 030f 	and.w	r3, r3, #15
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	74bb      	strb	r3, [r7, #18]
    data[3] = ch_b & 0xFF;
 80006fa:	893b      	ldrh	r3, [r7, #8]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	74fb      	strb	r3, [r7, #19]
    data[4] = (ch_c >> 8) & 0x0F;
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	0a1b      	lsrs	r3, r3, #8
 8000704:	b29b      	uxth	r3, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	b2db      	uxtb	r3, r3
 800070e:	753b      	strb	r3, [r7, #20]
    data[5] = ch_c & 0xFF;
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	757b      	strb	r3, [r7, #21]
    data[6] = (ch_d >> 8) & 0x0F;
 8000716:	8c3b      	ldrh	r3, [r7, #32]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	b2db      	uxtb	r3, r3
 8000724:	75bb      	strb	r3, [r7, #22]
    data[7] = ch_d & 0xFF;
 8000726:	8c3b      	ldrh	r3, [r7, #32]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	75fb      	strb	r3, [r7, #23]

    return HAL_I2C_Master_Transmit(I2CHandler, MCP4728_ADDR, data, 8, HAL_MAX_DELAY);
 800072c:	f107 0210 	add.w	r2, r7, #16
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2308      	movs	r3, #8
 8000738:	21c0      	movs	r1, #192	@ 0xc0
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f002 f85e 	bl	80027fc <HAL_I2C_Master_Transmit>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MIDI_HANDLER_init>:
bool pop_buffer();

// PUBLIC FUNCTIONS

uint32_t MIDI_HANDLER_init(const struct MIDI_HANDLER_config* cfg)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    if (!buffer_init(cfg->buffer, MIDI_BUFFER_LENGTH))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feb3 	bl	80004c8 <buffer_init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <MIDI_HANDLER_init+0x22>
    {
        return -1;
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076c:	e004      	b.n	8000778 <MIDI_HANDLER_init+0x2c>
    }
    state.cfg = *cfg;
 800076e:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <MIDI_HANDLER_init+0x34>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6013      	str	r3, [r2, #0]

    return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000078 	.word	0x20000078

08000784 <MIDI_HANDLER_get_event>:

uint32_t MIDI_HANDLER_get_event(MIDI_event* midi_event)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    size_t iteration_count = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]

    while (1 == pop_buffer())
 8000790:	e017      	b.n	80007c2 <MIDI_HANDLER_get_event+0x3e>
    {
        if (++iteration_count >= MIDI_BUFFER_LENGTH)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800079e:	d305      	bcc.n	80007ac <MIDI_HANDLER_get_event+0x28>
        {
            // Something's wrong, we're stuck
            analyzed_status.stat = START_ANALYSIS;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <MIDI_HANDLER_get_event+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
            return -1; // Error code
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007aa:	e010      	b.n	80007ce <MIDI_HANDLER_get_event+0x4a>
        }

        // will keep returning false when not all events are read
        if (midi_is_event_generated(midi_event))
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f83f 	bl	8000830 <midi_is_event_generated>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d004      	beq.n	80007c2 <MIDI_HANDLER_get_event+0x3e>
        {
            // we reset the state and return that a midi event was succesfully generated!
            analyzed_status.stat = START_ANALYSIS;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MIDI_HANDLER_get_event+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
            return 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	e005      	b.n	80007ce <MIDI_HANDLER_get_event+0x4a>
    while (1 == pop_buffer())
 80007c2:	f000 f821 	bl	8000808 <pop_buffer>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1e2      	bne.n	8000792 <MIDI_HANDLER_get_event+0xe>
        }
    }

    return 0;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000007c 	.word	0x2000007c

080007dc <MIDI_HANDLER_push_buffer>:

bool MIDI_HANDLER_push_buffer(uint8_t* input)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    return buffer_push(state.cfg.buffer, input) == BUFFER_SUCCESS;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MIDI_HANDLER_push_buffer+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fef7 	bl	80005de <buffer_push>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078

08000808 <pop_buffer>:

bool pop_buffer()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
    return buffer_pop(state.cfg.buffer, &midi_buffer) == BUFFER_SUCCESS;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <pop_buffer+0x20>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4906      	ldr	r1, [pc, #24]	@ (800082c <pop_buffer+0x24>)
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff1a 	bl	800064c <buffer_pop>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2db      	uxtb	r3, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000078 	.word	0x20000078
 800082c:	20000080 	.word	0x20000080

08000830 <midi_is_event_generated>:

bool midi_is_event_generated(MIDI_event* midi_event)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    if (analyzed_status.stat == START_ANALYSIS)
 8000838:	4b40      	ldr	r3, [pc, #256]	@ (800093c <midi_is_event_generated+0x10c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d147      	bne.n	80008d0 <midi_is_event_generated+0xa0>
    {
        const uint8_t upper_half_byte = midi_buffer & 0xF0;
 8000840:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <midi_is_event_generated+0x110>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	f023 030f 	bic.w	r3, r3, #15
 8000848:	73fb      	strb	r3, [r7, #15]
        const uint8_t lower_half_byte = midi_buffer & 0x0F;
 800084a:	4b3d      	ldr	r3, [pc, #244]	@ (8000940 <midi_is_event_generated+0x110>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	73bb      	strb	r3, [r7, #14]

        switch (upper_half_byte)
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2bb0      	cmp	r3, #176	@ 0xb0
 8000858:	d025      	beq.n	80008a6 <midi_is_event_generated+0x76>
 800085a:	2bb0      	cmp	r3, #176	@ 0xb0
 800085c:	dc33      	bgt.n	80008c6 <midi_is_event_generated+0x96>
 800085e:	2b80      	cmp	r3, #128	@ 0x80
 8000860:	d011      	beq.n	8000886 <midi_is_event_generated+0x56>
 8000862:	2b90      	cmp	r3, #144	@ 0x90
 8000864:	d12f      	bne.n	80008c6 <midi_is_event_generated+0x96>
        {
        case 144: // Note On Message (0x90)
            midi_event->type = MSG_NOTE_ON;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
            analyzed_status.type = MSG_NOTE_ON;
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <midi_is_event_generated+0x10c>)
 800086e:	2201      	movs	r2, #1
 8000870:	705a      	strb	r2, [r3, #1]
            analyzed_status.stat = WAIT_DATA1;
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <midi_is_event_generated+0x10c>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
            midi_event->channel = lower_half_byte;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7bba      	ldrb	r2, [r7, #14]
 800087c:	705a      	strb	r2, [r3, #1]
            analyzed_status.channel = lower_half_byte;
 800087e:	4a2f      	ldr	r2, [pc, #188]	@ (800093c <midi_is_event_generated+0x10c>)
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	7093      	strb	r3, [r2, #2]
            break;
 8000884:	e052      	b.n	800092c <midi_is_event_generated+0xfc>
        case 128: // Note Off Message (0x80)
            midi_event->type = MSG_NOTE_OFF;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2202      	movs	r2, #2
 800088a:	701a      	strb	r2, [r3, #0]
            analyzed_status.type = MSG_NOTE_OFF;
 800088c:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <midi_is_event_generated+0x10c>)
 800088e:	2202      	movs	r2, #2
 8000890:	705a      	strb	r2, [r3, #1]
            analyzed_status.stat = WAIT_DATA1;
 8000892:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <midi_is_event_generated+0x10c>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
            midi_event->channel = lower_half_byte;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7bba      	ldrb	r2, [r7, #14]
 800089c:	705a      	strb	r2, [r3, #1]
            analyzed_status.channel = lower_half_byte;
 800089e:	4a27      	ldr	r2, [pc, #156]	@ (800093c <midi_is_event_generated+0x10c>)
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	7093      	strb	r3, [r2, #2]
            break;
 80008a4:	e042      	b.n	800092c <midi_is_event_generated+0xfc>
        case 176: // Control Change (0xB)
            midi_event->type = MSG_CC;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2205      	movs	r2, #5
 80008aa:	701a      	strb	r2, [r3, #0]
            analyzed_status.type = MSG_CC;
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <midi_is_event_generated+0x10c>)
 80008ae:	2205      	movs	r2, #5
 80008b0:	705a      	strb	r2, [r3, #1]
            analyzed_status.stat = WAIT_DATA1;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <midi_is_event_generated+0x10c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
            midi_event->channel = lower_half_byte;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7bba      	ldrb	r2, [r7, #14]
 80008bc:	705a      	strb	r2, [r3, #1]
            analyzed_status.channel = lower_half_byte;
 80008be:	4a1f      	ldr	r2, [pc, #124]	@ (800093c <midi_is_event_generated+0x10c>)
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	7093      	strb	r3, [r2, #2]
            break;
 80008c4:	e032      	b.n	800092c <midi_is_event_generated+0xfc>
        default:
            // reset the state if we don't understand what is happening
            analyzed_status.stat = START_ANALYSIS;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <midi_is_event_generated+0x10c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
            return false;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e02e      	b.n	800092e <midi_is_event_generated+0xfe>
        }
    }
    else if (analyzed_status.stat == WAIT_DATA1)
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <midi_is_event_generated+0x10c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d119      	bne.n	800090c <midi_is_event_generated+0xdc>
    {
        // push data into the first data_byte
        midi_event->data_byte[0] = (midi_buffer);
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <midi_is_event_generated+0x110>)
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	709a      	strb	r2, [r3, #2]

        if (analyzed_status.type == MSG_NOTE_ON ||
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <midi_is_event_generated+0x10c>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d00b      	beq.n	8000900 <midi_is_event_generated+0xd0>
            analyzed_status.type == MSG_NOTE_OFF ||
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <midi_is_event_generated+0x10c>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
        if (analyzed_status.type == MSG_NOTE_ON ||
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d007      	beq.n	8000900 <midi_is_event_generated+0xd0>
            analyzed_status.type == MSG_PITCH ||
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <midi_is_event_generated+0x10c>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
            analyzed_status.type == MSG_NOTE_OFF ||
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d003      	beq.n	8000900 <midi_is_event_generated+0xd0>
            analyzed_status.type == MSG_CC)
 80008f8:	4b10      	ldr	r3, [pc, #64]	@ (800093c <midi_is_event_generated+0x10c>)
 80008fa:	785b      	ldrb	r3, [r3, #1]
            analyzed_status.type == MSG_PITCH ||
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	d103      	bne.n	8000908 <midi_is_event_generated+0xd8>
        {
            analyzed_status.stat = WAIT_DATA2;
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <midi_is_event_generated+0x10c>)
 8000902:	2202      	movs	r2, #2
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e011      	b.n	800092c <midi_is_event_generated+0xfc>
        }
        else
        {
            return true;
 8000908:	2301      	movs	r3, #1
 800090a:	e010      	b.n	800092e <midi_is_event_generated+0xfe>
        }
    }
    else if (analyzed_status.stat == WAIT_DATA2)
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <midi_is_event_generated+0x10c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d105      	bne.n	8000920 <midi_is_event_generated+0xf0>
    {
        midi_event->data_byte[1] = (midi_buffer);
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <midi_is_event_generated+0x110>)
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	70da      	strb	r2, [r3, #3]
        return true;
 800091c:	2301      	movs	r3, #1
 800091e:	e006      	b.n	800092e <midi_is_event_generated+0xfe>
    }
    else if (analyzed_status.stat == END_ANALYSIS)
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <midi_is_event_generated+0x10c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b04      	cmp	r3, #4
 8000926:	d101      	bne.n	800092c <midi_is_event_generated+0xfc>
    {
        return true;
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <midi_is_event_generated+0xfe>
    }

    return false;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000007c 	.word	0x2000007c
 8000940:	20000080 	.word	0x20000080

08000944 <MIDI_PROCESSOR_init>:
void write();

// PUBLIC FUNCTIONS

uint8_t MIDI_PROCESSOR_init(const struct MIDI_PROCESSOR_config* cfg)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    if (cfg == NULL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <MIDI_PROCESSOR_init+0x12>
    {
        return -1;
 8000952:	23ff      	movs	r3, #255	@ 0xff
 8000954:	e020      	b.n	8000998 <MIDI_PROCESSOR_init+0x54>
    }

    memset(&state, 0, sizeof(state));
 8000956:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800095a:	2100      	movs	r1, #0
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 800095e:	f004 fbd1 	bl	8005104 <memset>
    state.cfg = *cfg;
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4614      	mov	r4, r2
 8000968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // used to track channel mode
    state.current_channel = 0;
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	741a      	strb	r2, [r3, #16]
    state.cv_dac_calibrated = DEFAULT_DAC_MAX_VALUE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 8000976:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800097a:	825a      	strh	r2, [r3, #18]
    state.vel_dac_calibrated = DEFAULT_DAC_MAX_VALUE;
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 800097e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000982:	829a      	strh	r2, [r3, #20]
    state.mod_dac_calibrated = DEFAULT_DAC_MAX_VALUE;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 8000986:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800098a:	82da      	strh	r2, [r3, #22]
    state.pitch_bend_range = DEFAULT_PITCH_BEND;
 800098c:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <MIDI_PROCESSOR_init+0x5c>)
 800098e:	22fa      	movs	r2, #250	@ 0xfa
 8000990:	831a      	strh	r2, [r3, #24]

    reset_channels();
 8000992:	f000 fc15 	bl	80011c0 <reset_channels>

    return 0;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	20000084 	.word	0x20000084

080009a4 <MIDI_PROCESSOR_handle_event>:

void MIDI_PROCESSOR_handle_event(MIDI_event* midi_event)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    switch (midi_event->type)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d81c      	bhi.n	80009f0 <MIDI_PROCESSOR_handle_event+0x4c>
 80009b6:	a201      	add	r2, pc, #4	@ (adr r2, 80009bc <MIDI_PROCESSOR_handle_event+0x18>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	080009d1 	.word	0x080009d1
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009e1 	.word	0x080009e1
 80009c8:	080009f1 	.word	0x080009f1
 80009cc:	080009e9 	.word	0x080009e9
    {
    case MSG_NOTE_ON:
        MIDI_PROCESSOR_note_on(midi_event);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f849 	bl	8000a68 <MIDI_PROCESSOR_note_on>
        break;
 80009d6:	e00c      	b.n	80009f2 <MIDI_PROCESSOR_handle_event+0x4e>

    case MSG_NOTE_OFF:
        MIDI_PROCESSOR_note_off(midi_event);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f915 	bl	8000c08 <MIDI_PROCESSOR_note_off>
        break;
 80009de:	e008      	b.n	80009f2 <MIDI_PROCESSOR_handle_event+0x4e>

    case MSG_PITCH:
        MIDI_PROCESSOR_pitch(midi_event);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f9db 	bl	8000d9c <MIDI_PROCESSOR_pitch>
        break;
 80009e6:	e004      	b.n	80009f2 <MIDI_PROCESSOR_handle_event+0x4e>
    case MSG_CC:
        MIDI_PROCESSOR_cc(midi_event);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f99b 	bl	8000d24 <MIDI_PROCESSOR_cc>
        break;
 80009ee:	e000      	b.n	80009f2 <MIDI_PROCESSOR_handle_event+0x4e>

    default:
        break;
 80009f0:	bf00      	nop
    }

    write();
 80009f2:	f000 fa3f 	bl	8000e74 <write>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop

08000a00 <MIDI_PROCESSOR_mode_changed>:

void MIDI_PROCESSOR_mode_changed()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
    GPIO_PinState sw_mode_1 = HAL_GPIO_ReadPin(SW_MODE_1_GPIO_Port, SW_MODE_1_Pin);
 8000a06:	2101      	movs	r1, #1
 8000a08:	4815      	ldr	r0, [pc, #84]	@ (8000a60 <MIDI_PROCESSOR_mode_changed+0x60>)
 8000a0a:	f001 fd69 	bl	80024e0 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState sw_mode_2 = HAL_GPIO_ReadPin(SW_MODE_2_GPIO_Port, SW_MODE_2_Pin);
 8000a12:	2102      	movs	r1, #2
 8000a14:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <MIDI_PROCESSOR_mode_changed+0x60>)
 8000a16:	f001 fd63 	bl	80024e0 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71bb      	strb	r3, [r7, #6]

    if (sw_mode_1 == GPIO_PIN_SET && sw_mode_2 == GPIO_PIN_SET)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <MIDI_PROCESSOR_mode_changed+0x32>
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d103      	bne.n	8000a32 <MIDI_PROCESSOR_mode_changed+0x32>
    {
        state.cfg.mode = MIDI_MODE_POLY;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MIDI_PROCESSOR_mode_changed+0x64>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	735a      	strb	r2, [r3, #13]
 8000a30:	e00c      	b.n	8000a4c <MIDI_PROCESSOR_mode_changed+0x4c>
    }
    else if (sw_mode_2 == GPIO_PIN_SET)
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d103      	bne.n	8000a40 <MIDI_PROCESSOR_mode_changed+0x40>
    {
        state.cfg.mode = MIDI_MODE_CHANNEL;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <MIDI_PROCESSOR_mode_changed+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	735a      	strb	r2, [r3, #13]
 8000a3e:	e005      	b.n	8000a4c <MIDI_PROCESSOR_mode_changed+0x4c>
    }
    else if (sw_mode_1 == GPIO_PIN_SET)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d102      	bne.n	8000a4c <MIDI_PROCESSOR_mode_changed+0x4c>
    {
        state.cfg.mode = MIDI_MODE_SEQUENCE;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <MIDI_PROCESSOR_mode_changed+0x64>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	735a      	strb	r2, [r3, #13]
    }

    // reset all channel configurations
    state.current_channel = 0x00;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <MIDI_PROCESSOR_mode_changed+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	741a      	strb	r2, [r3, #16]

    reset_channels();
 8000a52:	f000 fbb5 	bl	80011c0 <reset_channels>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020400 	.word	0x40020400
 8000a64:	20000084 	.word	0x20000084

08000a68 <MIDI_PROCESSOR_note_on>:
// Process each type of MIDI message
// This will change the internal state
// ********************

void MIDI_PROCESSOR_note_on(MIDI_event* midi_event)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    const uint8_t note = midi_event->data_byte[0];
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	74fb      	strb	r3, [r7, #19]
    const uint8_t velocity = midi_event->data_byte[1];
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	78db      	ldrb	r3, [r3, #3]
 8000a7a:	74bb      	strb	r3, [r7, #18]

    const uint16_t voltage_pitch = note_to_voltage(note, state.cv_dac_calibrated);
 8000a7c:	4b61      	ldr	r3, [pc, #388]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000a7e:	8a5a      	ldrh	r2, [r3, #18]
 8000a80:	7cfb      	ldrb	r3, [r7, #19]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fb4d 	bl	8001124 <note_to_voltage>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	823b      	strh	r3, [r7, #16]
    const uint16_t voltage_velocity = note_to_voltage(velocity, state.vel_dac_calibrated);
 8000a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000a90:	8a9a      	ldrh	r2, [r3, #20]
 8000a92:	7cbb      	ldrb	r3, [r7, #18]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fb44 	bl	8001124 <note_to_voltage>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	81fb      	strh	r3, [r7, #14]
    if (state.cfg.mode == MIDI_MODE_CHANNEL)
 8000aa0:	4b58      	ldr	r3, [pc, #352]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000aa2:	7b5b      	ldrb	r3, [r3, #13]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d130      	bne.n	8000b0a <MIDI_PROCESSOR_note_on+0xa2>
    {
        state.midi_processor_channel[midi_event->channel].notes[0].is_on = true;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4a55      	ldr	r2, [pc, #340]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	440b      	add	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	3320      	adds	r3, #32
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
        state.midi_processor_channel[midi_event->channel].notes[0].note_value = note;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4a4f      	ldr	r2, [pc, #316]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000ac8:	460b      	mov	r3, r1
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	440b      	add	r3, r1
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3322      	adds	r3, #34	@ 0x22
 8000ad4:	7cfa      	ldrb	r2, [r7, #19]
 8000ad6:	701a      	strb	r2, [r3, #0]
        state.midi_processor_channel[midi_event->channel].notes[0].cv = voltage_pitch;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	4618      	mov	r0, r3
 8000ade:	8a3a      	ldrh	r2, [r7, #16]
 8000ae0:	4948      	ldr	r1, [pc, #288]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	4403      	add	r3, r0
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	3324      	adds	r3, #36	@ 0x24
 8000aee:	601a      	str	r2, [r3, #0]
        state.midi_processor_channel[midi_event->channel].notes[0].velocity = voltage_velocity;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	4618      	mov	r0, r3
 8000af6:	89fa      	ldrh	r2, [r7, #14]
 8000af8:	4942      	ldr	r1, [pc, #264]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000afa:	4603      	mov	r3, r0
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	4403      	add	r3, r0
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	3328      	adds	r3, #40	@ 0x28
 8000b06:	601a      	str	r2, [r3, #0]
        state.midi_processor_channel[state.current_channel].notes[0].note_value = note;

        state.midi_processor_channel[state.current_channel].notes[0].cv = voltage_pitch;
        state.midi_processor_channel[state.current_channel].notes[0].velocity = voltage_velocity;
    }
}
 8000b08:	e078      	b.n	8000bfc <MIDI_PROCESSOR_note_on+0x194>
    else if (state.cfg.mode == MIDI_MODE_POLY)
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b0c:	7b5b      	ldrb	r3, [r3, #13]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d133      	bne.n	8000b7a <MIDI_PROCESSOR_note_on+0x112>
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e02c      	b.n	8000b72 <MIDI_PROCESSOR_note_on+0x10a>
            if (state.midi_processor_channel[0].notes[note_idx].is_on == false)
 8000b18:	4a3a      	ldr	r2, [pc, #232]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	4413      	add	r3, r2
 8000b20:	3320      	adds	r3, #32
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f083 0301 	eor.w	r3, r3, #1
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d01e      	beq.n	8000b6c <MIDI_PROCESSOR_note_on+0x104>
                state.midi_processor_channel[0].notes[note_idx].is_on = true;
 8000b2e:	4a35      	ldr	r2, [pc, #212]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	4413      	add	r3, r2
 8000b36:	3320      	adds	r3, #32
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
                state.midi_processor_channel[0].notes[note_idx].note_value = note;
 8000b3c:	4a31      	ldr	r2, [pc, #196]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	4413      	add	r3, r2
 8000b44:	3322      	adds	r3, #34	@ 0x22
 8000b46:	7cfa      	ldrb	r2, [r7, #19]
 8000b48:	701a      	strb	r2, [r3, #0]
                state.midi_processor_channel[0].notes[note_idx].cv = voltage_pitch;
 8000b4a:	8a3a      	ldrh	r2, [r7, #16]
 8000b4c:	492d      	ldr	r1, [pc, #180]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	440b      	add	r3, r1
 8000b54:	3324      	adds	r3, #36	@ 0x24
 8000b56:	601a      	str	r2, [r3, #0]
                state.midi_processor_channel[0].notes[note_idx].velocity = voltage_velocity;
 8000b58:	89fa      	ldrh	r2, [r7, #14]
 8000b5a:	492a      	ldr	r1, [pc, #168]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	440b      	add	r3, r1
 8000b64:	3308      	adds	r3, #8
 8000b66:	601a      	str	r2, [r3, #0]
                break;
 8000b68:	bf00      	nop
}
 8000b6a:	e047      	b.n	8000bfc <MIDI_PROCESSOR_note_on+0x194>
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	ddcf      	ble.n	8000b18 <MIDI_PROCESSOR_note_on+0xb0>
}
 8000b78:	e040      	b.n	8000bfc <MIDI_PROCESSOR_note_on+0x194>
    else if (state.cfg.mode == MIDI_MODE_SEQUENCE)
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b7c:	7b5b      	ldrb	r3, [r3, #13]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d13c      	bne.n	8000bfc <MIDI_PROCESSOR_note_on+0x194>
        state.current_channel++;
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b8c:	741a      	strb	r2, [r3, #16]
        if (state.current_channel > 3)
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b90:	7c1b      	ldrb	r3, [r3, #16]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d902      	bls.n	8000b9c <MIDI_PROCESSOR_note_on+0x134>
            state.current_channel = 0;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	741a      	strb	r2, [r3, #16]
        state.midi_processor_channel[state.current_channel].notes[0].is_on = true;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000b9e:	7c1b      	ldrb	r3, [r3, #16]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	440b      	add	r3, r1
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	3320      	adds	r3, #32
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
        state.midi_processor_channel[state.current_channel].notes[0].note_value = note;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000bb6:	7c1b      	ldrb	r3, [r3, #16]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	440b      	add	r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3322      	adds	r3, #34	@ 0x22
 8000bc8:	7cfa      	ldrb	r2, [r7, #19]
 8000bca:	701a      	strb	r2, [r3, #0]
        state.midi_processor_channel[state.current_channel].notes[0].cv = voltage_pitch;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000bce:	7c1b      	ldrb	r3, [r3, #16]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	8a3a      	ldrh	r2, [r7, #16]
 8000bd4:	490b      	ldr	r1, [pc, #44]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	4403      	add	r3, r0
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	3324      	adds	r3, #36	@ 0x24
 8000be2:	601a      	str	r2, [r3, #0]
        state.midi_processor_channel[state.current_channel].notes[0].velocity = voltage_velocity;
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000be6:	7c1b      	ldrb	r3, [r3, #16]
 8000be8:	4618      	mov	r0, r3
 8000bea:	89fa      	ldrh	r2, [r7, #14]
 8000bec:	4905      	ldr	r1, [pc, #20]	@ (8000c04 <MIDI_PROCESSOR_note_on+0x19c>)
 8000bee:	4603      	mov	r3, r0
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	4403      	add	r3, r0
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3328      	adds	r3, #40	@ 0x28
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000084 	.word	0x20000084

08000c08 <MIDI_PROCESSOR_note_off>:

void MIDI_PROCESSOR_note_off(MIDI_event* midi_event)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    const uint8_t note = midi_event->data_byte[0];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	73fb      	strb	r3, [r7, #15]
    const uint8_t release_velocity = midi_event->data_byte[1];
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	78db      	ldrb	r3, [r3, #3]
 8000c1a:	73bb      	strb	r3, [r7, #14]

    if (state.cfg.mode == MIDI_MODE_CHANNEL)
 8000c1c:	4b40      	ldr	r3, [pc, #256]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c1e:	7b5b      	ldrb	r3, [r3, #13]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d118      	bne.n	8000c56 <MIDI_PROCESSOR_note_off+0x4e>
    {
        state.midi_processor_channel[midi_event->channel].notes[0].is_on = false;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	440b      	add	r3, r1
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	3320      	adds	r3, #32
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
        state.midi_processor_channel[midi_event->channel].notes[0].velocity = release_velocity;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	785b      	ldrb	r3, [r3, #1]
 8000c40:	4618      	mov	r0, r3
 8000c42:	7bba      	ldrb	r2, [r7, #14]
 8000c44:	4936      	ldr	r1, [pc, #216]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c46:	4603      	mov	r3, r0
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4403      	add	r3, r0
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3328      	adds	r3, #40	@ 0x28
 8000c52:	601a      	str	r2, [r3, #0]
                state.midi_processor_channel[channel_idx].notes[0].is_on = false;
                break;
            }
        }
    }
}
 8000c54:	e05e      	b.n	8000d14 <MIDI_PROCESSOR_note_off+0x10c>
    else if (state.cfg.mode == MIDI_MODE_POLY)
 8000c56:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c58:	7b5b      	ldrb	r3, [r3, #13]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d12a      	bne.n	8000cb4 <MIDI_PROCESSOR_note_off+0xac>
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e023      	b.n	8000cac <MIDI_PROCESSOR_note_off+0xa4>
            if (state.midi_processor_channel[0].notes[note_idx].note_value == note
 8000c64:	4a2e      	ldr	r2, [pc, #184]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3322      	adds	r3, #34	@ 0x22
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	7bfa      	ldrb	r2, [r7, #15]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d117      	bne.n	8000ca6 <MIDI_PROCESSOR_note_off+0x9e>
                && state.midi_processor_channel[0].notes[note_idx].is_on == true)
 8000c76:	4a2a      	ldr	r2, [pc, #168]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3320      	adds	r3, #32
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00f      	beq.n	8000ca6 <MIDI_PROCESSOR_note_off+0x9e>
                state.midi_processor_channel[0].notes[note_idx].is_on = false;
 8000c86:	4a26      	ldr	r2, [pc, #152]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3320      	adds	r3, #32
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
                state.midi_processor_channel[0].notes[note_idx].velocity = release_velocity;
 8000c94:	7bba      	ldrb	r2, [r7, #14]
 8000c96:	4922      	ldr	r1, [pc, #136]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	440b      	add	r3, r1
 8000ca0:	3308      	adds	r3, #8
 8000ca2:	601a      	str	r2, [r3, #0]
                break;
 8000ca4:	e036      	b.n	8000d14 <MIDI_PROCESSOR_note_off+0x10c>
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	ddd8      	ble.n	8000c64 <MIDI_PROCESSOR_note_off+0x5c>
}
 8000cb2:	e02f      	b.n	8000d14 <MIDI_PROCESSOR_note_off+0x10c>
    else if (state.cfg.mode == MIDI_MODE_SEQUENCE)
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000cb6:	7b5b      	ldrb	r3, [r3, #13]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d12b      	bne.n	8000d14 <MIDI_PROCESSOR_note_off+0x10c>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	e024      	b.n	8000d0c <MIDI_PROCESSOR_note_off+0x104>
            if (state.midi_processor_channel[channel_idx].notes[0].note_value == note
 8000cc2:	4917      	ldr	r1, [pc, #92]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3322      	adds	r3, #34	@ 0x22
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d115      	bne.n	8000d06 <MIDI_PROCESSOR_note_off+0xfe>
                && state.midi_processor_channel[channel_idx].notes[0].is_on == true)
 8000cda:	4911      	ldr	r1, [pc, #68]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3320      	adds	r3, #32
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00a      	beq.n	8000d06 <MIDI_PROCESSOR_note_off+0xfe>
                state.midi_processor_channel[channel_idx].notes[0].is_on = false;
 8000cf0:	490b      	ldr	r1, [pc, #44]	@ (8000d20 <MIDI_PROCESSOR_note_off+0x118>)
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3320      	adds	r3, #32
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                break;
 8000d04:	e006      	b.n	8000d14 <MIDI_PROCESSOR_note_off+0x10c>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	ddd7      	ble.n	8000cc2 <MIDI_PROCESSOR_note_off+0xba>
}
 8000d12:	e7ff      	b.n	8000d14 <MIDI_PROCESSOR_note_off+0x10c>
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20000084 	.word	0x20000084

08000d24 <MIDI_PROCESSOR_cc>:

void MIDI_PROCESSOR_cc(MIDI_event* midi_event)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    const uint8_t control_message = midi_event->data_byte[0];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	789b      	ldrb	r3, [r3, #2]
 8000d30:	72fb      	strb	r3, [r7, #11]
    switch (control_message)
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	2b7b      	cmp	r3, #123	@ 0x7b
 8000d36:	d125      	bne.n	8000d84 <MIDI_PROCESSOR_cc+0x60>
    {
    case CC_ALL_NOTES_OFF:
        if (state.cfg.mode == MIDI_MODE_CHANNEL)
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MIDI_PROCESSOR_cc+0x74>)
 8000d3a:	7b5b      	ldrb	r3, [r3, #13]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10c      	bne.n	8000d5a <MIDI_PROCESSOR_cc+0x36>
        {
            state.midi_processor_channel[midi_event->channel].notes[0].is_on = false;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	4619      	mov	r1, r3
 8000d46:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <MIDI_PROCESSOR_cc+0x74>)
 8000d48:	460b      	mov	r3, r1
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	440b      	add	r3, r1
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	3320      	adds	r3, #32
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
            for (int note_idx = 0; note_idx < 4; note_idx++)
            {
                state.midi_processor_channel[0].notes[note_idx].is_on = false;
            }
        }
        break;
 8000d58:	e016      	b.n	8000d88 <MIDI_PROCESSOR_cc+0x64>
        else if (state.cfg.mode == MIDI_MODE_POLY)
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MIDI_PROCESSOR_cc+0x74>)
 8000d5c:	7b5b      	ldrb	r3, [r3, #13]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d112      	bne.n	8000d88 <MIDI_PROCESSOR_cc+0x64>
            for (int note_idx = 0; note_idx < 4; note_idx++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e009      	b.n	8000d7c <MIDI_PROCESSOR_cc+0x58>
                state.midi_processor_channel[0].notes[note_idx].is_on = false;
 8000d68:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <MIDI_PROCESSOR_cc+0x74>)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	4413      	add	r3, r2
 8000d70:	3320      	adds	r3, #32
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
            for (int note_idx = 0; note_idx < 4; note_idx++)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	ddf2      	ble.n	8000d68 <MIDI_PROCESSOR_cc+0x44>
        break;
 8000d82:	e001      	b.n	8000d88 <MIDI_PROCESSOR_cc+0x64>
    default:
        // No idea what the message is, so don't even try
        break;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <MIDI_PROCESSOR_cc+0x66>
        break;
 8000d88:	bf00      	nop
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000084 	.word	0x20000084

08000d9c <MIDI_PROCESSOR_pitch>:

void MIDI_PROCESSOR_pitch(MIDI_event* midi_event)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b08b      	sub	sp, #44	@ 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    uint16_t pitch_value = midi_event->data_byte[0];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	837b      	strh	r3, [r7, #26]
    pitch_value <<= 8;
 8000daa:	8b7b      	ldrh	r3, [r7, #26]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	837b      	strh	r3, [r7, #26]
    pitch_value |= (uint16_t)midi_event->data_byte[1];
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	78db      	ldrb	r3, [r3, #3]
 8000db4:	461a      	mov	r2, r3
 8000db6:	8b7b      	ldrh	r3, [r7, #26]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	837b      	strh	r3, [r7, #26]

    float pitch_bend = get_pitch_bend(pitch_value);
 8000dbc:	8b7b      	ldrh	r3, [r7, #26]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fa6a 	bl	8001298 <get_pitch_bend>
 8000dc4:	ed87 0a05 	vstr	s0, [r7, #20]
    // output of 500mV --> 2V [Gain of 4 after DAC]
    // output of 0mV --> 0V [Gain of 4 after DAC]

    // Calculate pitch bend voltage:
    // Start from the center voltage (no bend)
    const uint16_t center_voltage = state.mod_dac_calibrated / 2;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000dca:	8adb      	ldrh	r3, [r3, #22]
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	827b      	strh	r3, [r7, #18]
    // Then add or subtract based on pitch bend value (-1 to 1)
    const int32_t pitch_bend_voltage = (int32_t)(pitch_bend * state.pitch_bend_range);
 8000dd0:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000dd2:	8b1b      	ldrh	r3, [r3, #24]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de8:	ee17 3a90 	vmov	r3, s15
 8000dec:	60fb      	str	r3, [r7, #12]
    // scaled by the pitch bend range
    uint16_t voltage_pitch = (center_voltage + pitch_bend_voltage);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	8a7b      	ldrh	r3, [r7, #18]
 8000df4:	4413      	add	r3, r2
 8000df6:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Ensure voltage_pitch is within the valid range
    if (voltage_pitch > state.mod_dac_calibrated)
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000dfa:	8adb      	ldrh	r3, [r3, #22]
 8000dfc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d902      	bls.n	8000e08 <MIDI_PROCESSOR_pitch+0x6c>
    {
        voltage_pitch = state.mod_dac_calibrated;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000e04:	8adb      	ldrh	r3, [r3, #22]
 8000e06:	84fb      	strh	r3, [r7, #38]	@ 0x26
    else if (voltage_pitch < 0)
    {
        voltage_pitch = 0;
    }

    if (state.cfg.mode == MIDI_MODE_CHANNEL)
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000e0a:	7b5b      	ldrb	r3, [r3, #13]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10c      	bne.n	8000e2a <MIDI_PROCESSOR_pitch+0x8e>
    {
        state.midi_processor_channel[midi_event->channel].notes[0].mod = voltage_pitch;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	4618      	mov	r0, r3
 8000e16:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e18:	4915      	ldr	r1, [pc, #84]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4403      	add	r3, r0
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	332c      	adds	r3, #44	@ 0x2c
 8000e26:	601a      	str	r2, [r3, #0]
            {
                state.midi_processor_channel[channel_idx].notes[note_idx].mod = voltage_pitch;
            }
        }
    }
}
 8000e28:	e01e      	b.n	8000e68 <MIDI_PROCESSOR_pitch+0xcc>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
 8000e2e:	e018      	b.n	8000e62 <MIDI_PROCESSOR_pitch+0xc6>
            for (int note_idx = 0; note_idx < 4; note_idx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	e00f      	b.n	8000e56 <MIDI_PROCESSOR_pitch+0xba>
                state.midi_processor_channel[channel_idx].notes[note_idx].mod = voltage_pitch;
 8000e36:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000e38:	4c0d      	ldr	r4, [pc, #52]	@ (8000e70 <MIDI_PROCESSOR_pitch+0xd4>)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	6a3a      	ldr	r2, [r7, #32]
 8000e3e:	0118      	lsls	r0, r3, #4
 8000e40:	4613      	mov	r3, r2
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4403      	add	r3, r0
 8000e4a:	4423      	add	r3, r4
 8000e4c:	332c      	adds	r3, #44	@ 0x2c
 8000e4e:	6019      	str	r1, [r3, #0]
            for (int note_idx = 0; note_idx < 4; note_idx++)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	ddec      	ble.n	8000e36 <MIDI_PROCESSOR_pitch+0x9a>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	dde3      	ble.n	8000e30 <MIDI_PROCESSOR_pitch+0x94>
}
 8000e68:	bf00      	nop
 8000e6a:	372c      	adds	r7, #44	@ 0x2c
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20000084 	.word	0x20000084

08000e74 <write>:
// Render the output values
// Will consume the internal state and set the DAC/GPIO to the values
// ********************

void write()
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b099      	sub	sp, #100	@ 0x64
 8000e78:	af02      	add	r7, sp, #8
    switch (state.cfg.mode)
 8000e7a:	4b7e      	ldr	r3, [pc, #504]	@ (8001074 <write+0x200>)
 8000e7c:	7b5b      	ldrb	r3, [r3, #13]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	f000 80d4 	beq.w	800102c <write+0x1b8>
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	f300 8143 	bgt.w	8001110 <write+0x29c>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <write+0x20>
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d06d      	beq.n	8000f6e <write+0xfa>
                          state.midi_processor_channel[1].notes[0].mod,
                          state.midi_processor_channel[2].notes[0].mod,
                          state.midi_processor_channel[3].notes[0].mod);
        break;
    default:
        break;
 8000e92:	e13d      	b.n	8001110 <write+0x29c>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e98:	e029      	b.n	8000eee <write+0x7a>
            const MIDI_PROCESSOR_channel midi_channel = state.midi_processor_channel[channel_idx];
 8000e9a:	4976      	ldr	r1, [pc, #472]	@ (8001074 <write+0x200>)
 8000e9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3318      	adds	r3, #24
 8000eaa:	4638      	mov	r0, r7
 8000eac:	3304      	adds	r3, #4
 8000eae:	2244      	movs	r2, #68	@ 0x44
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f004 f96b 	bl	800518c <memcpy>
            const uint16_t pin = gate_to_gpio_pin(midi_channel.channel);
 8000eb6:	783b      	ldrb	r3, [r7, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f957 	bl	800116c <gate_to_gpio_pin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (midi_channel.notes[0].is_on)
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <write+0x66>
                    HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000eca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4869      	ldr	r0, [pc, #420]	@ (8001078 <write+0x204>)
 8000ed4:	f001 fb1c 	bl	8002510 <HAL_GPIO_WritePin>
 8000ed8:	e006      	b.n	8000ee8 <write+0x74>
                    HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8000eda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4865      	ldr	r0, [pc, #404]	@ (8001078 <write+0x204>)
 8000ee4:	f001 fb14 	bl	8002510 <HAL_GPIO_WritePin>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 8000ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eea:	3301      	adds	r3, #1
 8000eec:	657b      	str	r3, [r7, #84]	@ 0x54
 8000eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	ddd2      	ble.n	8000e9a <write+0x26>
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8001074 <write+0x200>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
                          state.midi_processor_channel[0].notes[0].cv,
 8000ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8001074 <write+0x200>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000efc:	b299      	uxth	r1, r3
                          state.midi_processor_channel[1].notes[0].cv,
 8000efe:	4b5d      	ldr	r3, [pc, #372]	@ (8001074 <write+0x200>)
 8000f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000f02:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[2].notes[0].cv,
 8000f04:	4b5b      	ldr	r3, [pc, #364]	@ (8001074 <write+0x200>)
 8000f06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000f0a:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[3].notes[0].cv);
 8000f0c:	4b59      	ldr	r3, [pc, #356]	@ (8001074 <write+0x200>)
 8000f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	f7ff fbcf 	bl	80006ba <MCP4728_FastWrite>
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000f1c:	4b55      	ldr	r3, [pc, #340]	@ (8001074 <write+0x200>)
 8000f1e:	6858      	ldr	r0, [r3, #4]
                          state.midi_processor_channel[0].notes[0].velocity,
 8000f20:	4b54      	ldr	r3, [pc, #336]	@ (8001074 <write+0x200>)
 8000f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000f24:	b299      	uxth	r1, r3
                          state.midi_processor_channel[1].notes[0].velocity,
 8000f26:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <write+0x200>)
 8000f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000f2a:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[2].notes[0].velocity,
 8000f2c:	4b51      	ldr	r3, [pc, #324]	@ (8001074 <write+0x200>)
 8000f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000f32:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[3].notes[0].velocity);
 8000f34:	4b4f      	ldr	r3, [pc, #316]	@ (8001074 <write+0x200>)
 8000f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	4623      	mov	r3, r4
 8000f40:	f7ff fbbb 	bl	80006ba <MCP4728_FastWrite>
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8000f44:	4b4b      	ldr	r3, [pc, #300]	@ (8001074 <write+0x200>)
 8000f46:	6898      	ldr	r0, [r3, #8]
                          state.midi_processor_channel[0].notes[0].mod,
 8000f48:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <write+0x200>)
 8000f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8000f4c:	b299      	uxth	r1, r3
                          state.midi_processor_channel[1].notes[0].mod,
 8000f4e:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <write+0x200>)
 8000f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8000f52:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[2].notes[0].mod,
 8000f54:	4b47      	ldr	r3, [pc, #284]	@ (8001074 <write+0x200>)
 8000f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8000f5a:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[3].notes[0].mod);
 8000f5c:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <write+0x200>)
 8000f5e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4623      	mov	r3, r4
 8000f68:	f7ff fba7 	bl	80006ba <MCP4728_FastWrite>
        break;
 8000f6c:	e0d1      	b.n	8001112 <write+0x29e>
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f72:	e021      	b.n	8000fb8 <write+0x144>
            const uint16_t pin = gate_to_gpio_pin(note_idx);
 8000f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f8f7 	bl	800116c <gate_to_gpio_pin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                if (state.midi_processor_channel[0].notes[note_idx].is_on)
 8000f84:	4a3b      	ldr	r2, [pc, #236]	@ (8001074 <write+0x200>)
 8000f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <write+0x130>
                    HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000f94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4836      	ldr	r0, [pc, #216]	@ (8001078 <write+0x204>)
 8000f9e:	f001 fab7 	bl	8002510 <HAL_GPIO_WritePin>
 8000fa2:	e006      	b.n	8000fb2 <write+0x13e>
                    HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 8000fa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4832      	ldr	r0, [pc, #200]	@ (8001078 <write+0x204>)
 8000fae:	f001 faaf 	bl	8002510 <HAL_GPIO_WritePin>
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8000fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8000fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	ddda      	ble.n	8000f74 <write+0x100>
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <write+0x200>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
                          state.midi_processor_channel[0].notes[0].cv,
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <write+0x200>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000fc6:	b299      	uxth	r1, r3
                          state.midi_processor_channel[0].notes[1].cv,
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <write+0x200>)
 8000fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000fcc:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[0].notes[2].cv,
 8000fce:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <write+0x200>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000fd2:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[0].notes[3].cv);
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <write+0x200>)
 8000fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	f7ff fb6c 	bl	80006ba <MCP4728_FastWrite>
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000fe2:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <write+0x200>)
 8000fe4:	6858      	ldr	r0, [r3, #4]
                          state.midi_processor_channel[0].notes[0].velocity,
 8000fe6:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <write+0x200>)
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000fea:	b299      	uxth	r1, r3
                          state.midi_processor_channel[0].notes[1].velocity,
 8000fec:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <write+0x200>)
 8000fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000ff0:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[0].notes[2].velocity,
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <write+0x200>)
 8000ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000ff6:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[0].notes[3].velocity);
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <write+0x200>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
        MCP4728_FastWrite(state.cfg.vel_dac2,
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4623      	mov	r3, r4
 8001002:	f7ff fb5a 	bl	80006ba <MCP4728_FastWrite>
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <write+0x200>)
 8001008:	6898      	ldr	r0, [r3, #8]
                          state.midi_processor_channel[0].notes[0].mod,
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <write+0x200>)
 800100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        MCP4728_FastWrite(state.cfg.mod_dac3,
 800100e:	b299      	uxth	r1, r3
                          state.midi_processor_channel[0].notes[1].mod,
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <write+0x200>)
 8001012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8001014:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[0].notes[2].mod,
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <write+0x200>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        MCP4728_FastWrite(state.cfg.mod_dac3,
 800101a:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[0].notes[3].mod);
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <write+0x200>)
 800101e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8001020:	b29b      	uxth	r3, r3
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4623      	mov	r3, r4
 8001026:	f7ff fb48 	bl	80006ba <MCP4728_FastWrite>
        break;
 800102a:	e072      	b.n	8001112 <write+0x29e>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 800102c:	2300      	movs	r3, #0
 800102e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001030:	e02e      	b.n	8001090 <write+0x21c>
            const MIDI_PROCESSOR_channel midi_channel = state.midi_processor_channel[channel_idx];
 8001032:	4910      	ldr	r1, [pc, #64]	@ (8001074 <write+0x200>)
 8001034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3318      	adds	r3, #24
 8001042:	4638      	mov	r0, r7
 8001044:	3304      	adds	r3, #4
 8001046:	2244      	movs	r2, #68	@ 0x44
 8001048:	4619      	mov	r1, r3
 800104a:	f004 f89f 	bl	800518c <memcpy>
            const uint16_t pin = gate_to_gpio_pin(midi_channel.channel);
 800104e:	783b      	ldrb	r3, [r7, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f88b 	bl	800116c <gate_to_gpio_pin>
 8001056:	4603      	mov	r3, r0
 8001058:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                if (midi_channel.notes[0].is_on)
 800105c:	793b      	ldrb	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00c      	beq.n	800107c <write+0x208>
                    HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8001062:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	4803      	ldr	r0, [pc, #12]	@ (8001078 <write+0x204>)
 800106c:	f001 fa50 	bl	8002510 <HAL_GPIO_WritePin>
 8001070:	e00b      	b.n	800108a <write+0x216>
 8001072:	bf00      	nop
 8001074:	20000084 	.word	0x20000084
 8001078:	40020400 	.word	0x40020400
                    HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_RESET);
 800107c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4825      	ldr	r0, [pc, #148]	@ (800111c <write+0x2a8>)
 8001086:	f001 fa43 	bl	8002510 <HAL_GPIO_WritePin>
        for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 800108a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800108c:	3301      	adds	r3, #1
 800108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001092:	2b03      	cmp	r3, #3
 8001094:	ddcd      	ble.n	8001032 <write+0x1be>
        MCP4728_FastWrite(state.cfg.cv_dac1,
 8001096:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <write+0x2ac>)
 8001098:	6818      	ldr	r0, [r3, #0]
                          state.midi_processor_channel[0].notes[0].cv,
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <write+0x2ac>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        MCP4728_FastWrite(state.cfg.cv_dac1,
 800109e:	b299      	uxth	r1, r3
                          state.midi_processor_channel[1].notes[0].cv,
 80010a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <write+0x2ac>)
 80010a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
        MCP4728_FastWrite(state.cfg.cv_dac1,
 80010a4:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[2].notes[0].cv,
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <write+0x2ac>)
 80010a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
        MCP4728_FastWrite(state.cfg.cv_dac1,
 80010ac:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[3].notes[0].cv);
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <write+0x2ac>)
 80010b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        MCP4728_FastWrite(state.cfg.cv_dac1,
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	4623      	mov	r3, r4
 80010ba:	f7ff fafe 	bl	80006ba <MCP4728_FastWrite>
        MCP4728_FastWrite(state.cfg.vel_dac2,
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <write+0x2ac>)
 80010c0:	6858      	ldr	r0, [r3, #4]
                          state.midi_processor_channel[0].notes[0].velocity,
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <write+0x2ac>)
 80010c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        MCP4728_FastWrite(state.cfg.vel_dac2,
 80010c6:	b299      	uxth	r1, r3
                          state.midi_processor_channel[1].notes[0].velocity,
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <write+0x2ac>)
 80010ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        MCP4728_FastWrite(state.cfg.vel_dac2,
 80010cc:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[2].notes[0].velocity,
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <write+0x2ac>)
 80010d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
        MCP4728_FastWrite(state.cfg.vel_dac2,
 80010d4:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[3].notes[0].velocity);
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <write+0x2ac>)
 80010d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
        MCP4728_FastWrite(state.cfg.vel_dac2,
 80010dc:	b29b      	uxth	r3, r3
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4623      	mov	r3, r4
 80010e2:	f7ff faea 	bl	80006ba <MCP4728_FastWrite>
        MCP4728_FastWrite(state.cfg.mod_dac3,
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <write+0x2ac>)
 80010e8:	6898      	ldr	r0, [r3, #8]
                          state.midi_processor_channel[0].notes[0].mod,
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <write+0x2ac>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        MCP4728_FastWrite(state.cfg.mod_dac3,
 80010ee:	b299      	uxth	r1, r3
                          state.midi_processor_channel[1].notes[0].mod,
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <write+0x2ac>)
 80010f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        MCP4728_FastWrite(state.cfg.mod_dac3,
 80010f4:	b29a      	uxth	r2, r3
                          state.midi_processor_channel[2].notes[0].mod,
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <write+0x2ac>)
 80010f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
        MCP4728_FastWrite(state.cfg.mod_dac3,
 80010fc:	b29c      	uxth	r4, r3
                          state.midi_processor_channel[3].notes[0].mod);
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <write+0x2ac>)
 8001100:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
        MCP4728_FastWrite(state.cfg.mod_dac3,
 8001104:	b29b      	uxth	r3, r3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	f7ff fad6 	bl	80006ba <MCP4728_FastWrite>
        break;
 800110e:	e000      	b.n	8001112 <write+0x29e>
        break;
 8001110:	bf00      	nop
    }
}
 8001112:	bf00      	nop
 8001114:	375c      	adds	r7, #92	@ 0x5c
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	bf00      	nop
 800111c:	40020400 	.word	0x40020400
 8001120:	20000084 	.word	0x20000084

08001124 <note_to_voltage>:
// ********************
// Helper Functions
// ********************

uint16_t note_to_voltage(uint8_t midi_note, uint16_t calibrated_voltage)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	80bb      	strh	r3, [r7, #4]
    // Ensure MIDI note is within valid range (0-127)
    if (midi_note > MIDI_NOTES_LENGTH)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	da01      	bge.n	8001140 <note_to_voltage+0x1c>
    {
        midi_note = MIDI_NOTES_LENGTH;
 800113c:	237f      	movs	r3, #127	@ 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
    }

    // Convert MIDI note to voltage (0-2000) [amplified by 4x gain]
    // 2000 / 127 ≈ 15.748, but we'll use 15.75 for integer math
    const uint16_t voltage = (uint32_t)midi_note * calibrated_voltage / MIDI_NOTES_LENGTH;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	88ba      	ldrh	r2, [r7, #4]
 8001144:	fb03 f202 	mul.w	r2, r3, r2
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <note_to_voltage+0x44>)
 800114a:	fba3 1302 	umull	r1, r3, r3, r2
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	0852      	lsrs	r2, r2, #1
 8001152:	4413      	add	r3, r2
 8001154:	099b      	lsrs	r3, r3, #6
 8001156:	81fb      	strh	r3, [r7, #14]

    return voltage;
 8001158:	89fb      	ldrh	r3, [r7, #14]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	02040811 	.word	0x02040811

0800116c <gate_to_gpio_pin>:

uint16_t gate_to_gpio_pin(uint8_t gate)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
    switch (gate)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d817      	bhi.n	80011ac <gate_to_gpio_pin+0x40>
 800117c:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <gate_to_gpio_pin+0x18>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119b 	.word	0x0800119b
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011a7 	.word	0x080011a7
    {
    case 0:
        return GATE_1_OUT_Pin;
 8001194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001198:	e00b      	b.n	80011b2 <gate_to_gpio_pin+0x46>
    case 1:
        return GATE_2_OUT_Pin;
 800119a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119e:	e008      	b.n	80011b2 <gate_to_gpio_pin+0x46>
    case 2:
        return GATE_3_OUT_Pin;
 80011a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011a4:	e005      	b.n	80011b2 <gate_to_gpio_pin+0x46>
    case 3:
        return GATE_4_OUT_Pin;
 80011a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011aa:	e002      	b.n	80011b2 <gate_to_gpio_pin+0x46>
    default: break;
 80011ac:	bf00      	nop
    }
    return -1;
 80011ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <reset_channels>:

void reset_channels()
{
 80011c0:	b490      	push	{r4, r7}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
    for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e05a      	b.n	8001282 <reset_channels+0xc2>
    {
        state.midi_processor_channel[channel_idx].channel = channel_idx;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	b2d8      	uxtb	r0, r3
 80011d0:	4930      	ldr	r1, [pc, #192]	@ (8001294 <reset_channels+0xd4>)
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	331c      	adds	r3, #28
 80011e0:	4602      	mov	r2, r0
 80011e2:	701a      	strb	r2, [r3, #0]

        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	e045      	b.n	8001276 <reset_channels+0xb6>
        {
            state.midi_processor_channel[channel_idx].notes[note_idx].is_on = false;
 80011ea:	482a      	ldr	r0, [pc, #168]	@ (8001294 <reset_channels+0xd4>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	0119      	lsls	r1, r3, #4
 80011f2:	4613      	mov	r3, r2
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	4403      	add	r3, r0
 80011fe:	3320      	adds	r3, #32
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
            state.midi_processor_channel[channel_idx].notes[note_idx].number = note_idx;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2dc      	uxtb	r4, r3
 8001208:	4822      	ldr	r0, [pc, #136]	@ (8001294 <reset_channels+0xd4>)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	0119      	lsls	r1, r3, #4
 8001210:	4613      	mov	r3, r2
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	4403      	add	r3, r0
 800121c:	3321      	adds	r3, #33	@ 0x21
 800121e:	4622      	mov	r2, r4
 8001220:	701a      	strb	r2, [r3, #0]
            state.midi_processor_channel[channel_idx].notes[note_idx].cv = 0;
 8001222:	481c      	ldr	r0, [pc, #112]	@ (8001294 <reset_channels+0xd4>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	0119      	lsls	r1, r3, #4
 800122a:	4613      	mov	r3, r2
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	4403      	add	r3, r0
 8001236:	3324      	adds	r3, #36	@ 0x24
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
            state.midi_processor_channel[channel_idx].notes[note_idx].velocity = 0;
 800123c:	4815      	ldr	r0, [pc, #84]	@ (8001294 <reset_channels+0xd4>)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	0119      	lsls	r1, r3, #4
 8001244:	4613      	mov	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	4403      	add	r3, r0
 8001250:	3328      	adds	r3, #40	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
            state.midi_processor_channel[channel_idx].notes[note_idx].mod = 250;
 8001256:	480f      	ldr	r0, [pc, #60]	@ (8001294 <reset_channels+0xd4>)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	0119      	lsls	r1, r3, #4
 800125e:	4613      	mov	r3, r2
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	4403      	add	r3, r0
 800126a:	332c      	adds	r3, #44	@ 0x2c
 800126c:	22fa      	movs	r2, #250	@ 0xfa
 800126e:	601a      	str	r2, [r3, #0]
        for (int note_idx = 0; note_idx < NUMBER_OF_NOTES_PER_CHANNEL; note_idx++)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b03      	cmp	r3, #3
 800127a:	ddb6      	ble.n	80011ea <reset_channels+0x2a>
    for (int channel_idx = 0; channel_idx < NUMBER_OF_CHANNELS; channel_idx++)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b03      	cmp	r3, #3
 8001286:	dda1      	ble.n	80011cc <reset_channels+0xc>
        }
    }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bc90      	pop	{r4, r7}
 8001292:	4770      	bx	lr
 8001294:	20000084 	.word	0x20000084

08001298 <get_pitch_bend>:

float get_pitch_bend(unsigned short pitch_value)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
    // Convert to signed value centered at 0
    int signed_pitch = (int)pitch_value - PITCH_CENTER;
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80012a8:	60fb      	str	r3, [r7, #12]

    // Calculate pitch bend as a float from -1.0 to +1.0
    float pitch_bend = (float)signed_pitch / PITCH_RANGE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80012d4 <get_pitch_bend+0x3c>
 80012b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012bc:	edc7 7a02 	vstr	s15, [r7, #8]

    return pitch_bend;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	ee07 3a90 	vmov	s15, r3
}
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	46000000 	.word	0x46000000

080012d8 <HAL_UART_RxCpltCallback>:

/*
 * This is the interrupt handler. Make sure that the USART global interrupt is enabled in the IOC
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart1.Instance)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_UART_RxCpltCallback+0x2c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d107      	bne.n	80012fc <HAL_UART_RxCpltCallback+0x24>
    {
        MIDI_HANDLER_push_buffer(&midi_received_buf);
 80012ec:	4806      	ldr	r0, [pc, #24]	@ (8001308 <HAL_UART_RxCpltCallback+0x30>)
 80012ee:	f7ff fa75 	bl	80007dc <MIDI_HANDLER_push_buffer>
        HAL_UART_Receive_IT(&huart1, &midi_received_buf, 1);
 80012f2:	2201      	movs	r2, #1
 80012f4:	4904      	ldr	r1, [pc, #16]	@ (8001308 <HAL_UART_RxCpltCallback+0x30>)
 80012f6:	4803      	ldr	r0, [pc, #12]	@ (8001304 <HAL_UART_RxCpltCallback+0x2c>)
 80012f8:	f002 ff22 	bl	8004140 <HAL_UART_Receive_IT>
    }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000314 	.word	0x20000314
 8001308:	2000035c 	.word	0x2000035c

0800130c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
    MIDI_PROCESSOR_mode_changed();
 8001316:	f7ff fb73 	bl	8000a00 <MIDI_PROCESSOR_mode_changed>

    if (EXTI->PR & EXTI_PR_PR0)
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x28>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_GPIO_EXTI_Callback+0x20>
    {
        // Clear the EXTI pending bit
        EXTI->PR = EXTI_PR_PR0;
 8001326:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x28>)
 8001328:	2201      	movs	r2, #1
 800132a:	615a      	str	r2, [r3, #20]
    }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40013c00 	.word	0x40013c00

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f000 fd11 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 f86b 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f000 fa07 	bl	8001758 <MX_GPIO_Init>
  MX_I2C1_Init();
 800134a:	f000 f8d1 	bl	80014f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800134e:	f000 f8fd 	bl	800154c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001352:	f000 f929 	bl	80015a8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001356:	f000 f9cb 	bl	80016f0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800135a:	f000 f953 	bl	8001604 <MX_RTC_Init>
  MX_TIM1_Init();
 800135e:	f000 f977 	bl	8001650 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

    // Delay to let things settle before user init
    HAL_Delay(250);
 8001362:	20fa      	movs	r0, #250	@ 0xfa
 8001364:	f000 fd70 	bl	8001e48 <HAL_Delay>

    /*
     * Initialize all the I2C devices for DAC
    */
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4826      	ldr	r0, [pc, #152]	@ (8001404 <main+0xcc>)
 800136a:	f001 f903 	bl	8002574 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <main+0x40>
    {
        Error_Handler();
 8001374:	f000 fa7c 	bl	8001870 <Error_Handler>
    }
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001378:	4823      	ldr	r0, [pc, #140]	@ (8001408 <main+0xd0>)
 800137a:	f001 f8fb 	bl	8002574 <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <main+0x50>
    {
        Error_Handler();
 8001384:	f000 fa74 	bl	8001870 <Error_Handler>
    }
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001388:	4820      	ldr	r0, [pc, #128]	@ (800140c <main+0xd4>)
 800138a:	f001 f8f3 	bl	8002574 <HAL_I2C_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <main+0x60>
    {
        Error_Handler();
 8001394:	f000 fa6c 	bl	8001870 <Error_Handler>
     * Set up the MIDI Handler that will process all incoming MIDI messages and convert them into MIDI events
     */
    Buffer rx_buffer;

    struct MIDI_HANDLER_config midi_handler_config;
    midi_handler_config.buffer = &rx_buffer;
 8001398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28

    MIDI_HANDLER_init(&midi_handler_config);
 800139e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f9d2 	bl	800074c <MIDI_HANDLER_init>

    /*
     * Set up the MIDI Processor, that will convert the midi event into output over the DAC/Gates
     */
    midi_processor_config.cv_dac1 = &hi2c1;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <main+0xd8>)
 80013aa:	4a16      	ldr	r2, [pc, #88]	@ (8001404 <main+0xcc>)
 80013ac:	601a      	str	r2, [r3, #0]
    midi_processor_config.vel_dac2 = &hi2c2;
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <main+0xd8>)
 80013b0:	4a15      	ldr	r2, [pc, #84]	@ (8001408 <main+0xd0>)
 80013b2:	605a      	str	r2, [r3, #4]
    midi_processor_config.mod_dac3 = &hi2c3;
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <main+0xd8>)
 80013b6:	4a15      	ldr	r2, [pc, #84]	@ (800140c <main+0xd4>)
 80013b8:	609a      	str	r2, [r3, #8]
    midi_processor_config.mode = MIDI_MODE_POLY;
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <main+0xd8>)
 80013bc:	2201      	movs	r2, #1
 80013be:	735a      	strb	r2, [r3, #13]
    midi_processor_config.available_channels = 0b00001111;
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <main+0xd8>)
 80013c2:	220f      	movs	r2, #15
 80013c4:	731a      	strb	r2, [r3, #12]

    MIDI_PROCESSOR_init(&midi_processor_config);
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <main+0xd8>)
 80013c8:	f7ff fabc 	bl	8000944 <MIDI_PROCESSOR_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    // Start the first receive operation
    HAL_UART_Receive_IT(&huart1, &midi_received_buf, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	4911      	ldr	r1, [pc, #68]	@ (8001414 <main+0xdc>)
 80013d0:	4811      	ldr	r0, [pc, #68]	@ (8001418 <main+0xe0>)
 80013d2:	f002 feb5 	bl	8004140 <HAL_UART_Receive_IT>

    // Delay to let things set up
    HAL_Delay(250);
 80013d6:	20fa      	movs	r0, #250	@ 0xfa
 80013d8:	f000 fd36 	bl	8001e48 <HAL_Delay>

    MIDI_PROCESSOR_mode_changed();
 80013dc:	f7ff fb10 	bl	8000a00 <MIDI_PROCESSOR_mode_changed>

    HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f000 fd31 	bl	8001e48 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        // if there is an event
        if (MIDI_HANDLER_get_event(&midi_event) > 0)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f9cb 	bl	8000784 <MIDI_HANDLER_get_event>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f8      	beq.n	80013e6 <main+0xae>
        {
            // process the midi event
            MIDI_PROCESSOR_handle_event(&midi_event);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fad4 	bl	80009a4 <MIDI_PROCESSOR_handle_event>
            // short delay to ensure all events got settled
            HAL_Delay(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fd23 	bl	8001e48 <HAL_Delay>
    {
 8001402:	e7f0      	b.n	80013e6 <main+0xae>
 8001404:	200001b0 	.word	0x200001b0
 8001408:	20000204 	.word	0x20000204
 800140c:	20000258 	.word	0x20000258
 8001410:	20000360 	.word	0x20000360
 8001414:	2000035c 	.word	0x2000035c
 8001418:	20000314 	.word	0x20000314

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	@ 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fe6a 	bl	8005104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <SystemClock_Config+0xcc>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <SystemClock_Config+0xd0>)
 8001466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <SystemClock_Config+0xd0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001478:	2309      	movs	r3, #9
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001482:	2301      	movs	r3, #1
 8001484:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001490:	230a      	movs	r3, #10
 8001492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001494:	2350      	movs	r3, #80	@ 0x50
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001498:	2304      	movs	r3, #4
 800149a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800149c:	2304      	movs	r3, #4
 800149e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fd03 	bl	8002eb0 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b0:	f000 f9de 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 ff66 	bl	80033a0 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014da:	f000 f9c9 	bl	8001870 <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	3750      	adds	r7, #80	@ 0x50
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C1_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <MX_I2C1_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C1_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <MX_I2C1_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_I2C1_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_I2C1_Init+0x50>)
 800152e:	f001 f821 	bl	8002574 <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001538:	f000 f99a 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200001b0 	.word	0x200001b0
 8001544:	40005400 	.word	0x40005400
 8001548:	00061a80 	.word	0x00061a80

0800154c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_I2C2_Init+0x50>)
 8001552:	4a13      	ldr	r2, [pc, #76]	@ (80015a0 <MX_I2C2_Init+0x54>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_I2C2_Init+0x50>)
 8001558:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <MX_I2C2_Init+0x58>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_I2C2_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_I2C2_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_I2C2_Init+0x50>)
 800156a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800156e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <MX_I2C2_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_I2C2_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <MX_I2C2_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_I2C2_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_I2C2_Init+0x50>)
 800158a:	f000 fff3 	bl	8002574 <HAL_I2C_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001594:	f000 f96c 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000204 	.word	0x20000204
 80015a0:	40005800 	.word	0x40005800
 80015a4:	000186a0 	.word	0x000186a0

080015a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <MX_I2C3_Init+0x54>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <MX_I2C3_Init+0x58>)
 80015b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_I2C3_Init+0x50>)
 80015e6:	f000 ffc5 	bl	8002574 <HAL_I2C_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f000 f93e 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000258 	.word	0x20000258
 80015fc:	40005c00 	.word	0x40005c00
 8001600:	000186a0 	.word	0x000186a0

08001604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_RTC_Init+0x44>)
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <MX_RTC_Init+0x48>)
 800160c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_RTC_Init+0x44>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_RTC_Init+0x44>)
 8001616:	227f      	movs	r2, #127	@ 0x7f
 8001618:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <MX_RTC_Init+0x44>)
 800161c:	22ff      	movs	r2, #255	@ 0xff
 800161e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_RTC_Init+0x44>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <MX_RTC_Init+0x44>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_RTC_Init+0x44>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_RTC_Init+0x44>)
 8001634:	f002 f984 	bl	8003940 <HAL_RTC_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800163e:	f000 f917 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002ac 	.word	0x200002ac
 800164c:	40002800 	.word	0x40002800

08001650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166c:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <MX_TIM1_Init+0x98>)
 800166e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ec <MX_TIM1_Init+0x9c>)
 8001670:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <MX_TIM1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <MX_TIM1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <MX_TIM1_Init+0x98>)
 8001680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001684:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <MX_TIM1_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <MX_TIM1_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <MX_TIM1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001698:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <MX_TIM1_Init+0x98>)
 800169a:	f002 fa57 	bl	8003b4c <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016a4:	f000 f8e4 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <MX_TIM1_Init+0x98>)
 80016b6:	f002 fa98 	bl	8003bea <HAL_TIM_ConfigClockSource>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016c0:	f000 f8d6 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_TIM1_Init+0x98>)
 80016d2:	f002 fc77 	bl	8003fc4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016dc:	f000 f8c8 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200002cc 	.word	0x200002cc
 80016ec:	40010000 	.word	0x40010000

080016f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <MX_USART1_UART_Init+0x64>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 80016fc:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8001700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001726:	480a      	ldr	r0, [pc, #40]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 8001728:	f002 fcba 	bl	80040a0 <HAL_UART_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001732:	f000 f89d 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

    // Enable USART2 interrupt
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001736:	2026      	movs	r0, #38	@ 0x26
 8001738:	f000 fca1 	bl	800207e <HAL_NVIC_EnableIRQ>

    // Enable UART receive interrupt
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <MX_USART1_UART_Init+0x60>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000314 	.word	0x20000314
 8001754:	40011000 	.word	0x40011000

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <MX_GPIO_Init+0x110>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a3c      	ldr	r2, [pc, #240]	@ (8001868 <MX_GPIO_Init+0x110>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <MX_GPIO_Init+0x110>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <MX_GPIO_Init+0x110>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a35      	ldr	r2, [pc, #212]	@ (8001868 <MX_GPIO_Init+0x110>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <MX_GPIO_Init+0x110>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <MX_GPIO_Init+0x110>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001868 <MX_GPIO_Init+0x110>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <MX_GPIO_Init+0x110>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <MX_GPIO_Init+0x110>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a27      	ldr	r2, [pc, #156]	@ (8001868 <MX_GPIO_Init+0x110>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <MX_GPIO_Init+0x110>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GATE_1_OUT_Pin|GATE_2_OUT_Pin|GATE_3_OUT_Pin|GATE_4_OUT_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017e4:	4821      	ldr	r0, [pc, #132]	@ (800186c <MX_GPIO_Init+0x114>)
 80017e6:	f000 fe93 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_MODE_1_Pin SW_MODE_2_Pin */
  GPIO_InitStruct.Pin = SW_MODE_1_Pin|SW_MODE_2_Pin;
 80017ea:	2303      	movs	r3, #3
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	481b      	ldr	r0, [pc, #108]	@ (800186c <MX_GPIO_Init+0x114>)
 8001800:	f000 fcea 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GATE_1_OUT_Pin */
  GPIO_InitStruct.Pin = GATE_1_OUT_Pin;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001812:	2301      	movs	r3, #1
 8001814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GATE_1_OUT_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4813      	ldr	r0, [pc, #76]	@ (800186c <MX_GPIO_Init+0x114>)
 800181e:	f000 fcdb 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GATE_2_OUT_Pin GATE_3_OUT_Pin GATE_4_OUT_Pin */
  GPIO_InitStruct.Pin = GATE_2_OUT_Pin|GATE_3_OUT_Pin|GATE_4_OUT_Pin;
 8001822:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	480c      	ldr	r0, [pc, #48]	@ (800186c <MX_GPIO_Init+0x114>)
 800183c:	f000 fccc 	bl	80021d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	2006      	movs	r0, #6
 8001846:	f000 fbfe 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800184a:	2006      	movs	r0, #6
 800184c:	f000 fc17 	bl	800207e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2007      	movs	r0, #7
 8001856:	f000 fbf6 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800185a:	2007      	movs	r0, #7
 800185c:	f000 fc0f 	bl	800207e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	@ 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <Error_Handler+0x8>

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <HAL_MspInit+0x58>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <HAL_MspInit+0x58>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_MspInit+0x58>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_MspInit+0x58>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_MspInit+0x58>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x58>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2005      	movs	r0, #5
 80018c0:	f000 fbc1 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80018c4:	2005      	movs	r0, #5
 80018c6:	f000 fbda 	bl	800207e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	@ 0x38
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a63      	ldr	r2, [pc, #396]	@ (8001a84 <HAL_I2C_MspInit+0x1ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12c      	bne.n	8001954 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
 80018fe:	4b62      	ldr	r3, [pc, #392]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a61      	ldr	r2, [pc, #388]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001916:	23c0      	movs	r3, #192	@ 0xc0
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191a:	2312      	movs	r3, #18
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001926:	2304      	movs	r3, #4
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4856      	ldr	r0, [pc, #344]	@ (8001a8c <HAL_I2C_MspInit+0x1b4>)
 8001932:	f000 fc51 	bl	80021d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001940:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001952:	e093      	b.n	8001a7c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4d      	ldr	r2, [pc, #308]	@ (8001a90 <HAL_I2C_MspInit+0x1b8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d13d      	bne.n	80019da <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	4b49      	ldr	r3, [pc, #292]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a48      	ldr	r2, [pc, #288]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001980:	2312      	movs	r3, #18
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001984:	2301      	movs	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800198c:	2304      	movs	r3, #4
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	483d      	ldr	r0, [pc, #244]	@ (8001a8c <HAL_I2C_MspInit+0x1b4>)
 8001998:	f000 fc1e 	bl	80021d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800199c:	2308      	movs	r3, #8
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a0:	2312      	movs	r3, #18
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019ac:	2309      	movs	r3, #9
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b4:	4619      	mov	r1, r3
 80019b6:	4835      	ldr	r0, [pc, #212]	@ (8001a8c <HAL_I2C_MspInit+0x1b4>)
 80019b8:	f000 fc0e 	bl	80021d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 80019c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]
}
 80019d8:	e050      	b.n	8001a7c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2d      	ldr	r2, [pc, #180]	@ (8001a94 <HAL_I2C_MspInit+0x1bc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d14b      	bne.n	8001a7c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f4:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a10:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	4817      	ldr	r0, [pc, #92]	@ (8001a98 <HAL_I2C_MspInit+0x1c0>)
 8001a3a:	f000 fbcd 	bl	80021d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a50:	2304      	movs	r3, #4
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4810      	ldr	r0, [pc, #64]	@ (8001a9c <HAL_I2C_MspInit+0x1c4>)
 8001a5c:	f000 fbbc 	bl	80021d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001a6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_I2C_MspInit+0x1b0>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	3738      	adds	r7, #56	@ 0x38
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005400 	.word	0x40005400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40005800 	.word	0x40005800
 8001a94:	40005c00 	.word	0x40005c00
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <HAL_RTC_MspInit+0x50>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d111      	bne.n	8001ae8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001acc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 fe44 	bl	8003760 <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ade:	f7ff fec7 	bl	8001870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ae2:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <HAL_RTC_MspInit+0x54>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40002800 	.word	0x40002800
 8001af4:	42470e3c 	.word	0x42470e3c

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_TIM_Base_MspInit+0x3c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd0 <HAL_UART_MspInit+0x94>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d134      	bne.n	8001bc8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <HAL_UART_MspInit+0x98>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd4 <HAL_UART_MspInit+0x98>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_UART_MspInit+0x98>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_UART_MspInit+0x98>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_UART_MspInit+0x98>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_UART_MspInit+0x98>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b96:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4809      	ldr	r0, [pc, #36]	@ (8001bd8 <HAL_UART_MspInit+0x9c>)
 8001bb4:	f000 fb10 	bl	80021d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2025      	movs	r0, #37	@ 0x25
 8001bbe:	f000 fa42 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc2:	2025      	movs	r0, #37	@ 0x25
 8001bc4:	f000 fa5b 	bl	800207e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bc8:	bf00      	nop
 8001bca:	3728      	adds	r7, #40	@ 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <NMI_Handler+0x4>

08001be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c32:	f000 f8e9 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_MODE_1_Pin);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f000 fc79 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_MODE_2_Pin);
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f000 fc72 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <USART1_IRQHandler+0x10>)
 8001c6a:	f002 fa8f 	bl	800418c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000314 	.word	0x20000314

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f003 fa44 	bl	8005134 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20020000 	.word	0x20020000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000370 	.word	0x20000370
 8001ce0:	200004c0 	.word	0x200004c0

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <SystemInit+0x28>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	4a07      	ldr	r2, [pc, #28]	@ (8001d0c <SystemInit+0x28>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  SCB->VTOR = FLASH_BASE;  // <---------------- WORKAROUND!
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SystemInit+0x28>)
 8001cfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cfe:	609a      	str	r2, [r3, #8]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d14:	f7ff ffe6 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d18:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d1a:	490d      	ldr	r1, [pc, #52]	@ (8001d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d30:	4c0a      	ldr	r4, [pc, #40]	@ (8001d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f003 f9ff 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7ff faf9 	bl	8001338 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d54:	0800527c 	.word	0x0800527c
  ldr r2, =_sbss
 8001d58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d5c:	200004c0 	.word	0x200004c0

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_Init+0x40>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <HAL_Init+0x40>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <HAL_Init+0x40>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 f94f 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	200f      	movs	r0, #15
 8001d94:	f000 f808 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fd70 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f967 	bl	800209a <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de4:	f000 f92f 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	@ (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000374 	.word	0x20000374

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000374 	.word	0x20000374

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4907      	ldr	r1, [pc, #28]	@ (8001f2c <__NVIC_EnableIRQ+0x38>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	@ 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002010:	f7ff ff8e 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff29 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff3e 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff8e 	bl	8001f84 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5d 	bl	8001f30 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff31 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa2 	bl	8001fec <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff feb6 	bl	8001e30 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d008      	beq.n	80020e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e052      	b.n	800218a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0216 	bic.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002102:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <HAL_DMA_Abort+0x62>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0208 	bic.w	r2, r2, #8
 8002122:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002134:	e013      	b.n	800215e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002136:	f7ff fe7b 	bl	8001e30 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b05      	cmp	r3, #5
 8002142:	d90c      	bls.n	800215e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e015      	b.n	800218a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e4      	bne.n	8002136 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	223f      	movs	r2, #63	@ 0x3f
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d004      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2280      	movs	r2, #128	@ 0x80
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e00c      	b.n	80021ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2205      	movs	r2, #5
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	@ 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e159      	b.n	80024a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8148 	bne.w	80024a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d005      	beq.n	800222a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	2b02      	cmp	r3, #2
 8002228:	d130      	bne.n	800228c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b03      	cmp	r3, #3
 8002296:	d017      	beq.n	80022c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a2 	beq.w	80024a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b57      	ldr	r3, [pc, #348]	@ (80024c0 <HAL_GPIO_Init+0x2e8>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	4a56      	ldr	r2, [pc, #344]	@ (80024c0 <HAL_GPIO_Init+0x2e8>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800236c:	6453      	str	r3, [r2, #68]	@ 0x44
 800236e:	4b54      	ldr	r3, [pc, #336]	@ (80024c0 <HAL_GPIO_Init+0x2e8>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237a:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_GPIO_Init+0x2ec>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a49      	ldr	r2, [pc, #292]	@ (80024c8 <HAL_GPIO_Init+0x2f0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x202>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a48      	ldr	r2, [pc, #288]	@ (80024cc <HAL_GPIO_Init+0x2f4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x1fe>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a47      	ldr	r2, [pc, #284]	@ (80024d0 <HAL_GPIO_Init+0x2f8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x1fa>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a46      	ldr	r2, [pc, #280]	@ (80024d4 <HAL_GPIO_Init+0x2fc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x1f6>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a45      	ldr	r2, [pc, #276]	@ (80024d8 <HAL_GPIO_Init+0x300>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x1f2>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e008      	b.n	80023dc <HAL_GPIO_Init+0x204>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x204>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e004      	b.n	80023dc <HAL_GPIO_Init+0x204>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_Init+0x204>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x204>
 80023da:	2300      	movs	r3, #0
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f002 0203 	and.w	r2, r2, #3
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	4093      	lsls	r3, r2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ec:	4935      	ldr	r1, [pc, #212]	@ (80024c4 <HAL_GPIO_Init+0x2ec>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fa:	4b38      	ldr	r3, [pc, #224]	@ (80024dc <HAL_GPIO_Init+0x304>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241e:	4a2f      	ldr	r2, [pc, #188]	@ (80024dc <HAL_GPIO_Init+0x304>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002424:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_GPIO_Init+0x304>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002448:	4a24      	ldr	r2, [pc, #144]	@ (80024dc <HAL_GPIO_Init+0x304>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244e:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <HAL_GPIO_Init+0x304>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002472:	4a1a      	ldr	r2, [pc, #104]	@ (80024dc <HAL_GPIO_Init+0x304>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <HAL_GPIO_Init+0x304>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249c:	4a0f      	ldr	r2, [pc, #60]	@ (80024dc <HAL_GPIO_Init+0x304>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f67f aea2 	bls.w	80021f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40013c00 	.word	0x40013c00

080024e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e001      	b.n	8002502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800252c:	e003      	b.n	8002536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	041a      	lsls	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255a:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fed2 	bl	800130c <HAL_GPIO_EXTI_Callback>
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e12b      	b.n	80027de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff f99c 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	@ 0x24
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d8:	f001 f89a 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 80025dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a81      	ldr	r2, [pc, #516]	@ (80027e8 <HAL_I2C_Init+0x274>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d807      	bhi.n	80025f8 <HAL_I2C_Init+0x84>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a80      	ldr	r2, [pc, #512]	@ (80027ec <HAL_I2C_Init+0x278>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e006      	b.n	8002606 <HAL_I2C_Init+0x92>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a7d      	ldr	r2, [pc, #500]	@ (80027f0 <HAL_I2C_Init+0x27c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e7      	b.n	80027de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a78      	ldr	r2, [pc, #480]	@ (80027f4 <HAL_I2C_Init+0x280>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a6a      	ldr	r2, [pc, #424]	@ (80027e8 <HAL_I2C_Init+0x274>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d802      	bhi.n	8002648 <HAL_I2C_Init+0xd4>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3301      	adds	r3, #1
 8002646:	e009      	b.n	800265c <HAL_I2C_Init+0xe8>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a69      	ldr	r2, [pc, #420]	@ (80027f8 <HAL_I2C_Init+0x284>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	3301      	adds	r3, #1
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800266e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	495c      	ldr	r1, [pc, #368]	@ (80027e8 <HAL_I2C_Init+0x274>)
 8002678:	428b      	cmp	r3, r1
 800267a:	d819      	bhi.n	80026b0 <HAL_I2C_Init+0x13c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e59      	subs	r1, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb1 f3f3 	udiv	r3, r1, r3
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002690:	400b      	ands	r3, r1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_I2C_Init+0x138>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e59      	subs	r1, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026aa:	e051      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e04f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HAL_I2C_Init+0x168>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e012      	b.n	8002702 <HAL_I2C_Init+0x18e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x196>
 8002706:	2301      	movs	r3, #1
 8002708:	e022      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <HAL_I2C_Init+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e58      	subs	r0, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	fbb0 f3f3 	udiv	r3, r0, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6809      	ldr	r1, [r1, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800277e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6911      	ldr	r1, [r2, #16]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	000186a0 	.word	0x000186a0
 80027ec:	001e847f 	.word	0x001e847f
 80027f0:	003d08ff 	.word	0x003d08ff
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fb0e 	bl	8001e30 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 80e0 	bne.w	80029e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	4970      	ldr	r1, [pc, #448]	@ (80029f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f964 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e0d3      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Master_Transmit+0x50>
 8002848:	2302      	movs	r3, #2
 800284a:	e0cc      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	@ 0x21
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a50      	ldr	r2, [pc, #320]	@ (80029f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f89c 	bl	80029f8 <I2C_MasterRequestWrite>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e08d      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e0:	e066      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	6a39      	ldr	r1, [r7, #32]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fa22 	bl	8002d30 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d107      	bne.n	800290a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d11b      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x188>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fa19 	bl	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01a      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d194      	bne.n	80028e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	00100002 	.word	0x00100002
 80029f4:	ffff0000 	.word	0xffff0000

080029f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d006      	beq.n	8002a22 <I2C_MasterRequestWrite+0x2a>
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d003      	beq.n	8002a22 <I2C_MasterRequestWrite+0x2a>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a20:	d108      	bne.n	8002a34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00b      	b.n	8002a4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	2b12      	cmp	r3, #18
 8002a3a:	d107      	bne.n	8002a4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f84f 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a72:	d103      	bne.n	8002a7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e035      	b.n	8002aec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a88:	d108      	bne.n	8002a9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	e01b      	b.n	8002ad4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a9c:	897b      	ldrh	r3, [r7, #10]
 8002a9e:	11db      	asrs	r3, r3, #7
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0306 	and.w	r3, r3, #6
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f063 030f 	orn	r3, r3, #15
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	490e      	ldr	r1, [pc, #56]	@ (8002af4 <I2C_MasterRequestWrite+0xfc>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f898 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e010      	b.n	8002aec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4907      	ldr	r1, [pc, #28]	@ (8002af8 <I2C_MasterRequestWrite+0x100>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f888 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00010008 	.word	0x00010008
 8002af8:	00010002 	.word	0x00010002

08002afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0c:	e048      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b14:	d044      	beq.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7ff f98b 	bl	8001e30 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d139      	bne.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10d      	bne.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	e00c      	b.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d116      	bne.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e023      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10d      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	e00c      	b.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d093      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfe:	e071      	b.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c0e:	d123      	bne.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e067      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c5e:	d041      	beq.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7ff f8e6 	bl	8001e30 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d136      	bne.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10c      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e00b      	b.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e021      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10c      	bne.n	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e00b      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f af6d 	bne.w	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f886 	bl	8002e50 <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d54:	d028      	beq.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7ff f86b 	bl	8001e30 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d76:	2b80      	cmp	r3, #128	@ 0x80
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	2b80      	cmp	r3, #128	@ 0x80
 8002db4:	d1c3      	bne.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f83e 	bl	8002e50 <I2C_IsAcknowledgeFailed>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e034      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002de4:	d028      	beq.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7ff f823 	bl	8001e30 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11d      	bne.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d016      	beq.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e007      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d1c3      	bne.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e66:	d11b      	bne.n	8002ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e267      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ece:	4b88      	ldr	r3, [pc, #544]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4b85      	ldr	r3, [pc, #532]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d112      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b82      	ldr	r3, [pc, #520]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	4b7e      	ldr	r3, [pc, #504]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d157      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e242      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x74>
 8002f16:	4b76      	ldr	r3, [pc, #472]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a75      	ldr	r2, [pc, #468]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b70      	ldr	r3, [pc, #448]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6f      	ldr	r2, [pc, #444]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6c      	ldr	r2, [pc, #432]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f48:	4b69      	ldr	r3, [pc, #420]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a68      	ldr	r2, [pc, #416]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b66      	ldr	r3, [pc, #408]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a65      	ldr	r2, [pc, #404]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe ff62 	bl	8001e30 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe ff5e 	bl	8001e30 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	@ 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e207      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b5b      	ldr	r3, [pc, #364]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xc0>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe ff4e 	bl	8001e30 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe ff4a 	bl	8001e30 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	@ 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1f3      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b51      	ldr	r3, [pc, #324]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0xe8>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d063      	beq.n	800308e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b44      	ldr	r3, [pc, #272]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	4b41      	ldr	r3, [pc, #260]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x152>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1c7      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b3b      	ldr	r3, [pc, #236]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4937      	ldr	r1, [pc, #220]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e03a      	b.n	800308e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x244>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe ff03 	bl	8001e30 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe feff 	bl	8001e30 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1a8      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4925      	ldr	r1, [pc, #148]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b24      	ldr	r3, [pc, #144]	@ (80030f4 <HAL_RCC_OscConfig+0x244>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fee2 	bl	8001e30 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe fede 	bl	8001e30 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e187      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d036      	beq.n	8003108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <HAL_RCC_OscConfig+0x248>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fec2 	bl	8001e30 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe febe 	bl	8001e30 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e167      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_RCC_OscConfig+0x240>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x200>
 80030ce:	e01b      	b.n	8003108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d0:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_RCC_OscConfig+0x248>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe feab 	bl	8001e30 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	e00e      	b.n	80030fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe fea7 	bl	8001e30 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d907      	bls.n	80030fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e150      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470000 	.word	0x42470000
 80030f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b88      	ldr	r3, [pc, #544]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ea      	bne.n	80030de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8097 	beq.w	8003244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b81      	ldr	r3, [pc, #516]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b7d      	ldr	r3, [pc, #500]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	4a7c      	ldr	r2, [pc, #496]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	@ 0x40
 8003136:	4b7a      	ldr	r3, [pc, #488]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b77      	ldr	r3, [pc, #476]	@ (8003324 <HAL_RCC_OscConfig+0x474>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b74      	ldr	r3, [pc, #464]	@ (8003324 <HAL_RCC_OscConfig+0x474>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a73      	ldr	r2, [pc, #460]	@ (8003324 <HAL_RCC_OscConfig+0x474>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fe67 	bl	8001e30 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fe63 	bl	8001e30 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e10c      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <HAL_RCC_OscConfig+0x474>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x2ea>
 800318c:	4b64      	ldr	r3, [pc, #400]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a63      	ldr	r2, [pc, #396]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	e01c      	b.n	80031d4 <HAL_RCC_OscConfig+0x324>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x30c>
 80031a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0x324>
 80031bc:	4b58      	ldr	r3, [pc, #352]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	4a57      	ldr	r2, [pc, #348]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c8:	4b55      	ldr	r3, [pc, #340]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031cc:	4a54      	ldr	r2, [pc, #336]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fe28 	bl	8001e30 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fe fe24 	bl	8001e30 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0cb      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	4b49      	ldr	r3, [pc, #292]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ee      	beq.n	80031e4 <HAL_RCC_OscConfig+0x334>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe fe12 	bl	8001e30 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fe0e 	bl	8001e30 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0b5      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	4b3e      	ldr	r3, [pc, #248]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ee      	bne.n	8003210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b39      	ldr	r3, [pc, #228]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	4a38      	ldr	r2, [pc, #224]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003242:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a1 	beq.w	8003390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324e:	4b34      	ldr	r3, [pc, #208]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d05c      	beq.n	8003314 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d141      	bne.n	80032e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_OscConfig+0x478>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fde2 	bl	8001e30 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fdde 	bl	8001e30 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e087      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	4b27      	ldr	r3, [pc, #156]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	3b01      	subs	r3, #1
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	491b      	ldr	r1, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <HAL_RCC_OscConfig+0x478>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe fdb7 	bl	8001e30 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fe fdb3 	bl	8001e30 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e05c      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d8:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x416>
 80032e4:	e054      	b.n	8003390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b10      	ldr	r3, [pc, #64]	@ (8003328 <HAL_RCC_OscConfig+0x478>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fda0 	bl	8001e30 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fe fd9c 	bl	8001e30 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e045      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_RCC_OscConfig+0x470>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x444>
 8003312:	e03d      	b.n	8003390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e038      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000
 8003328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x4ec>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d028      	beq.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d121      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003364:	4293      	cmp	r3, r2
 8003366:	d111      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	3b01      	subs	r3, #1
 8003376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0cc      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b68      	ldr	r3, [pc, #416]	@ (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d90c      	bls.n	80033dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b65      	ldr	r3, [pc, #404]	@ (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b63      	ldr	r3, [pc, #396]	@ (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b8      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f4:	4b59      	ldr	r3, [pc, #356]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a58      	ldr	r2, [pc, #352]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800340c:	4b53      	ldr	r3, [pc, #332]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a52      	ldr	r2, [pc, #328]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b50      	ldr	r3, [pc, #320]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	494d      	ldr	r1, [pc, #308]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d044      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b47      	ldr	r3, [pc, #284]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d119      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3b      	ldr	r3, [pc, #236]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e067      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b37      	ldr	r3, [pc, #220]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4934      	ldr	r1, [pc, #208]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe fcce 	bl	8001e30 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe fcca 	bl	8001e30 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e04f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b25      	ldr	r3, [pc, #148]	@ (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d20c      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b22      	ldr	r3, [pc, #136]	@ (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b19      	ldr	r3, [pc, #100]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4916      	ldr	r1, [pc, #88]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003512:	4b12      	ldr	r3, [pc, #72]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490e      	ldr	r1, [pc, #56]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003526:	f000 f821 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800352a:	4602      	mov	r2, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	490a      	ldr	r1, [pc, #40]	@ (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	5ccb      	ldrb	r3, [r1, r3]
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a09      	ldr	r2, [pc, #36]	@ (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fc2e 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	08005254 	.word	0x08005254
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b090      	sub	sp, #64	@ 0x40
 8003572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003584:	4b59      	ldr	r3, [pc, #356]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d00d      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x40>
 8003590:	2b08      	cmp	r3, #8
 8003592:	f200 80a1 	bhi.w	80036d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 800359a:	2b04      	cmp	r3, #4
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800359e:	e09b      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a0:	4b53      	ldr	r3, [pc, #332]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80035a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a4:	e09b      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a6:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035aa:	e098      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ac:	4b4f      	ldr	r3, [pc, #316]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x180>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b6:	4b4d      	ldr	r3, [pc, #308]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x180>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c2:	4b4a      	ldr	r3, [pc, #296]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x180>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	2200      	movs	r2, #0
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035d4:	2100      	movs	r1, #0
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d8:	fb03 f201 	mul.w	r2, r3, r1
 80035dc:	2300      	movs	r3, #0
 80035de:	fb00 f303 	mul.w	r3, r0, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	4a43      	ldr	r2, [pc, #268]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035e6:	fba0 1202 	umull	r1, r2, r0, r2
 80035ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ec:	460a      	mov	r2, r1
 80035ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f2:	4413      	add	r3, r2
 80035f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f8:	2200      	movs	r2, #0
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	61fa      	str	r2, [r7, #28]
 80035fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003606:	f7fc fde7 	bl	80001d8 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4613      	mov	r3, r2
 8003610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003612:	e053      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003614:	4b35      	ldr	r3, [pc, #212]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	2200      	movs	r2, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	617a      	str	r2, [r7, #20]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003626:	f04f 0b00 	mov.w	fp, #0
 800362a:	4652      	mov	r2, sl
 800362c:	465b      	mov	r3, fp
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	0159      	lsls	r1, r3, #5
 8003638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363c:	0150      	lsls	r0, r2, #5
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	ebb2 080a 	subs.w	r8, r2, sl
 8003646:	eb63 090b 	sbc.w	r9, r3, fp
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003656:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800365a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800365e:	ebb2 0408 	subs.w	r4, r2, r8
 8003662:	eb63 0509 	sbc.w	r5, r3, r9
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	00eb      	lsls	r3, r5, #3
 8003670:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003674:	00e2      	lsls	r2, r4, #3
 8003676:	4614      	mov	r4, r2
 8003678:	461d      	mov	r5, r3
 800367a:	eb14 030a 	adds.w	r3, r4, sl
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	eb45 030b 	adc.w	r3, r5, fp
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003692:	4629      	mov	r1, r5
 8003694:	028b      	lsls	r3, r1, #10
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800369c:	4621      	mov	r1, r4
 800369e:	028a      	lsls	r2, r1, #10
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	2200      	movs	r2, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	60fa      	str	r2, [r7, #12]
 80036ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b0:	f7fc fd92 	bl	80001d8 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036bc:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x180>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	3301      	adds	r3, #1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036d6:	e002      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3740      	adds	r7, #64	@ 0x40
 80036e4:	46bd      	mov	sp, r7
 80036e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	01312d00 	.word	0x01312d00

080036f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_RCC_GetHCLKFreq+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000000 	.word	0x20000000

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003714:	f7ff fff0 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0a9b      	lsrs	r3, r3, #10
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	08005264 	.word	0x08005264

08003738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800373c:	f7ff ffdc 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0b5b      	lsrs	r3, r3, #13
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4903      	ldr	r1, [pc, #12]	@ (800375c <HAL_RCC_GetPCLK2Freq+0x24>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	08005264 	.word	0x08005264

08003760 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003784:	2b00      	cmp	r3, #0
 8003786:	d038      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003788:	4b68      	ldr	r3, [pc, #416]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800378e:	f7fe fb4f 	bl	8001e30 <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003796:	f7fe fb4b 	bl	8001e30 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0bd      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a8:	4b61      	ldr	r3, [pc, #388]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	071b      	lsls	r3, r3, #28
 80037c6:	495a      	ldr	r1, [pc, #360]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ce:	4b57      	ldr	r3, [pc, #348]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe fb2c 	bl	8001e30 <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037dc:	f7fe fb28 	bl	8001e30 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e09a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ee:	4b50      	ldr	r3, [pc, #320]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8083 	beq.w	800390e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	4b48      	ldr	r3, [pc, #288]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	4a47      	ldr	r2, [pc, #284]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003816:	6413      	str	r3, [r2, #64]	@ 0x40
 8003818:	4b45      	ldr	r3, [pc, #276]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003824:	4b43      	ldr	r3, [pc, #268]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a42      	ldr	r2, [pc, #264]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003830:	f7fe fafe 	bl	8001e30 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7fe fafa 	bl	8001e30 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e06c      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800384a:	4b3a      	ldr	r3, [pc, #232]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003856:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02f      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d028      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003874:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800387e:	4b2e      	ldr	r3, [pc, #184]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b2c      	ldr	r3, [pc, #176]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800388a:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d114      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe fac8 	bl	8001e30 <HAL_GetTick>
 80038a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fe fac4 	bl	8001e30 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e034      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80038d4:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	4911      	ldr	r1, [pc, #68]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
 80038ee:	e005      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	4909      	ldr	r1, [pc, #36]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	4313      	orrs	r3, r2
 800390c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7d1a      	ldrb	r2, [r3, #20]
 800391e:	4b07      	ldr	r3, [pc, #28]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003920:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	42470068 	.word	0x42470068
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470e40 	.word	0x42470e40
 800393c:	424711e0 	.word	0x424711e0

08003940 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e073      	b.n	8003a3e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7f5b      	ldrb	r3, [r3, #29]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe f89a 	bl	8001aa0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d055      	beq.n	8003a2c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	22ca      	movs	r2, #202	@ 0xca
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2253      	movs	r2, #83	@ 0x53
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f87f 	bl	8003a94 <RTC_EnterInitMode>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d12c      	bne.n	80039fa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80039ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68d2      	ldr	r2, [r2, #12]
 80039da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	041a      	lsls	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f886 	bl	8003b02 <RTC_ExitInitMode>
 80039f6:	4603      	mov	r3, r0
 80039f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d110      	bne.n	8003a22 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	22ff      	movs	r2, #255	@ 0xff
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a2a:	e001      	b.n	8003a30 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	@ (8003a90 <HAL_RTC_WaitForSynchro+0x48>)
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5c:	f7fe f9e8 	bl	8001e30 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a62:	e009      	b.n	8003a78 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a64:	f7fe f9e4 	bl	8001e30 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a72:	d901      	bls.n	8003a78 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e007      	b.n	8003a88 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ee      	beq.n	8003a64 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	00013f5f 	.word	0x00013f5f

08003a94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d122      	bne.n	8003af8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ac0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac2:	f7fe f9b5 	bl	8001e30 <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ac8:	e00c      	b.n	8003ae4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003aca:	f7fe f9b1 	bl	8001e30 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ad8:	d904      	bls.n	8003ae4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <RTC_EnterInitMode+0x64>
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d1e8      	bne.n	8003aca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff8b 	bl	8003a48 <HAL_RTC_WaitForSynchro>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e041      	b.n	8003be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd ffc0 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 f8f4 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_ConfigClockSource+0x1c>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0b4      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x186>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3e:	d03e      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xd4>
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c44:	f200 8087 	bhi.w	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4c:	f000 8086 	beq.w	8003d5c <HAL_TIM_ConfigClockSource+0x172>
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c54:	d87f      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c56:	2b70      	cmp	r3, #112	@ 0x70
 8003c58:	d01a      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0xa6>
 8003c5a:	2b70      	cmp	r3, #112	@ 0x70
 8003c5c:	d87b      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5e:	2b60      	cmp	r3, #96	@ 0x60
 8003c60:	d050      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0x11a>
 8003c62:	2b60      	cmp	r3, #96	@ 0x60
 8003c64:	d877      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c66:	2b50      	cmp	r3, #80	@ 0x50
 8003c68:	d03c      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xfa>
 8003c6a:	2b50      	cmp	r3, #80	@ 0x50
 8003c6c:	d873      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d058      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x13a>
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d86f      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c76:	2b30      	cmp	r3, #48	@ 0x30
 8003c78:	d064      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7a:	2b30      	cmp	r3, #48	@ 0x30
 8003c7c:	d86b      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d060      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15a>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d867      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d05c      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d05a      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8e:	e062      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	f000 f970 	bl	8003f84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e04f      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	f000 f959 	bl	8003f84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce0:	609a      	str	r2, [r3, #8]
      break;
 8003ce2:	e03c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f000 f8cd 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2150      	movs	r1, #80	@ 0x50
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f926 	bl	8003f4e <TIM_ITRx_SetConfig>
      break;
 8003d02:	e02c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d10:	461a      	mov	r2, r3
 8003d12:	f000 f8ec 	bl	8003eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2160      	movs	r1, #96	@ 0x60
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f916 	bl	8003f4e <TIM_ITRx_SetConfig>
      break;
 8003d22:	e01c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d30:	461a      	mov	r2, r3
 8003d32:	f000 f8ad 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2140      	movs	r1, #64	@ 0x40
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f906 	bl	8003f4e <TIM_ITRx_SetConfig>
      break;
 8003d42:	e00c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f000 f8fd 	bl	8003f4e <TIM_ITRx_SetConfig>
      break;
 8003d54:	e003      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e74 <TIM_Base_SetConfig+0xfc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00f      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a37      	ldr	r2, [pc, #220]	@ (8003e78 <TIM_Base_SetConfig+0x100>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a36      	ldr	r2, [pc, #216]	@ (8003e7c <TIM_Base_SetConfig+0x104>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a35      	ldr	r2, [pc, #212]	@ (8003e80 <TIM_Base_SetConfig+0x108>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e74 <TIM_Base_SetConfig+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01b      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd0:	d017      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <TIM_Base_SetConfig+0x100>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	@ (8003e7c <TIM_Base_SetConfig+0x104>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <TIM_Base_SetConfig+0x108>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a25      	ldr	r2, [pc, #148]	@ (8003e84 <TIM_Base_SetConfig+0x10c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a24      	ldr	r2, [pc, #144]	@ (8003e88 <TIM_Base_SetConfig+0x110>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0x8a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	@ (8003e8c <TIM_Base_SetConfig+0x114>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d108      	bne.n	8003e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e74 <TIM_Base_SetConfig+0xfc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d103      	bne.n	8003e48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]
  }
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800

08003e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 030a 	bic.w	r3, r3, #10
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b087      	sub	sp, #28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 0210 	bic.w	r2, r3, #16
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	031b      	lsls	r3, r3, #12
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f043 0307 	orr.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	021a      	lsls	r2, r3, #8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	609a      	str	r2, [r3, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e050      	b.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1c      	ldr	r2, [pc, #112]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d018      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d013      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a18      	ldr	r2, [pc, #96]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a15      	ldr	r2, [pc, #84]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a13      	ldr	r2, [pc, #76]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40014000 	.word	0x40014000

080040a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e042      	b.n	8004138 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fd38 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	@ 0x24
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fcdb 	bl	8004aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d112      	bne.n	8004180 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Receive_IT+0x26>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e00b      	b.n	8004182 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	461a      	mov	r2, r3
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 faba 	bl	80046f0 <UART_Start_Receive_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	e000      	b.n	8004182 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b0ba      	sub	sp, #232	@ 0xe8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
 80041de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fb99 	bl	8004922 <UART_Receive_IT>
      return;
 80041f0:	e25b      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80de 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80d1 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 81f2 	beq.w	80046a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb24 	bl	8004922 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_UART_IRQHandler+0x17a>
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04f      	beq.n	80043a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa2c 	bl	8004764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d141      	bne.n	800439e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004346:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800434a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1d9      	bne.n	800431a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	4a7e      	ldr	r2, [pc, #504]	@ (800456c <HAL_UART_IRQHandler+0x3e0>)
 8004374:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd ff09 	bl	8002192 <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e00e      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f994 	bl	80046c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00a      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f990 	bl	80046c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e006      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f98c 	bl	80046c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043b2:	e175      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	bf00      	nop
    return;
 80043b6:	e173      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 814f 	bne.w	8004660 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8148 	beq.w	8004660 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8141 	beq.w	8004660 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	f040 80b6 	bne.w	8004570 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8145 	beq.w	80046a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004422:	429a      	cmp	r2, r3
 8004424:	f080 813e 	bcs.w	80046a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800442e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443a:	f000 8088 	beq.w	800454e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800445c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800446a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800446e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004476:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1d9      	bne.n	800443e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800449a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e1      	bne.n	800448a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e3      	bne.n	80044c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800451c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004530:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004532:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800453e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e3      	bne.n	800450c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd fdb2 	bl	80020b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800455c:	b29b      	uxth	r3, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	b29b      	uxth	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f8b7 	bl	80046d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800456a:	e09b      	b.n	80046a4 <HAL_UART_IRQHandler+0x518>
 800456c:	0800482b 	.word	0x0800482b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004578:	b29b      	uxth	r3, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 808e 	beq.w	80046a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800458c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8089 	beq.w	80046a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80045bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	623b      	str	r3, [r7, #32]
   return(result);
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3314      	adds	r3, #20
 80045ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	60fb      	str	r3, [r7, #12]
   return(result);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0310 	bic.w	r3, r3, #16
 800462a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004638:	61fa      	str	r2, [r7, #28]
 800463a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69b9      	ldr	r1, [r7, #24]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	617b      	str	r3, [r7, #20]
   return(result);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e3      	bne.n	8004614 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f83d 	bl	80046d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800465e:	e023      	b.n	80046a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_UART_IRQHandler+0x4f4>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8ea 	bl	8004852 <UART_Transmit_IT>
    return;
 800467e:	e014      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <HAL_UART_IRQHandler+0x51e>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f92a 	bl	80048f2 <UART_EndTransmit_IT>
    return;
 800469e:	e004      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
    return;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
      return;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
      return;
 80046a8:	bf00      	nop
  }
}
 80046aa:	37e8      	adds	r7, #232	@ 0xe8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2222      	movs	r2, #34	@ 0x22
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004734:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0220 	orr.w	r2, r2, #32
 8004754:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b095      	sub	sp, #84	@ 0x54
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800478c:	643a      	str	r2, [r7, #64]	@ 0x40
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004792:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d119      	bne.n	8004810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047fc:	61ba      	str	r2, [r7, #24]
 80047fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	613b      	str	r3, [r7, #16]
   return(result);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800481e:	bf00      	nop
 8004820:	3754      	adds	r7, #84	@ 0x54
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff ff3d 	bl	80046c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b21      	cmp	r3, #33	@ 0x21
 8004864:	d13e      	bne.n	80048e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486e:	d114      	bne.n	800489a <UART_Transmit_IT+0x48>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d110      	bne.n	800489a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800488c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]
 8004898:	e008      	b.n	80048ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6211      	str	r1, [r2, #32]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4619      	mov	r1, r3
 80048ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004908:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fecc 	bl	80046b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08c      	sub	sp, #48	@ 0x30
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b22      	cmp	r3, #34	@ 0x22
 8004934:	f040 80ae 	bne.w	8004a94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	d117      	bne.n	8004972 <UART_Receive_IT+0x50>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d113      	bne.n	8004972 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004960:	b29a      	uxth	r2, r3
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004970:	e026      	b.n	80049c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004984:	d007      	beq.n	8004996 <UART_Receive_IT+0x74>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <UART_Receive_IT+0x82>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e008      	b.n	80049b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4619      	mov	r1, r3
 80049ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d15d      	bne.n	8004a90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0220 	bic.w	r2, r2, #32
 80049e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d135      	bne.n	8004a86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	623a      	str	r2, [r7, #32]
 8004a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69f9      	ldr	r1, [r7, #28]
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d10a      	bne.n	8004a78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fe2a 	bl	80046d8 <HAL_UARTEx_RxEventCallback>
 8004a84:	e002      	b.n	8004a8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc fc26 	bl	80012d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e002      	b.n	8004a96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3730      	adds	r7, #48	@ 0x30
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b0c0      	sub	sp, #256	@ 0x100
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	ea40 0301 	orr.w	r3, r0, r1
 8004ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004af8:	f021 010c 	bic.w	r1, r1, #12
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1a:	6999      	ldr	r1, [r3, #24]
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	ea40 0301 	orr.w	r3, r0, r1
 8004b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d005      	beq.n	8004b40 <UART_SetConfig+0xa0>
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d70 <UART_SetConfig+0x2d0>)
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d104      	bne.n	8004b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fdfa 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 8004b44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b48:	e003      	b.n	8004b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4a:	f7fe fde1 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 8004b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b5c:	f040 810c 	bne.w	8004d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b82:	4621      	mov	r1, r4
 8004b84:	eb12 0801 	adds.w	r8, r2, r1
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb43 0901 	adc.w	r9, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba2:	4690      	mov	r8, r2
 8004ba4:	4699      	mov	r9, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	eb18 0303 	adds.w	r3, r8, r3
 8004bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	eb49 0303 	adc.w	r3, r9, r3
 8004bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bce:	460b      	mov	r3, r1
 8004bd0:	18db      	adds	r3, r3, r3
 8004bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	eb42 0303 	adc.w	r3, r2, r3
 8004bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004be4:	f7fb faf8 	bl	80001d8 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4b61      	ldr	r3, [pc, #388]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	011c      	lsls	r4, r3, #4
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c10:	415b      	adcs	r3, r3
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c18:	4641      	mov	r1, r8
 8004c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0b01 	adc.w	fp, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c38:	4692      	mov	sl, r2
 8004c3a:	469b      	mov	fp, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c46:	464b      	mov	r3, r9
 8004c48:	eb4b 0303 	adc.w	r3, fp, r3
 8004c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c64:	460b      	mov	r3, r1
 8004c66:	18db      	adds	r3, r3, r3
 8004c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	eb42 0303 	adc.w	r3, r2, r3
 8004c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c7a:	f7fb faad 	bl	80001d8 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	4b3b      	ldr	r3, [pc, #236]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004c86:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2264      	movs	r2, #100	@ 0x64
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	1acb      	subs	r3, r1, r3
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c9a:	4b36      	ldr	r3, [pc, #216]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ca8:	441c      	add	r4, r3
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d00:	464b      	mov	r3, r9
 8004d02:	460a      	mov	r2, r1
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d20:	460b      	mov	r3, r1
 8004d22:	18db      	adds	r3, r3, r3
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d26:	4613      	mov	r3, r2
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d36:	f7fb fa4f 	bl	80001d8 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004d40:	fba3 1302 	umull	r1, r3, r3, r2
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	2164      	movs	r1, #100	@ 0x64
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	3332      	adds	r3, #50	@ 0x32
 8004d52:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	f003 0207 	and.w	r2, r3, #7
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4422      	add	r2, r4
 8004d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d68:	e106      	b.n	8004f78 <UART_SetConfig+0x4d8>
 8004d6a:	bf00      	nop
 8004d6c:	40011000 	.word	0x40011000
 8004d70:	40011400 	.word	0x40011400
 8004d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	6239      	str	r1, [r7, #32]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1854      	adds	r4, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb43 0501 	adc.w	r5, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004de6:	4629      	mov	r1, r5
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	4621      	mov	r1, r4
 8004dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df0:	4621      	mov	r1, r4
 8004df2:	008a      	lsls	r2, r1, #2
 8004df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004df8:	f7fb f9ee 	bl	80001d8 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4b60      	ldr	r3, [pc, #384]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011c      	lsls	r4, r3, #4
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	61b9      	str	r1, [r7, #24]
 8004e24:	415b      	adcs	r3, r3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6139      	str	r1, [r7, #16]
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e96:	f7fb f99f 	bl	80001d8 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b38      	ldr	r3, [pc, #224]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	@ 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	3332      	adds	r3, #50	@ 0x32
 8004eb4:	4a33      	ldr	r2, [pc, #204]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec0:	441c      	add	r4, r3
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eca:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	1851      	adds	r1, r2, r1
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	414b      	adcs	r3, r1
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef8:	4659      	mov	r1, fp
 8004efa:	00cb      	lsls	r3, r1, #3
 8004efc:	4651      	mov	r1, sl
 8004efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f02:	4651      	mov	r1, sl
 8004f04:	00ca      	lsls	r2, r1, #3
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f12:	464b      	mov	r3, r9
 8004f14:	460a      	mov	r2, r1
 8004f16:	eb42 0303 	adc.w	r3, r2, r3
 8004f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f34:	4649      	mov	r1, r9
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3e:	4641      	mov	r1, r8
 8004f40:	008a      	lsls	r2, r1, #2
 8004f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f46:	f7fb f947 	bl	80001d8 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	@ 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	3332      	adds	r3, #50	@ 0x32
 8004f62:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <UART_SetConfig+0x4e4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4422      	add	r2, r4
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f84:	51eb851f 	.word	0x51eb851f

08004f88 <malloc>:
 8004f88:	4b02      	ldr	r3, [pc, #8]	@ (8004f94 <malloc+0xc>)
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f000 b82d 	b.w	8004fec <_malloc_r>
 8004f92:	bf00      	nop
 8004f94:	2000000c 	.word	0x2000000c

08004f98 <free>:
 8004f98:	4b02      	ldr	r3, [pc, #8]	@ (8004fa4 <free+0xc>)
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f000 b903 	b.w	80051a8 <_free_r>
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <sbrk_aligned>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4e0f      	ldr	r6, [pc, #60]	@ (8004fe8 <sbrk_aligned+0x40>)
 8004fac:	460c      	mov	r4, r1
 8004fae:	6831      	ldr	r1, [r6, #0]
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	b911      	cbnz	r1, 8004fba <sbrk_aligned+0x12>
 8004fb4:	f000 f8ae 	bl	8005114 <_sbrk_r>
 8004fb8:	6030      	str	r0, [r6, #0]
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f000 f8a9 	bl	8005114 <_sbrk_r>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d103      	bne.n	8004fce <sbrk_aligned+0x26>
 8004fc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004fca:	4620      	mov	r0, r4
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
 8004fce:	1cc4      	adds	r4, r0, #3
 8004fd0:	f024 0403 	bic.w	r4, r4, #3
 8004fd4:	42a0      	cmp	r0, r4
 8004fd6:	d0f8      	beq.n	8004fca <sbrk_aligned+0x22>
 8004fd8:	1a21      	subs	r1, r4, r0
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 f89a 	bl	8005114 <_sbrk_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d1f2      	bne.n	8004fca <sbrk_aligned+0x22>
 8004fe4:	e7ef      	b.n	8004fc6 <sbrk_aligned+0x1e>
 8004fe6:	bf00      	nop
 8004fe8:	20000378 	.word	0x20000378

08004fec <_malloc_r>:
 8004fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff0:	1ccd      	adds	r5, r1, #3
 8004ff2:	f025 0503 	bic.w	r5, r5, #3
 8004ff6:	3508      	adds	r5, #8
 8004ff8:	2d0c      	cmp	r5, #12
 8004ffa:	bf38      	it	cc
 8004ffc:	250c      	movcc	r5, #12
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	4606      	mov	r6, r0
 8005002:	db01      	blt.n	8005008 <_malloc_r+0x1c>
 8005004:	42a9      	cmp	r1, r5
 8005006:	d904      	bls.n	8005012 <_malloc_r+0x26>
 8005008:	230c      	movs	r3, #12
 800500a:	6033      	str	r3, [r6, #0]
 800500c:	2000      	movs	r0, #0
 800500e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050e8 <_malloc_r+0xfc>
 8005016:	f000 f869 	bl	80050ec <__malloc_lock>
 800501a:	f8d8 3000 	ldr.w	r3, [r8]
 800501e:	461c      	mov	r4, r3
 8005020:	bb44      	cbnz	r4, 8005074 <_malloc_r+0x88>
 8005022:	4629      	mov	r1, r5
 8005024:	4630      	mov	r0, r6
 8005026:	f7ff ffbf 	bl	8004fa8 <sbrk_aligned>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	4604      	mov	r4, r0
 800502e:	d158      	bne.n	80050e2 <_malloc_r+0xf6>
 8005030:	f8d8 4000 	ldr.w	r4, [r8]
 8005034:	4627      	mov	r7, r4
 8005036:	2f00      	cmp	r7, #0
 8005038:	d143      	bne.n	80050c2 <_malloc_r+0xd6>
 800503a:	2c00      	cmp	r4, #0
 800503c:	d04b      	beq.n	80050d6 <_malloc_r+0xea>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	4639      	mov	r1, r7
 8005042:	4630      	mov	r0, r6
 8005044:	eb04 0903 	add.w	r9, r4, r3
 8005048:	f000 f864 	bl	8005114 <_sbrk_r>
 800504c:	4581      	cmp	r9, r0
 800504e:	d142      	bne.n	80050d6 <_malloc_r+0xea>
 8005050:	6821      	ldr	r1, [r4, #0]
 8005052:	1a6d      	subs	r5, r5, r1
 8005054:	4629      	mov	r1, r5
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff ffa6 	bl	8004fa8 <sbrk_aligned>
 800505c:	3001      	adds	r0, #1
 800505e:	d03a      	beq.n	80050d6 <_malloc_r+0xea>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	442b      	add	r3, r5
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	f8d8 3000 	ldr.w	r3, [r8]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	bb62      	cbnz	r2, 80050c8 <_malloc_r+0xdc>
 800506e:	f8c8 7000 	str.w	r7, [r8]
 8005072:	e00f      	b.n	8005094 <_malloc_r+0xa8>
 8005074:	6822      	ldr	r2, [r4, #0]
 8005076:	1b52      	subs	r2, r2, r5
 8005078:	d420      	bmi.n	80050bc <_malloc_r+0xd0>
 800507a:	2a0b      	cmp	r2, #11
 800507c:	d917      	bls.n	80050ae <_malloc_r+0xc2>
 800507e:	1961      	adds	r1, r4, r5
 8005080:	42a3      	cmp	r3, r4
 8005082:	6025      	str	r5, [r4, #0]
 8005084:	bf18      	it	ne
 8005086:	6059      	strne	r1, [r3, #4]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	bf08      	it	eq
 800508c:	f8c8 1000 	streq.w	r1, [r8]
 8005090:	5162      	str	r2, [r4, r5]
 8005092:	604b      	str	r3, [r1, #4]
 8005094:	4630      	mov	r0, r6
 8005096:	f000 f82f 	bl	80050f8 <__malloc_unlock>
 800509a:	f104 000b 	add.w	r0, r4, #11
 800509e:	1d23      	adds	r3, r4, #4
 80050a0:	f020 0007 	bic.w	r0, r0, #7
 80050a4:	1ac2      	subs	r2, r0, r3
 80050a6:	bf1c      	itt	ne
 80050a8:	1a1b      	subne	r3, r3, r0
 80050aa:	50a3      	strne	r3, [r4, r2]
 80050ac:	e7af      	b.n	800500e <_malloc_r+0x22>
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	bf0c      	ite	eq
 80050b4:	f8c8 2000 	streq.w	r2, [r8]
 80050b8:	605a      	strne	r2, [r3, #4]
 80050ba:	e7eb      	b.n	8005094 <_malloc_r+0xa8>
 80050bc:	4623      	mov	r3, r4
 80050be:	6864      	ldr	r4, [r4, #4]
 80050c0:	e7ae      	b.n	8005020 <_malloc_r+0x34>
 80050c2:	463c      	mov	r4, r7
 80050c4:	687f      	ldr	r7, [r7, #4]
 80050c6:	e7b6      	b.n	8005036 <_malloc_r+0x4a>
 80050c8:	461a      	mov	r2, r3
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d1fb      	bne.n	80050c8 <_malloc_r+0xdc>
 80050d0:	2300      	movs	r3, #0
 80050d2:	6053      	str	r3, [r2, #4]
 80050d4:	e7de      	b.n	8005094 <_malloc_r+0xa8>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	4630      	mov	r0, r6
 80050dc:	f000 f80c 	bl	80050f8 <__malloc_unlock>
 80050e0:	e794      	b.n	800500c <_malloc_r+0x20>
 80050e2:	6005      	str	r5, [r0, #0]
 80050e4:	e7d6      	b.n	8005094 <_malloc_r+0xa8>
 80050e6:	bf00      	nop
 80050e8:	2000037c 	.word	0x2000037c

080050ec <__malloc_lock>:
 80050ec:	4801      	ldr	r0, [pc, #4]	@ (80050f4 <__malloc_lock+0x8>)
 80050ee:	f000 b84b 	b.w	8005188 <__retarget_lock_acquire_recursive>
 80050f2:	bf00      	nop
 80050f4:	200004b8 	.word	0x200004b8

080050f8 <__malloc_unlock>:
 80050f8:	4801      	ldr	r0, [pc, #4]	@ (8005100 <__malloc_unlock+0x8>)
 80050fa:	f000 b846 	b.w	800518a <__retarget_lock_release_recursive>
 80050fe:	bf00      	nop
 8005100:	200004b8 	.word	0x200004b8

08005104 <memset>:
 8005104:	4402      	add	r2, r0
 8005106:	4603      	mov	r3, r0
 8005108:	4293      	cmp	r3, r2
 800510a:	d100      	bne.n	800510e <memset+0xa>
 800510c:	4770      	bx	lr
 800510e:	f803 1b01 	strb.w	r1, [r3], #1
 8005112:	e7f9      	b.n	8005108 <memset+0x4>

08005114 <_sbrk_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d06      	ldr	r5, [pc, #24]	@ (8005130 <_sbrk_r+0x1c>)
 8005118:	2300      	movs	r3, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fc fdaa 	bl	8001c78 <_sbrk>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_sbrk_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_sbrk_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	200004bc 	.word	0x200004bc

08005134 <__errno>:
 8005134:	4b01      	ldr	r3, [pc, #4]	@ (800513c <__errno+0x8>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4d0d      	ldr	r5, [pc, #52]	@ (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	@ (800517c <__libc_init_array+0x3c>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2600      	movs	r6, #0
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4d0b      	ldr	r5, [pc, #44]	@ (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	@ (8005184 <__libc_init_array+0x44>)
 8005154:	f000 f872 	bl	800523c <_init>
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2600      	movs	r6, #0
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f855 3b04 	ldr.w	r3, [r5], #4
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	08005274 	.word	0x08005274
 800517c:	08005274 	.word	0x08005274
 8005180:	08005274 	.word	0x08005274
 8005184:	08005278 	.word	0x08005278

08005188 <__retarget_lock_acquire_recursive>:
 8005188:	4770      	bx	lr

0800518a <__retarget_lock_release_recursive>:
 800518a:	4770      	bx	lr

0800518c <memcpy>:
 800518c:	440a      	add	r2, r1
 800518e:	4291      	cmp	r1, r2
 8005190:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005194:	d100      	bne.n	8005198 <memcpy+0xc>
 8005196:	4770      	bx	lr
 8005198:	b510      	push	{r4, lr}
 800519a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a2:	4291      	cmp	r1, r2
 80051a4:	d1f9      	bne.n	800519a <memcpy+0xe>
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <_free_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4605      	mov	r5, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d041      	beq.n	8005234 <_free_r+0x8c>
 80051b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b4:	1f0c      	subs	r4, r1, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfb8      	it	lt
 80051ba:	18e4      	addlt	r4, r4, r3
 80051bc:	f7ff ff96 	bl	80050ec <__malloc_lock>
 80051c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <_free_r+0x90>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	b933      	cbnz	r3, 80051d4 <_free_r+0x2c>
 80051c6:	6063      	str	r3, [r4, #4]
 80051c8:	6014      	str	r4, [r2, #0]
 80051ca:	4628      	mov	r0, r5
 80051cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d0:	f7ff bf92 	b.w	80050f8 <__malloc_unlock>
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	d908      	bls.n	80051ea <_free_r+0x42>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	1821      	adds	r1, r4, r0
 80051dc:	428b      	cmp	r3, r1
 80051de:	bf01      	itttt	eq
 80051e0:	6819      	ldreq	r1, [r3, #0]
 80051e2:	685b      	ldreq	r3, [r3, #4]
 80051e4:	1809      	addeq	r1, r1, r0
 80051e6:	6021      	streq	r1, [r4, #0]
 80051e8:	e7ed      	b.n	80051c6 <_free_r+0x1e>
 80051ea:	461a      	mov	r2, r3
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b10b      	cbz	r3, 80051f4 <_free_r+0x4c>
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	d9fa      	bls.n	80051ea <_free_r+0x42>
 80051f4:	6811      	ldr	r1, [r2, #0]
 80051f6:	1850      	adds	r0, r2, r1
 80051f8:	42a0      	cmp	r0, r4
 80051fa:	d10b      	bne.n	8005214 <_free_r+0x6c>
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	4401      	add	r1, r0
 8005200:	1850      	adds	r0, r2, r1
 8005202:	4283      	cmp	r3, r0
 8005204:	6011      	str	r1, [r2, #0]
 8005206:	d1e0      	bne.n	80051ca <_free_r+0x22>
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	6053      	str	r3, [r2, #4]
 800520e:	4408      	add	r0, r1
 8005210:	6010      	str	r0, [r2, #0]
 8005212:	e7da      	b.n	80051ca <_free_r+0x22>
 8005214:	d902      	bls.n	800521c <_free_r+0x74>
 8005216:	230c      	movs	r3, #12
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	e7d6      	b.n	80051ca <_free_r+0x22>
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	1821      	adds	r1, r4, r0
 8005220:	428b      	cmp	r3, r1
 8005222:	bf04      	itt	eq
 8005224:	6819      	ldreq	r1, [r3, #0]
 8005226:	685b      	ldreq	r3, [r3, #4]
 8005228:	6063      	str	r3, [r4, #4]
 800522a:	bf04      	itt	eq
 800522c:	1809      	addeq	r1, r1, r0
 800522e:	6021      	streq	r1, [r4, #0]
 8005230:	6054      	str	r4, [r2, #4]
 8005232:	e7ca      	b.n	80051ca <_free_r+0x22>
 8005234:	bd38      	pop	{r3, r4, r5, pc}
 8005236:	bf00      	nop
 8005238:	2000037c 	.word	0x2000037c

0800523c <_init>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	bf00      	nop
 8005240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005242:	bc08      	pop	{r3}
 8005244:	469e      	mov	lr, r3
 8005246:	4770      	bx	lr

08005248 <_fini>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr
