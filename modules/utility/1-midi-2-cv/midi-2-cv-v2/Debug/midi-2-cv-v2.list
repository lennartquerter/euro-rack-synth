
midi-2-cv-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004948  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004ae8  08004ae8  00005ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc8  08004bc8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd0  08004bd0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bd4  08004bd4  00005bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004bd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000068  08004c40  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08004c40  0000631c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be6a  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db8  00000000  00000000  00011f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00013cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000858  00000000  00000000  00014778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca6  00000000  00000000  00014fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d99d  00000000  00000000  0002bc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2d3  00000000  00000000  00039613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c38e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003408  00000000  00000000  000c392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000c6d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ad0 	.word	0x08004ad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004ad0 	.word	0x08004ad0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MCP4728_SingleWrite>:
}

// Single Channel Write with configuration
HAL_StatusTypeDef MCP4728_SingleWrite(I2C_HandleTypeDef* I2CHandler, uint8_t channel, uint16_t value, uint8_t vref,
                                      uint8_t gain, uint8_t pd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	4608      	mov	r0, r1
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	4603      	mov	r3, r0
 8000580:	70fb      	strb	r3, [r7, #3]
 8000582:	460b      	mov	r3, r1
 8000584:	803b      	strh	r3, [r7, #0]
 8000586:	4613      	mov	r3, r2
 8000588:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3];

    data[0] = MCP4728_CMD_SINGLE_WRITE | (channel << 1);
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	b25b      	sxtb	r3, r3
 8000590:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8000594:	b25b      	sxtb	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	733b      	strb	r3, [r7, #12]
    data[1] = (vref << 7) | (pd << 5) | (gain << 4) | ((value >> 8) & 0x0F);
 800059a:	78bb      	ldrb	r3, [r7, #2]
 800059c:	01db      	lsls	r3, r3, #7
 800059e:	b25a      	sxtb	r2, r3
 80005a0:	7f3b      	ldrb	r3, [r7, #28]
 80005a2:	015b      	lsls	r3, r3, #5
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25a      	sxtb	r2, r3
 80005aa:	7e3b      	ldrb	r3, [r7, #24]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25a      	sxtb	r2, r3
 80005b4:	883b      	ldrh	r3, [r7, #0]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	f003 030f 	and.w	r3, r3, #15
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	737b      	strb	r3, [r7, #13]
    data[2] = value & 0xFF;
 80005ca:	883b      	ldrh	r3, [r7, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	73bb      	strb	r3, [r7, #14]

    return HAL_I2C_Master_Transmit(I2CHandler, MCP4728_ADDR, data, 3, HAL_MAX_DELAY);
 80005d0:	f107 020c 	add.w	r2, r7, #12
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2303      	movs	r3, #3
 80005dc:	21c0      	movs	r1, #192	@ 0xc0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f001 fade 	bl	8001ba0 <HAL_I2C_Master_Transmit>
 80005e4:	4603      	mov	r3, r0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <I2C_Reset>:
    uint8_t wakeup_cmd = 0x09;
    return HAL_I2C_Master_Transmit(I2CHandler, 0x00, &wakeup_cmd, 1, HAL_MAX_DELAY);
}

HAL_StatusTypeDef I2C_Reset(I2C_HandleTypeDef I2CHandler)
{
 80005f0:	b084      	sub	sp, #16
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	f107 0c20 	add.w	ip, r7, #32
 80005fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Disable I2C
    I2CHandler.Instance->CR1 &= ~I2C_CR1_PE;
 8000600:	6a3b      	ldr	r3, [r7, #32]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	6a3b      	ldr	r3, [r7, #32]
 8000606:	f022 0201 	bic.w	r2, r2, #1
 800060a:	601a      	str	r2, [r3, #0]

    // Configure GPIO pins as GPIO output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800061a:	23c0      	movs	r3, #192	@ 0xc0
 800061c:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800061e:	2311      	movs	r3, #17
 8000620:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4823      	ldr	r0, [pc, #140]	@ (80006bc <I2C_Reset+0xcc>)
 8000630:	f000 ffd4 	bl	80015dc <HAL_GPIO_Init>

    // Toggle SCL 9 times
    for(int i = 0; i < 9; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e012      	b.n	8000660 <I2C_Reset+0x70>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2140      	movs	r1, #64	@ 0x40
 800063e:	481f      	ldr	r0, [pc, #124]	@ (80006bc <I2C_Reset+0xcc>)
 8000640:	f001 f950 	bl	80018e4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fe01 	bl	800124c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	481b      	ldr	r0, [pc, #108]	@ (80006bc <I2C_Reset+0xcc>)
 8000650:	f001 f948 	bl	80018e4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fdf9 	bl	800124c <HAL_Delay>
    for(int i = 0; i < 9; i++) {
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2b08      	cmp	r3, #8
 8000664:	dde9      	ble.n	800063a <I2C_Reset+0x4a>
    }

    // Generate STOP condition
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	4814      	ldr	r0, [pc, #80]	@ (80006bc <I2C_Reset+0xcc>)
 800066c:	f001 f93a 	bl	80018e4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 fdeb 	bl	800124c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2140      	movs	r1, #64	@ 0x40
 800067a:	4810      	ldr	r0, [pc, #64]	@ (80006bc <I2C_Reset+0xcc>)
 800067c:	f001 f932 	bl	80018e4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 fde3 	bl	800124c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <I2C_Reset+0xcc>)
 800068c:	f001 f92a 	bl	80018e4 <HAL_GPIO_WritePin>

    // Reconfigure I2C pins
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000690:	2312      	movs	r3, #18
 8000692:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <I2C_Reset+0xcc>)
 800069e:	f000 ff9d 	bl	80015dc <HAL_GPIO_Init>

    // Re-enable I2C
    return HAL_I2C_Init(&I2CHandler);
 80006a2:	f107 0020 	add.w	r0, r7, #32
 80006a6:	f001 f937 	bl	8001918 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b6:	b004      	add	sp, #16
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40020400 	.word	0x40020400

080006c0 <I2C_Check_Error>:


HAL_StatusTypeDef I2C_Check_Error(I2C_HandleTypeDef I2CHandler)
{
 80006c0:	b084      	sub	sp, #16
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	f107 0c08 	add.w	ip, r7, #8
 80006ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Check I2C errors
    if ((I2CHandler.Instance->SR1 & I2C_SR1_BERR) == I2C_SR1_BERR)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006da:	d102      	bne.n	80006e2 <I2C_Check_Error+0x22>
    {
        printf("Bus Error\n");
 80006dc:	481d      	ldr	r0, [pc, #116]	@ (8000754 <I2C_Check_Error+0x94>)
 80006de:	f003 fb87 	bl	8003df0 <puts>
    }
    if ((I2CHandler.Instance->SR1 & I2C_SR1_ARLO) == I2C_SR1_ARLO)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ee:	d102      	bne.n	80006f6 <I2C_Check_Error+0x36>
    {
        printf("Arbitration Lost\n");
 80006f0:	4819      	ldr	r0, [pc, #100]	@ (8000758 <I2C_Check_Error+0x98>)
 80006f2:	f003 fb7d 	bl	8003df0 <puts>
    }
    if ((I2CHandler.Instance->SR1 & I2C_SR1_AF) == I2C_SR1_AF)
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000702:	d102      	bne.n	800070a <I2C_Check_Error+0x4a>
    {
        printf("Acknowledge Failure\n");
 8000704:	4815      	ldr	r0, [pc, #84]	@ (800075c <I2C_Check_Error+0x9c>)
 8000706:	f003 fb73 	bl	8003df0 <puts>
    }
    if ((I2CHandler.Instance->SR1 & I2C_SR1_OVR) == I2C_SR1_OVR)
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000716:	d102      	bne.n	800071e <I2C_Check_Error+0x5e>
    {
        printf("Overrun/Underrun\n");
 8000718:	4811      	ldr	r0, [pc, #68]	@ (8000760 <I2C_Check_Error+0xa0>)
 800071a:	f003 fb69 	bl	8003df0 <puts>
    }
    if ((I2CHandler.Instance->SR1 & I2C_SR1_TIMEOUT) == I2C_SR1_TIMEOUT)
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000726:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800072a:	d102      	bne.n	8000732 <I2C_Check_Error+0x72>
    {
        printf("Timeout Error\n");
 800072c:	480d      	ldr	r0, [pc, #52]	@ (8000764 <I2C_Check_Error+0xa4>)
 800072e:	f003 fb5f 	bl	8003df0 <puts>
    }

    // Check if busy
    if ((I2CHandler.Instance->SR2 & I2C_SR2_BUSY) == I2C_SR2_BUSY)
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b02      	cmp	r3, #2
 800073c:	d102      	bne.n	8000744 <I2C_Check_Error+0x84>
    {
        printf("Bus is busy\n");
 800073e:	480a      	ldr	r0, [pc, #40]	@ (8000768 <I2C_Check_Error+0xa8>)
 8000740:	f003 fb56 	bl	8003df0 <puts>
    }

    return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074e:	b004      	add	sp, #16
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	08004ae8 	.word	0x08004ae8
 8000758:	08004af4 	.word	0x08004af4
 800075c:	08004b08 	.word	0x08004b08
 8000760:	08004b1c 	.word	0x08004b1c
 8000764:	08004b30 	.word	0x08004b30
 8000768:	08004b40 	.word	0x08004b40

0800076c <Check_Clocks>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Add this to your code to check clock configuration
void Check_Clocks(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint32_t I2C_Clock =  HAL_RCC_GetPCLK1Freq() / 2;
 8000772:	f002 facd 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8000776:	4603      	mov	r3, r0
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]


    printf("PCLK1 Frequency: %lu Hz\n", HAL_RCC_GetPCLK1Freq());
 800077c:	f002 fac8 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8000780:	4603      	mov	r3, r0
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <Check_Clocks+0x30>)
 8000786:	f003 facb 	bl	8003d20 <iprintf>
    printf("I2C Clock: %lu Hz\n",I2C_Clock);
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <Check_Clocks+0x34>)
 800078e:	f003 fac7 	bl	8003d20 <iprintf>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08004b4c 	.word	0x08004b4c
 80007a0:	08004b68 	.word	0x08004b68

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b095      	sub	sp, #84	@ 0x54
 80007a8:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f000 fcdd 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f8df 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f9f9 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b6:	f000 f943 	bl	8000a40 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007ba:	f000 f96f 	bl	8000a9c <MX_I2C2_Init>
  MX_I2C3_Init();
 80007be:	f000 f99b 	bl	8000af8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 f9c7 	bl	8000b54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    HAL_Delay(1000);
 80007c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ca:	f000 fd3f 	bl	800124c <HAL_Delay>


    Check_Clocks();
 80007ce:	f7ff ffcd 	bl	800076c <Check_Clocks>

    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d2:	4863      	ldr	r0, [pc, #396]	@ (8000960 <main+0x1bc>)
 80007d4:	f001 f8a0 	bl	8001918 <HAL_I2C_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d010      	beq.n	8000800 <main+0x5c>
    {
        // Try recovery procedure
        if (I2C_Reset(hi2c1) != HAL_OK)
 80007de:	4c60      	ldr	r4, [pc, #384]	@ (8000960 <main+0x1bc>)
 80007e0:	4668      	mov	r0, sp
 80007e2:	f104 0310 	add.w	r3, r4, #16
 80007e6:	2244      	movs	r2, #68	@ 0x44
 80007e8:	4619      	mov	r1, r3
 80007ea:	f003 fb3e 	bl	8003e6a <memcpy>
 80007ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007f2:	f7ff fefd 	bl	80005f0 <I2C_Reset>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <main+0x5c>
        {
            Error_Handler();
 80007fc:	f000 fa34 	bl	8000c68 <Error_Handler>
        }
    }

    // Check for any remaining errors
    I2C_Check_Error(hi2c1);
 8000800:	4c57      	ldr	r4, [pc, #348]	@ (8000960 <main+0x1bc>)
 8000802:	4668      	mov	r0, sp
 8000804:	f104 0310 	add.w	r3, r4, #16
 8000808:	2244      	movs	r2, #68	@ 0x44
 800080a:	4619      	mov	r1, r3
 800080c:	f003 fb2d 	bl	8003e6a <memcpy>
 8000810:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000814:	f7ff ff54 	bl	80006c0 <I2C_Check_Error>

    // Test communication with device
    if (HAL_I2C_IsDeviceReady(&hi2c1, MCP4728_BASE_ADDR, 3, 1000) != HAL_OK)
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	2203      	movs	r2, #3
 800081e:	21c0      	movs	r1, #192	@ 0xc0
 8000820:	484f      	ldr	r0, [pc, #316]	@ (8000960 <main+0x1bc>)
 8000822:	f001 fabb 	bl	8001d9c <HAL_I2C_IsDeviceReady>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <main+0x8c>
    {
        Error_Handler();
 800082c:	f000 fa1c 	bl	8000c68 <Error_Handler>
    }

    uint16_t index = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	80fb      	strh	r3, [r7, #6]
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        index += 100;
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	3364      	adds	r3, #100	@ 0x64
 8000838:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(GATE_1_OUT_GPIO_Port, GATE_1_OUT_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000840:	4848      	ldr	r0, [pc, #288]	@ (8000964 <main+0x1c0>)
 8000842:	f001 f84f 	bl	80018e4 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f000 fd00 	bl	800124c <HAL_Delay>

        HAL_GPIO_WritePin(GATE_1_OUT_GPIO_Port, GATE_1_OUT_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000852:	4844      	ldr	r0, [pc, #272]	@ (8000964 <main+0x1c0>)
 8000854:	f001 f846 	bl	80018e4 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000858:	200a      	movs	r0, #10
 800085a:	f000 fcf7 	bl	800124c <HAL_Delay>

        MCP4728_SingleWrite(&hi2c1, MCP4728_CHANNEL_A, index, 1, 0, 0);
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	2300      	movs	r3, #0
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2300      	movs	r3, #0
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	2100      	movs	r1, #0
 800086c:	483c      	ldr	r0, [pc, #240]	@ (8000960 <main+0x1bc>)
 800086e:	f7ff fe7f 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c1, MCP4728_CHANNEL_B, index, 1, 0, 0);
 8000872:	88fa      	ldrh	r2, [r7, #6]
 8000874:	2300      	movs	r3, #0
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	2300      	movs	r3, #0
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4837      	ldr	r0, [pc, #220]	@ (8000960 <main+0x1bc>)
 8000882:	f7ff fe75 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c1, MCP4728_CHANNEL_C, index, 1, 0, 0);
 8000886:	88fa      	ldrh	r2, [r7, #6]
 8000888:	2300      	movs	r3, #0
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	2300      	movs	r3, #0
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	2102      	movs	r1, #2
 8000894:	4832      	ldr	r0, [pc, #200]	@ (8000960 <main+0x1bc>)
 8000896:	f7ff fe6b 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c1, MCP4728_CHANNEL_D, index, 1, 0, 0);
 800089a:	88fa      	ldrh	r2, [r7, #6]
 800089c:	2300      	movs	r3, #0
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	2300      	movs	r3, #0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	2103      	movs	r1, #3
 80008a8:	482d      	ldr	r0, [pc, #180]	@ (8000960 <main+0x1bc>)
 80008aa:	f7ff fe61 	bl	8000570 <MCP4728_SingleWrite>


        MCP4728_SingleWrite(&hi2c2, MCP4728_CHANNEL_A, index, 1, 0, 0);
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	2300      	movs	r3, #0
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	2300      	movs	r3, #0
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	2100      	movs	r1, #0
 80008bc:	482a      	ldr	r0, [pc, #168]	@ (8000968 <main+0x1c4>)
 80008be:	f7ff fe57 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c2, MCP4728_CHANNEL_B, index, 1, 0, 0);
 80008c2:	88fa      	ldrh	r2, [r7, #6]
 80008c4:	2300      	movs	r3, #0
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	2300      	movs	r3, #0
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4825      	ldr	r0, [pc, #148]	@ (8000968 <main+0x1c4>)
 80008d2:	f7ff fe4d 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c2, MCP4728_CHANNEL_C, index, 1, 0, 0);
 80008d6:	88fa      	ldrh	r2, [r7, #6]
 80008d8:	2300      	movs	r3, #0
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	2300      	movs	r3, #0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2301      	movs	r3, #1
 80008e2:	2102      	movs	r1, #2
 80008e4:	4820      	ldr	r0, [pc, #128]	@ (8000968 <main+0x1c4>)
 80008e6:	f7ff fe43 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c2, MCP4728_CHANNEL_D, index, 1, 0, 0);
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	2300      	movs	r3, #0
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	2300      	movs	r3, #0
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2301      	movs	r3, #1
 80008f6:	2103      	movs	r1, #3
 80008f8:	481b      	ldr	r0, [pc, #108]	@ (8000968 <main+0x1c4>)
 80008fa:	f7ff fe39 	bl	8000570 <MCP4728_SingleWrite>

        MCP4728_SingleWrite(&hi2c3, MCP4728_CHANNEL_A, index, 1, 0, 0);
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	2300      	movs	r3, #0
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	2100      	movs	r1, #0
 800090c:	4817      	ldr	r0, [pc, #92]	@ (800096c <main+0x1c8>)
 800090e:	f7ff fe2f 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c3, MCP4728_CHANNEL_B, index, 1, 0, 0);
 8000912:	88fa      	ldrh	r2, [r7, #6]
 8000914:	2300      	movs	r3, #0
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	2300      	movs	r3, #0
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2301      	movs	r3, #1
 800091e:	2101      	movs	r1, #1
 8000920:	4812      	ldr	r0, [pc, #72]	@ (800096c <main+0x1c8>)
 8000922:	f7ff fe25 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c3, MCP4728_CHANNEL_C, index, 1, 0, 0);
 8000926:	88fa      	ldrh	r2, [r7, #6]
 8000928:	2300      	movs	r3, #0
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	2102      	movs	r1, #2
 8000934:	480d      	ldr	r0, [pc, #52]	@ (800096c <main+0x1c8>)
 8000936:	f7ff fe1b 	bl	8000570 <MCP4728_SingleWrite>
        MCP4728_SingleWrite(&hi2c3, MCP4728_CHANNEL_D, index, 1, 0, 0);
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	2300      	movs	r3, #0
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	2300      	movs	r3, #0
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	2103      	movs	r1, #3
 8000948:	4808      	ldr	r0, [pc, #32]	@ (800096c <main+0x1c8>)
 800094a:	f7ff fe11 	bl	8000570 <MCP4728_SingleWrite>

        if (index >= 2000)
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000954:	f4ff af6e 	bcc.w	8000834 <main+0x90>
        {
            index = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	80fb      	strh	r3, [r7, #6]
        index += 100;
 800095c:	e76a      	b.n	8000834 <main+0x90>
 800095e:	bf00      	nop
 8000960:	20000084 	.word	0x20000084
 8000964:	40020400 	.word	0x40020400
 8000968:	200000d8 	.word	0x200000d8
 800096c:	2000012c 	.word	0x2000012c

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	@ 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fa3e 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <SystemClock_Config+0xc8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a26      	ldr	r2, [pc, #152]	@ (8000a38 <SystemClock_Config+0xc8>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <SystemClock_Config+0xc8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <SystemClock_Config+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80009e0:	230a      	movs	r3, #10
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009e4:	2350      	movs	r3, #80	@ 0x50
 80009e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fd5b 	bl	80024b0 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a00:	f000 f932 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 ffbe 	bl	80029a0 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a2a:	f000 f91d 	bl	8000c68 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3750      	adds	r7, #80	@ 0x50
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a46:	4a13      	ldr	r2, [pc, #76]	@ (8000a94 <MX_I2C1_Init+0x54>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a4c:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_I2C1_Init+0x58>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_I2C1_Init+0x50>)
 8000a7e:	f000 ff4b 	bl	8001918 <HAL_I2C_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a88:	f000 f8ee 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000084 	.word	0x20000084
 8000a94:	40005400 	.word	0x40005400
 8000a98:	00061a80 	.word	0x00061a80

08000a9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <MX_I2C2_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_I2C2_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_I2C2_Init+0x50>)
 8000ada:	f000 ff1d 	bl	8001918 <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 f8c0 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000d8 	.word	0x200000d8
 8000af0:	40005800 	.word	0x40005800
 8000af4:	000186a0 	.word	0x000186a0

08000af8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_I2C3_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_I2C3_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C3_Init+0x50>)
 8000b36:	f000 feef 	bl	8001918 <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f892 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000012c 	.word	0x2000012c
 8000b4c:	40005c00 	.word	0x40005c00
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 312500;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b60:	4a10      	ldr	r2, [pc, #64]	@ (8000ba4 <MX_USART1_UART_Init+0x50>)
 8000b62:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b78:	220c      	movs	r2, #12
 8000b7a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_USART1_UART_Init+0x48>)
 8000b8a:	f002 f8e9 	bl	8002d60 <HAL_UART_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000b94:	f000 f868 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000180 	.word	0x20000180
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	0004c4b4 	.word	0x0004c4b4

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a26      	ldr	r2, [pc, #152]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a18      	ldr	r2, [pc, #96]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a11      	ldr	r2, [pc, #68]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_GPIO_Init+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_1_OUT_GPIO_Port, GATE_1_OUT_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <MX_GPIO_Init+0xbc>)
 8000c36:	f000 fe55 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GATE_1_OUT_Pin */
  GPIO_InitStruct.Pin = GATE_1_OUT_Pin;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GATE_1_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_GPIO_Init+0xbc>)
 8000c54:	f000 fcc2 	bl	80015dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a63      	ldr	r2, [pc, #396]	@ (8000e70 <HAL_I2C_MspInit+0x1ac>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12c      	bne.n	8000d40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	4b62      	ldr	r3, [pc, #392]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a61      	ldr	r2, [pc, #388]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d02:	23c0      	movs	r3, #192	@ 0xc0
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	2312      	movs	r3, #18
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d12:	2304      	movs	r3, #4
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4856      	ldr	r0, [pc, #344]	@ (8000e78 <HAL_I2C_MspInit+0x1b4>)
 8000d1e:	f000 fc5d 	bl	80015dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a52      	ldr	r2, [pc, #328]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b50      	ldr	r3, [pc, #320]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d3e:	e093      	b.n	8000e68 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a4d      	ldr	r2, [pc, #308]	@ (8000e7c <HAL_I2C_MspInit+0x1b8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d13d      	bne.n	8000dc6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	4b49      	ldr	r3, [pc, #292]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a48      	ldr	r2, [pc, #288]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b46      	ldr	r3, [pc, #280]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	483d      	ldr	r0, [pc, #244]	@ (8000e78 <HAL_I2C_MspInit+0x1b4>)
 8000d84:	f000 fc2a 	bl	80015dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000d98:	2309      	movs	r3, #9
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4835      	ldr	r0, [pc, #212]	@ (8000e78 <HAL_I2C_MspInit+0x1b4>)
 8000da4:	f000 fc1a 	bl	80015dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a30      	ldr	r2, [pc, #192]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
}
 8000dc4:	e050      	b.n	8000e68 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2d      	ldr	r2, [pc, #180]	@ (8000e80 <HAL_I2C_MspInit+0x1bc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d14b      	bne.n	8000e68 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	4a26      	ldr	r2, [pc, #152]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4817      	ldr	r0, [pc, #92]	@ (8000e84 <HAL_I2C_MspInit+0x1c0>)
 8000e26:	f000 fbd9 	bl	80015dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4810      	ldr	r0, [pc, #64]	@ (8000e88 <HAL_I2C_MspInit+0x1c4>)
 8000e48:	f000 fbc8 	bl	80015dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000e56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_I2C_MspInit+0x1b0>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	@ 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40005400 	.word	0x40005400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40005800 	.word	0x40005800
 8000e80:	40005c00 	.word	0x40005c00
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f20 <HAL_UART_MspInit+0x94>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d134      	bne.n	8000f18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_UART_MspInit+0x98>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|MIDI_IN_Pin;
 8000ee6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <HAL_UART_MspInit+0x9c>)
 8000f04:	f000 fb6a 	bl	80015dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2025      	movs	r0, #37	@ 0x25
 8000f0e:	f000 fa9c 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f12:	2025      	movs	r0, #37	@ 0x25
 8000f14:	f000 fab5 	bl	8001482 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	@ 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f943 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <USART1_IRQHandler+0x10>)
 8000f92:	f001 ff35 	bl	8002e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000180 	.word	0x20000180

08000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
  }

  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
  }
  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103a:	605a      	str	r2, [r3, #4]
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f002 feb0 	bl	8003e10 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20020000 	.word	0x20020000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200001c8 	.word	0x200001c8
 80010e4:	20000320 	.word	0x20000320

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <SystemInit+0x28>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <SystemInit+0x28>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  SCB->VTOR = FLASH_BASE;  // <---------------- WORKAROUND!
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <SystemInit+0x28>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800114c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001118:	f7ff ffe6 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	@ (8001154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	@ (8001160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f002 fe6b 	bl	8003e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fb2d 	bl	80007a4 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800114c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001158:	08004bd8 	.word	0x08004bd8
  ldr r2, =_sbss
 800115c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001160:	2000031c 	.word	0x2000031c

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f94f 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fd6a 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f967 	bl	800149e <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e8:	f000 f92f 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200001cc 	.word	0x200001cc

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001cc 	.word	0x200001cc

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	@ (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff feb6 	bl	8001234 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d008      	beq.n	80014e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2280      	movs	r2, #128	@ 0x80
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e052      	b.n	800158e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0216 	bic.w	r2, r2, #22
 80014f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001506:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	2b00      	cmp	r3, #0
 800150e:	d103      	bne.n	8001518 <HAL_DMA_Abort+0x62>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0208 	bic.w	r2, r2, #8
 8001526:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	e013      	b.n	8001562 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153a:	f7ff fe7b 	bl	8001234 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b05      	cmp	r3, #5
 8001546:	d90c      	bls.n	8001562 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e015      	b.n	800158e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e4      	bne.n	800153a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	223f      	movs	r2, #63	@ 0x3f
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d004      	beq.n	80015b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e00c      	b.n	80015ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2205      	movs	r2, #5
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e159      	b.n	80018ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8148 	bne.w	80018a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d005      	beq.n	800162e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	2b02      	cmp	r3, #2
 800162c:	d130      	bne.n	8001690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 0201 	and.w	r2, r3, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b03      	cmp	r3, #3
 800169a:	d017      	beq.n	80016cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d123      	bne.n	8001720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	69b9      	ldr	r1, [r7, #24]
 800171c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0203 	and.w	r2, r3, #3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a2 	beq.w	80018a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <HAL_GPIO_Init+0x2e8>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a56      	ldr	r2, [pc, #344]	@ (80018c4 <HAL_GPIO_Init+0x2e8>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b54      	ldr	r3, [pc, #336]	@ (80018c4 <HAL_GPIO_Init+0x2e8>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177e:	4a52      	ldr	r2, [pc, #328]	@ (80018c8 <HAL_GPIO_Init+0x2ec>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a49      	ldr	r2, [pc, #292]	@ (80018cc <HAL_GPIO_Init+0x2f0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d019      	beq.n	80017de <HAL_GPIO_Init+0x202>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a48      	ldr	r2, [pc, #288]	@ (80018d0 <HAL_GPIO_Init+0x2f4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0x1fe>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a47      	ldr	r2, [pc, #284]	@ (80018d4 <HAL_GPIO_Init+0x2f8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00d      	beq.n	80017d6 <HAL_GPIO_Init+0x1fa>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a46      	ldr	r2, [pc, #280]	@ (80018d8 <HAL_GPIO_Init+0x2fc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d007      	beq.n	80017d2 <HAL_GPIO_Init+0x1f6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a45      	ldr	r2, [pc, #276]	@ (80018dc <HAL_GPIO_Init+0x300>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_Init+0x1f2>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x204>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	@ (80018c8 <HAL_GPIO_Init+0x2ec>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fe:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001822:	4a2f      	ldr	r2, [pc, #188]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800184c:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001852:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001876:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a0:	4a0f      	ldr	r2, [pc, #60]	@ (80018e0 <HAL_GPIO_Init+0x304>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f aea2 	bls.w	80015f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001900:	e003      	b.n	800190a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	619a      	str	r2, [r3, #24]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e12b      	b.n	8001b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff f9c0 	bl	8000cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2224      	movs	r2, #36	@ 0x24
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800197a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800197c:	f001 f9c8 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a81      	ldr	r2, [pc, #516]	@ (8001b8c <HAL_I2C_Init+0x274>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d807      	bhi.n	800199c <HAL_I2C_Init+0x84>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a80      	ldr	r2, [pc, #512]	@ (8001b90 <HAL_I2C_Init+0x278>)
 8001990:	4293      	cmp	r3, r2
 8001992:	bf94      	ite	ls
 8001994:	2301      	movls	r3, #1
 8001996:	2300      	movhi	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e006      	b.n	80019aa <HAL_I2C_Init+0x92>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b94 <HAL_I2C_Init+0x27c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	bf94      	ite	ls
 80019a4:	2301      	movls	r3, #1
 80019a6:	2300      	movhi	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0e7      	b.n	8001b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4a78      	ldr	r2, [pc, #480]	@ (8001b98 <HAL_I2C_Init+0x280>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9b      	lsrs	r3, r3, #18
 80019bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b8c <HAL_I2C_Init+0x274>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d802      	bhi.n	80019ec <HAL_I2C_Init+0xd4>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3301      	adds	r3, #1
 80019ea:	e009      	b.n	8001a00 <HAL_I2C_Init+0xe8>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	4a69      	ldr	r2, [pc, #420]	@ (8001b9c <HAL_I2C_Init+0x284>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	3301      	adds	r3, #1
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	495c      	ldr	r1, [pc, #368]	@ (8001b8c <HAL_I2C_Init+0x274>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d819      	bhi.n	8001a54 <HAL_I2C_Init+0x13c>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e59      	subs	r1, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a34:	400b      	ands	r3, r1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HAL_I2C_Init+0x138>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1e59      	subs	r1, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4e:	e051      	b.n	8001af4 <HAL_I2C_Init+0x1dc>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e04f      	b.n	8001af4 <HAL_I2C_Init+0x1dc>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d111      	bne.n	8001a80 <HAL_I2C_Init+0x168>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	440b      	add	r3, r1
 8001a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e012      	b.n	8001aa6 <HAL_I2C_Init+0x18e>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	0099      	lsls	r1, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Init+0x196>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e022      	b.n	8001af4 <HAL_I2C_Init+0x1dc>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_I2C_Init+0x1bc>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1e58      	subs	r0, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6859      	ldr	r1, [r3, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	440b      	add	r3, r1
 8001ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad2:	e00f      	b.n	8001af4 <HAL_I2C_Init+0x1dc>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1e58      	subs	r0, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	0099      	lsls	r1, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	6809      	ldr	r1, [r1, #0]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6911      	ldr	r1, [r2, #16]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68d2      	ldr	r2, [r2, #12]
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	000186a0 	.word	0x000186a0
 8001b90:	001e847f 	.word	0x001e847f
 8001b94:	003d08ff 	.word	0x003d08ff
 8001b98:	431bde83 	.word	0x431bde83
 8001b9c:	10624dd3 	.word	0x10624dd3

08001ba0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	461a      	mov	r2, r3
 8001bac:	460b      	mov	r3, r1
 8001bae:	817b      	strh	r3, [r7, #10]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fb3e 	bl	8001234 <HAL_GetTick>
 8001bb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	f040 80e0 	bne.w	8001d88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2319      	movs	r3, #25
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4970      	ldr	r1, [pc, #448]	@ (8001d94 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fa92 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
 8001be0:	e0d3      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_I2C_Master_Transmit+0x50>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e0cc      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x1ea>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d007      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2221      	movs	r2, #33	@ 0x21
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2210      	movs	r2, #16
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	893a      	ldrh	r2, [r7, #8]
 8001c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a50      	ldr	r2, [pc, #320]	@ (8001d98 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f9ca 	bl	8001ff8 <I2C_MasterRequestWrite>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e08d      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c84:	e066      	b.n	8001d54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fb50 	bl	8002330 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00d      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d107      	bne.n	8001cae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d11b      	bne.n	8001d28 <HAL_I2C_Master_Transmit+0x188>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d017      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	6a39      	ldr	r1, [r7, #32]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 fb47 	bl	80023c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00d      	beq.n	8001d54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d107      	bne.n	8001d50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e01a      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d194      	bne.n	8001c86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	00100002 	.word	0x00100002
 8001d98:	ffff0000 	.word	0xffff0000

08001d9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	460b      	mov	r3, r1
 8001daa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fa42 	bl	8001234 <HAL_GetTick>
 8001db0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	f040 8111 	bne.w	8001fe6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2319      	movs	r3, #25
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4988      	ldr	r1, [pc, #544]	@ (8001ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f994 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e104      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_IsDeviceReady+0x50>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0fd      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d007      	beq.n	8001e12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2224      	movs	r2, #36	@ 0x24
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a70      	ldr	r2, [pc, #448]	@ (8001ff4 <HAL_I2C_IsDeviceReady+0x258>)
 8001e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f952 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00d      	beq.n	8001e7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e6c:	d103      	bne.n	8001e76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e74:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0b6      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f9d3 	bl	8001234 <HAL_GetTick>
 8001e8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ebe:	e025      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ec0:	f7ff f9b8 	bl	8001234 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d302      	bcc.n	8001ed6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	22a0      	movs	r2, #160	@ 0xa0
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f16:	d005      	beq.n	8001f24 <HAL_I2C_IsDeviceReady+0x188>
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_I2C_IsDeviceReady+0x188>
 8001f1e:	7dbb      	ldrb	r3, [r7, #22]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0cd      	beq.n	8001ec0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d129      	bne.n	8001f8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2319      	movs	r3, #25
 8001f66:	2201      	movs	r2, #1
 8001f68:	4921      	ldr	r1, [pc, #132]	@ (8001ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f8c6 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e036      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e02c      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fa6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2319      	movs	r3, #25
 8001fae:	2201      	movs	r2, #1
 8001fb0:	490f      	ldr	r1, [pc, #60]	@ (8001ff0 <HAL_I2C_IsDeviceReady+0x254>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f8a2 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e012      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f4ff af32 	bcc.w	8001e36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	00100002 	.word	0x00100002
 8001ff4:	ffff0000 	.word	0xffff0000

08001ff8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	460b      	mov	r3, r1
 8002006:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d006      	beq.n	8002022 <I2C_MasterRequestWrite+0x2a>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d003      	beq.n	8002022 <I2C_MasterRequestWrite+0x2a>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002020:	d108      	bne.n	8002034 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e00b      	b.n	800204c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	2b12      	cmp	r3, #18
 800203a:	d107      	bne.n	800204c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800204a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f84f 	bl	80020fc <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002072:	d103      	bne.n	800207c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e035      	b.n	80020ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002088:	d108      	bne.n	800209c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	e01b      	b.n	80020d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	11db      	asrs	r3, r3, #7
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 0306 	and.w	r3, r3, #6
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f063 030f 	orn	r3, r3, #15
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <I2C_MasterRequestWrite+0xfc>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f898 	bl	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e010      	b.n	80020ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4907      	ldr	r1, [pc, #28]	@ (80020f8 <I2C_MasterRequestWrite+0x100>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f888 	bl	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	00010008 	.word	0x00010008
 80020f8:	00010002 	.word	0x00010002

080020fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210c:	e048      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002114:	d044      	beq.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7ff f88d 	bl	8001234 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d139      	bne.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10d      	bne.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	43da      	mvns	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4013      	ands	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	e00c      	b.n	800216c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	43da      	mvns	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	429a      	cmp	r2, r3
 8002170:	d116      	bne.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	f043 0220 	orr.w	r2, r3, #32
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e023      	b.n	80021e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10d      	bne.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4013      	ands	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	e00c      	b.n	80021e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d093      	beq.n	800210e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021fe:	e071      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220e:	d123      	bne.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e067      	b.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800225e:	d041      	beq.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002260:	f7fe ffe8 	bl	8001234 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d302      	bcc.n	8002276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d136      	bne.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10c      	bne.n	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e00b      	b.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	43da      	mvns	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e021      	b.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0c1b      	lsrs	r3, r3, #16
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10c      	bne.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4013      	ands	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e00b      	b.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f af6d 	bne.w	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233c:	e034      	b.n	80023a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f886 	bl	8002450 <I2C_IsAcknowledgeFailed>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e034      	b.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002354:	d028      	beq.n	80023a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002356:	f7fe ff6d 	bl	8001234 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d302      	bcc.n	800236c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d11d      	bne.n	80023a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002376:	2b80      	cmp	r3, #128	@ 0x80
 8002378:	d016      	beq.n	80023a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b2:	2b80      	cmp	r3, #128	@ 0x80
 80023b4:	d1c3      	bne.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023cc:	e034      	b.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f83e 	bl	8002450 <I2C_IsAcknowledgeFailed>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e034      	b.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023e4:	d028      	beq.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7fe ff25 	bl	8001234 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11d      	bne.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d016      	beq.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e007      	b.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b04      	cmp	r3, #4
 8002444:	d1c3      	bne.n	80023ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002466:	d11b      	bne.n	80024a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002470:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e267      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d075      	beq.n	80025ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ce:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b85      	ldr	r3, [pc, #532]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d112      	bne.n	800250c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b82      	ldr	r3, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f2:	d10b      	bne.n	800250c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b7e      	ldr	r3, [pc, #504]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d05b      	beq.n	80025b8 <HAL_RCC_OscConfig+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d157      	bne.n	80025b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e242      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x74>
 8002516:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xb0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x98>
 800252e:	4b70      	ldr	r3, [pc, #448]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6f      	ldr	r2, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b6d      	ldr	r3, [pc, #436]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6c      	ldr	r2, [pc, #432]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xb0>
 8002548:	4b69      	ldr	r3, [pc, #420]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a68      	ldr	r2, [pc, #416]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b66      	ldr	r3, [pc, #408]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a65      	ldr	r2, [pc, #404]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe fe64 	bl	8001234 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe fe60 	bl	8001234 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	@ 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e207      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xc0>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fe50 	bl	8001234 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe fe4c 	bl	8001234 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1f3      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b51      	ldr	r3, [pc, #324]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0xe8>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025c6:	4b4a      	ldr	r3, [pc, #296]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b44      	ldr	r3, [pc, #272]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x152>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1c7      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4937      	ldr	r1, [pc, #220]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_OscConfig+0x244>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fe05 	bl	8001234 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fe01 	bl	8001234 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1a8      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b28      	ldr	r3, [pc, #160]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4925      	ldr	r1, [pc, #148]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCC_OscConfig+0x244>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fde4 	bl	8001234 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fde0 	bl	8001234 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e187      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d036      	beq.n	8002708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_RCC_OscConfig+0x248>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fdc4 	bl	8001234 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fdc0 	bl	8001234 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e167      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x200>
 80026ce:	e01b      	b.n	8002708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_RCC_OscConfig+0x248>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fdad 	bl	8001234 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	e00e      	b.n	80026fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe fda9 	bl	8001234 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d907      	bls.n	80026fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e150      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470000 	.word	0x42470000
 80026f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b88      	ldr	r3, [pc, #544]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ea      	bne.n	80026de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8097 	beq.w	8002844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b81      	ldr	r3, [pc, #516]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b7d      	ldr	r3, [pc, #500]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	4a7c      	ldr	r2, [pc, #496]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	@ 0x40
 8002736:	4b7a      	ldr	r3, [pc, #488]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002746:	4b77      	ldr	r3, [pc, #476]	@ (8002924 <HAL_RCC_OscConfig+0x474>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002752:	4b74      	ldr	r3, [pc, #464]	@ (8002924 <HAL_RCC_OscConfig+0x474>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a73      	ldr	r2, [pc, #460]	@ (8002924 <HAL_RCC_OscConfig+0x474>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7fe fd69 	bl	8001234 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fd65 	bl	8001234 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e10c      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b6a      	ldr	r3, [pc, #424]	@ (8002924 <HAL_RCC_OscConfig+0x474>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x2ea>
 800278c:	4b64      	ldr	r3, [pc, #400]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a63      	ldr	r2, [pc, #396]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	e01c      	b.n	80027d4 <HAL_RCC_OscConfig+0x324>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x30c>
 80027a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x324>
 80027bc:	4b58      	ldr	r3, [pc, #352]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a57      	ldr	r2, [pc, #348]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	4b55      	ldr	r3, [pc, #340]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a54      	ldr	r2, [pc, #336]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d015      	beq.n	8002808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fd2a 	bl	8001234 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fd26 	bl	8001234 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0cb      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	4b49      	ldr	r3, [pc, #292]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ee      	beq.n	80027e4 <HAL_RCC_OscConfig+0x334>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002808:	f7fe fd14 	bl	8001234 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fd10 	bl	8001234 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0b5      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	4b3e      	ldr	r3, [pc, #248]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ee      	bne.n	8002810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002838:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	4a38      	ldr	r2, [pc, #224]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a1 	beq.w	8002990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284e:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d05c      	beq.n	8002914 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d141      	bne.n	80028e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b31      	ldr	r3, [pc, #196]	@ (8002928 <HAL_RCC_OscConfig+0x478>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fce4 	bl	8001234 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fce0 	bl	8001234 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e087      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	3b01      	subs	r3, #1
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	491b      	ldr	r1, [pc, #108]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x478>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fcb9 	bl	8001234 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fcb5 	bl	8001234 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e05c      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x416>
 80028e4:	e054      	b.n	8002990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_RCC_OscConfig+0x478>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fca2 	bl	8001234 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fc9e 	bl	8001234 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e045      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_RCC_OscConfig+0x470>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x444>
 8002912:	e03d      	b.n	8002990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e038      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
 8002920:	40023800 	.word	0x40023800
 8002924:	40007000 	.word	0x40007000
 8002928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x4ec>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d028      	beq.n	800298c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d121      	bne.n	800298c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d11a      	bne.n	800298c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	3b01      	subs	r3, #1
 8002976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0cc      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b68      	ldr	r3, [pc, #416]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d90c      	bls.n	80029dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b65      	ldr	r3, [pc, #404]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b59      	ldr	r3, [pc, #356]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a58      	ldr	r2, [pc, #352]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a0c:	4b53      	ldr	r3, [pc, #332]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	494d      	ldr	r1, [pc, #308]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d044      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d119      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e067      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b37      	ldr	r3, [pc, #220]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4934      	ldr	r1, [pc, #208]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fbd0 	bl	8001234 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe fbcc 	bl	8001234 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e04f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d20c      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e032      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4916      	ldr	r1, [pc, #88]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	490e      	ldr	r1, [pc, #56]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b26:	f000 f821 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	490a      	ldr	r1, [pc, #40]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	5ccb      	ldrb	r3, [r1, r3]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fb30 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	08004b7c 	.word	0x08004b7c
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b70:	b090      	sub	sp, #64	@ 0x40
 8002b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b84:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x180>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d00d      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x40>
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	f200 80a1 	bhi.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b9e:	e09b      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b53      	ldr	r3, [pc, #332]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ba4:	e09b      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba6:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002baa:	e098      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bac:	4b4f      	ldr	r3, [pc, #316]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x180>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d028      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	2200      	movs	r2, #0
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd8:	fb03 f201 	mul.w	r2, r3, r1
 8002bdc:	2300      	movs	r3, #0
 8002bde:	fb00 f303 	mul.w	r3, r0, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	4a43      	ldr	r2, [pc, #268]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002be6:	fba0 1202 	umull	r1, r2, r0, r2
 8002bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bec:	460a      	mov	r2, r1
 8002bee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bf2:	4413      	add	r3, r2
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	61fa      	str	r2, [r7, #28]
 8002bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c06:	f7fd fb3b 	bl	8000280 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c12:	e053      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c14:	4b35      	ldr	r3, [pc, #212]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x180>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	617a      	str	r2, [r7, #20]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c26:	f04f 0b00 	mov.w	fp, #0
 8002c2a:	4652      	mov	r2, sl
 8002c2c:	465b      	mov	r3, fp
 8002c2e:	f04f 0000 	mov.w	r0, #0
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	0159      	lsls	r1, r3, #5
 8002c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3c:	0150      	lsls	r0, r2, #5
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ebb2 080a 	subs.w	r8, r2, sl
 8002c46:	eb63 090b 	sbc.w	r9, r3, fp
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c62:	eb63 0509 	sbc.w	r5, r3, r9
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	00eb      	lsls	r3, r5, #3
 8002c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c74:	00e2      	lsls	r2, r4, #3
 8002c76:	4614      	mov	r4, r2
 8002c78:	461d      	mov	r5, r3
 8002c7a:	eb14 030a 	adds.w	r3, r4, sl
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	eb45 030b 	adc.w	r3, r5, fp
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c92:	4629      	mov	r1, r5
 8002c94:	028b      	lsls	r3, r1, #10
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	028a      	lsls	r2, r1, #10
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	60fa      	str	r2, [r7, #12]
 8002cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb0:	f7fd fae6 	bl	8000280 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3740      	adds	r7, #64	@ 0x40
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	01312d00 	.word	0x01312d00

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08004b8c 	.word	0x08004b8c

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffdc 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08004b8c 	.word	0x08004b8c

08002d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e042      	b.n	8002df8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe f880 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	@ 0x24
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fc85 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0ba      	sub	sp, #232	@ 0xe8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb69 	bl	8003536 <UART_Receive_IT>
      return;
 8002e64:	e25b      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80de 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80d1 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 81f2 	beq.w	8003314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 faf4 	bl	8003536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_UART_IRQHandler+0x17a>
 8002f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9fc 	bl	8003378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8a:	2b40      	cmp	r3, #64	@ 0x40
 8002f8c:	d141      	bne.n	8003012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1d9      	bne.n	8002f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80031e0 <HAL_UART_IRQHandler+0x3e0>)
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fad1 	bl	8001596 <HAL_DMA_Abort_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00e      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f99e 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00a      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f99a 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e006      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f996 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003026:	e175      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	bf00      	nop
    return;
 800302a:	e173      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 814f 	bne.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8148 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8141 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	f040 80b6 	bne.w	80031e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8145 	beq.w	8003318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003096:	429a      	cmp	r2, r3
 8003098:	f080 813e 	bcs.w	8003318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ae:	f000 8088 	beq.w	80031c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1d9      	bne.n	80030b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800310e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800312a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e1      	bne.n	80030fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800314a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800315e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800316c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e3      	bne.n	800313a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003192:	f023 0310 	bic.w	r3, r3, #16
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e3      	bne.n	8003180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f97a 	bl	80014b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8c1 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031de:	e09b      	b.n	8003318 <HAL_UART_IRQHandler+0x518>
 80031e0:	0800343f 	.word	0x0800343f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 808e 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8089 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800322e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800323c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e3      	bne.n	800320a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	623b      	str	r3, [r7, #32]
   return(result);
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003266:	633a      	str	r2, [r7, #48]	@ 0x30
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800326c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60fb      	str	r3, [r7, #12]
   return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032ac:	61fa      	str	r2, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f847 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032d2:	e023      	b.n	800331c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8ba 	bl	8003466 <UART_Transmit_IT>
    return;
 80032f2:	e014      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8fa 	bl	8003506 <UART_EndTransmit_IT>
    return;
 8003312:	e004      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    return;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 800331c:	bf00      	nop
  }
}
 800331e:	37e8      	adds	r7, #232	@ 0xe8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b095      	sub	sp, #84	@ 0x54
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d119      	bne.n	8003424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	647b      	str	r3, [r7, #68]	@ 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003410:	61ba      	str	r2, [r7, #24]
 8003412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6979      	ldr	r1, [r7, #20]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	613b      	str	r3, [r7, #16]
   return(result);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003432:	bf00      	nop
 8003434:	3754      	adds	r7, #84	@ 0x54
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff ff77 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b21      	cmp	r3, #33	@ 0x21
 8003478:	d13e      	bne.n	80034f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d114      	bne.n	80034ae <UART_Transmit_IT+0x48>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d110      	bne.n	80034ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	621a      	str	r2, [r3, #32]
 80034ac:	e008      	b.n	80034c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6211      	str	r1, [r2, #32]
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4619      	mov	r1, r3
 80034ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800351c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fefc 	bl	8003324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08c      	sub	sp, #48	@ 0x30
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b22      	cmp	r3, #34	@ 0x22
 8003548:	f040 80ae 	bne.w	80036a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d117      	bne.n	8003586 <UART_Receive_IT+0x50>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	b29a      	uxth	r2, r3
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
 8003584:	e026      	b.n	80035d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003598:	d007      	beq.n	80035aa <UART_Receive_IT+0x74>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <UART_Receive_IT+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e008      	b.n	80035ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4619      	mov	r1, r3
 80035e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d15d      	bne.n	80036a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0220 	bic.w	r2, r2, #32
 80035f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	2b01      	cmp	r3, #1
 800362c:	d135      	bne.n	800369a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 0310 	bic.w	r3, r3, #16
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	623a      	str	r2, [r7, #32]
 8003656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	61bb      	str	r3, [r7, #24]
   return(result);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b10      	cmp	r3, #16
 8003674:	d10a      	bne.n	800368c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe64 	bl	8003360 <HAL_UARTEx_RxEventCallback>
 8003698:	e002      	b.n	80036a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe4c 	bl	8003338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e002      	b.n	80036aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3730      	adds	r7, #48	@ 0x30
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b8:	b0c0      	sub	sp, #256	@ 0x100
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	ea40 0301 	orr.w	r3, r0, r1
 80036dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800370c:	f021 010c 	bic.w	r1, r1, #12
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800371a:	430b      	orrs	r3, r1
 800371c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	6999      	ldr	r1, [r3, #24]
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	ea40 0301 	orr.w	r3, r0, r1
 800373a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8f      	ldr	r3, [pc, #572]	@ (8003980 <UART_SetConfig+0x2cc>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d005      	beq.n	8003754 <UART_SetConfig+0xa0>
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b8d      	ldr	r3, [pc, #564]	@ (8003984 <UART_SetConfig+0x2d0>)
 8003750:	429a      	cmp	r2, r3
 8003752:	d104      	bne.n	800375e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff faf0 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003758:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800375c:	e003      	b.n	8003766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800375e:	f7ff fad7 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8003762:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003770:	f040 810c 	bne.w	800398c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003778:	2200      	movs	r2, #0
 800377a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800377e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003786:	4622      	mov	r2, r4
 8003788:	462b      	mov	r3, r5
 800378a:	1891      	adds	r1, r2, r2
 800378c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800378e:	415b      	adcs	r3, r3
 8003790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003796:	4621      	mov	r1, r4
 8003798:	eb12 0801 	adds.w	r8, r2, r1
 800379c:	4629      	mov	r1, r5
 800379e:	eb43 0901 	adc.w	r9, r3, r1
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b6:	4690      	mov	r8, r2
 80037b8:	4699      	mov	r9, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	eb18 0303 	adds.w	r3, r8, r3
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037c4:	462b      	mov	r3, r5
 80037c6:	eb49 0303 	adc.w	r3, r9, r3
 80037ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037e2:	460b      	mov	r3, r1
 80037e4:	18db      	adds	r3, r3, r3
 80037e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e8:	4613      	mov	r3, r2
 80037ea:	eb42 0303 	adc.w	r3, r2, r3
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80037f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037f8:	f7fc fd42 	bl	8000280 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4b61      	ldr	r3, [pc, #388]	@ (8003988 <UART_SetConfig+0x2d4>)
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	011c      	lsls	r4, r3, #4
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380e:	2200      	movs	r2, #0
 8003810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003814:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800381c:	4642      	mov	r2, r8
 800381e:	464b      	mov	r3, r9
 8003820:	1891      	adds	r1, r2, r2
 8003822:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003824:	415b      	adcs	r3, r3
 8003826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800382c:	4641      	mov	r1, r8
 800382e:	eb12 0a01 	adds.w	sl, r2, r1
 8003832:	4649      	mov	r1, r9
 8003834:	eb43 0b01 	adc.w	fp, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800384c:	4692      	mov	sl, r2
 800384e:	469b      	mov	fp, r3
 8003850:	4643      	mov	r3, r8
 8003852:	eb1a 0303 	adds.w	r3, sl, r3
 8003856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800385a:	464b      	mov	r3, r9
 800385c:	eb4b 0303 	adc.w	r3, fp, r3
 8003860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003870:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003878:	460b      	mov	r3, r1
 800387a:	18db      	adds	r3, r3, r3
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
 800387e:	4613      	mov	r3, r2
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	647b      	str	r3, [r7, #68]	@ 0x44
 8003886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800388a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800388e:	f7fc fcf7 	bl	8000280 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4611      	mov	r1, r2
 8003898:	4b3b      	ldr	r3, [pc, #236]	@ (8003988 <UART_SetConfig+0x2d4>)
 800389a:	fba3 2301 	umull	r2, r3, r3, r1
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2264      	movs	r2, #100	@ 0x64
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	1acb      	subs	r3, r1, r3
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038ae:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <UART_SetConfig+0x2d4>)
 80038b0:	fba3 2302 	umull	r2, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038bc:	441c      	add	r4, r3
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038d8:	415b      	adcs	r3, r3
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038e0:	4641      	mov	r1, r8
 80038e2:	1851      	adds	r1, r2, r1
 80038e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80038e6:	4649      	mov	r1, r9
 80038e8:	414b      	adcs	r3, r1
 80038ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038f8:	4659      	mov	r1, fp
 80038fa:	00cb      	lsls	r3, r1, #3
 80038fc:	4651      	mov	r1, sl
 80038fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003902:	4651      	mov	r1, sl
 8003904:	00ca      	lsls	r2, r1, #3
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	4603      	mov	r3, r0
 800390c:	4642      	mov	r2, r8
 800390e:	189b      	adds	r3, r3, r2
 8003910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003914:	464b      	mov	r3, r9
 8003916:	460a      	mov	r2, r1
 8003918:	eb42 0303 	adc.w	r3, r2, r3
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800392c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003934:	460b      	mov	r3, r1
 8003936:	18db      	adds	r3, r3, r3
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393a:	4613      	mov	r3, r2
 800393c:	eb42 0303 	adc.w	r3, r2, r3
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800394a:	f7fc fc99 	bl	8000280 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <UART_SetConfig+0x2d4>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	@ 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	3332      	adds	r3, #50	@ 0x32
 8003966:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <UART_SetConfig+0x2d4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 0207 	and.w	r2, r3, #7
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4422      	add	r2, r4
 800397a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800397c:	e106      	b.n	8003b8c <UART_SetConfig+0x4d8>
 800397e:	bf00      	nop
 8003980:	40011000 	.word	0x40011000
 8003984:	40011400 	.word	0x40011400
 8003988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800399a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800399e:	4642      	mov	r2, r8
 80039a0:	464b      	mov	r3, r9
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	6239      	str	r1, [r7, #32]
 80039a6:	415b      	adcs	r3, r3
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ae:	4641      	mov	r1, r8
 80039b0:	1854      	adds	r4, r2, r1
 80039b2:	4649      	mov	r1, r9
 80039b4:	eb43 0501 	adc.w	r5, r3, r1
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	00eb      	lsls	r3, r5, #3
 80039c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c6:	00e2      	lsls	r2, r4, #3
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4643      	mov	r3, r8
 80039ce:	18e3      	adds	r3, r4, r3
 80039d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039d4:	464b      	mov	r3, r9
 80039d6:	eb45 0303 	adc.w	r3, r5, r3
 80039da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039fa:	4629      	mov	r1, r5
 80039fc:	008b      	lsls	r3, r1, #2
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a04:	4621      	mov	r1, r4
 8003a06:	008a      	lsls	r2, r1, #2
 8003a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a0c:	f7fc fc38 	bl	8000280 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4b60      	ldr	r3, [pc, #384]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003a16:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	011c      	lsls	r4, r3, #4
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	61b9      	str	r1, [r7, #24]
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6139      	str	r1, [r7, #16]
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a98:	4649      	mov	r1, r9
 8003a9a:	008b      	lsls	r3, r1, #2
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	008a      	lsls	r2, r1, #2
 8003aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003aaa:	f7fc fbe9 	bl	8000280 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2264      	movs	r2, #100	@ 0x64
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	1acb      	subs	r3, r1, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	@ 0x32
 8003ac8:	4a33      	ldr	r2, [pc, #204]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b26:	464b      	mov	r3, r9
 8003b28:	460a      	mov	r2, r1
 8003b2a:	eb42 0303 	adc.w	r3, r2, r3
 8003b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b48:	4649      	mov	r1, r9
 8003b4a:	008b      	lsls	r3, r1, #2
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b52:	4641      	mov	r1, r8
 8003b54:	008a      	lsls	r2, r1, #2
 8003b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b5a:	f7fc fb91 	bl	8000280 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	@ 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	3332      	adds	r3, #50	@ 0x32
 8003b76:	4a08      	ldr	r2, [pc, #32]	@ (8003b98 <UART_SetConfig+0x4e4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4422      	add	r2, r4
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b98:	51eb851f 	.word	0x51eb851f

08003b9c <std>:
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003baa:	6083      	str	r3, [r0, #8]
 8003bac:	8181      	strh	r1, [r0, #12]
 8003bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bb0:	81c2      	strh	r2, [r0, #14]
 8003bb2:	6183      	str	r3, [r0, #24]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	305c      	adds	r0, #92	@ 0x5c
 8003bba:	f000 f921 	bl	8003e00 <memset>
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <std+0x58>)
 8003bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <std+0x5c>)
 8003bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <std+0x60>)
 8003bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <std+0x64>)
 8003bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bce:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <std+0x68>)
 8003bd0:	6224      	str	r4, [r4, #32]
 8003bd2:	429c      	cmp	r4, r3
 8003bd4:	d006      	beq.n	8003be4 <std+0x48>
 8003bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bda:	4294      	cmp	r4, r2
 8003bdc:	d002      	beq.n	8003be4 <std+0x48>
 8003bde:	33d0      	adds	r3, #208	@ 0xd0
 8003be0:	429c      	cmp	r4, r3
 8003be2:	d105      	bne.n	8003bf0 <std+0x54>
 8003be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bec:	f000 b93a 	b.w	8003e64 <__retarget_lock_init_recursive>
 8003bf0:	bd10      	pop	{r4, pc}
 8003bf2:	bf00      	nop
 8003bf4:	080046d9 	.word	0x080046d9
 8003bf8:	080046fb 	.word	0x080046fb
 8003bfc:	08004733 	.word	0x08004733
 8003c00:	08004757 	.word	0x08004757
 8003c04:	200001d0 	.word	0x200001d0

08003c08 <stdio_exit_handler>:
 8003c08:	4a02      	ldr	r2, [pc, #8]	@ (8003c14 <stdio_exit_handler+0xc>)
 8003c0a:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <stdio_exit_handler+0x10>)
 8003c0c:	4803      	ldr	r0, [pc, #12]	@ (8003c1c <stdio_exit_handler+0x14>)
 8003c0e:	f000 b869 	b.w	8003ce4 <_fwalk_sglue>
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c
 8003c18:	08004671 	.word	0x08004671
 8003c1c:	2000001c 	.word	0x2000001c

08003c20 <cleanup_stdio>:
 8003c20:	6841      	ldr	r1, [r0, #4]
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <cleanup_stdio+0x34>)
 8003c24:	4299      	cmp	r1, r3
 8003c26:	b510      	push	{r4, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	d001      	beq.n	8003c30 <cleanup_stdio+0x10>
 8003c2c:	f000 fd20 	bl	8004670 <_fflush_r>
 8003c30:	68a1      	ldr	r1, [r4, #8]
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <cleanup_stdio+0x38>)
 8003c34:	4299      	cmp	r1, r3
 8003c36:	d002      	beq.n	8003c3e <cleanup_stdio+0x1e>
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f000 fd19 	bl	8004670 <_fflush_r>
 8003c3e:	68e1      	ldr	r1, [r4, #12]
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <cleanup_stdio+0x3c>)
 8003c42:	4299      	cmp	r1, r3
 8003c44:	d004      	beq.n	8003c50 <cleanup_stdio+0x30>
 8003c46:	4620      	mov	r0, r4
 8003c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c4c:	f000 bd10 	b.w	8004670 <_fflush_r>
 8003c50:	bd10      	pop	{r4, pc}
 8003c52:	bf00      	nop
 8003c54:	200001d0 	.word	0x200001d0
 8003c58:	20000238 	.word	0x20000238
 8003c5c:	200002a0 	.word	0x200002a0

08003c60 <global_stdio_init.part.0>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <global_stdio_init.part.0+0x30>)
 8003c64:	4c0b      	ldr	r4, [pc, #44]	@ (8003c94 <global_stdio_init.part.0+0x34>)
 8003c66:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <global_stdio_init.part.0+0x38>)
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2104      	movs	r1, #4
 8003c70:	f7ff ff94 	bl	8003b9c <std>
 8003c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2109      	movs	r1, #9
 8003c7c:	f7ff ff8e 	bl	8003b9c <std>
 8003c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c84:	2202      	movs	r2, #2
 8003c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8a:	2112      	movs	r1, #18
 8003c8c:	f7ff bf86 	b.w	8003b9c <std>
 8003c90:	20000308 	.word	0x20000308
 8003c94:	200001d0 	.word	0x200001d0
 8003c98:	08003c09 	.word	0x08003c09

08003c9c <__sfp_lock_acquire>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	@ (8003ca4 <__sfp_lock_acquire+0x8>)
 8003c9e:	f000 b8e2 	b.w	8003e66 <__retarget_lock_acquire_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	2000030d 	.word	0x2000030d

08003ca8 <__sfp_lock_release>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	@ (8003cb0 <__sfp_lock_release+0x8>)
 8003caa:	f000 b8dd 	b.w	8003e68 <__retarget_lock_release_recursive>
 8003cae:	bf00      	nop
 8003cb0:	2000030d 	.word	0x2000030d

08003cb4 <__sinit>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	f7ff fff0 	bl	8003c9c <__sfp_lock_acquire>
 8003cbc:	6a23      	ldr	r3, [r4, #32]
 8003cbe:	b11b      	cbz	r3, 8003cc8 <__sinit+0x14>
 8003cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc4:	f7ff bff0 	b.w	8003ca8 <__sfp_lock_release>
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <__sinit+0x28>)
 8003cca:	6223      	str	r3, [r4, #32]
 8003ccc:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <__sinit+0x2c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f5      	bne.n	8003cc0 <__sinit+0xc>
 8003cd4:	f7ff ffc4 	bl	8003c60 <global_stdio_init.part.0>
 8003cd8:	e7f2      	b.n	8003cc0 <__sinit+0xc>
 8003cda:	bf00      	nop
 8003cdc:	08003c21 	.word	0x08003c21
 8003ce0:	20000308 	.word	0x20000308

08003ce4 <_fwalk_sglue>:
 8003ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	4607      	mov	r7, r0
 8003cea:	4688      	mov	r8, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	2600      	movs	r6, #0
 8003cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8003cf8:	d505      	bpl.n	8003d06 <_fwalk_sglue+0x22>
 8003cfa:	6824      	ldr	r4, [r4, #0]
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	d1f7      	bne.n	8003cf0 <_fwalk_sglue+0xc>
 8003d00:	4630      	mov	r0, r6
 8003d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d06:	89ab      	ldrh	r3, [r5, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d907      	bls.n	8003d1c <_fwalk_sglue+0x38>
 8003d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d10:	3301      	adds	r3, #1
 8003d12:	d003      	beq.n	8003d1c <_fwalk_sglue+0x38>
 8003d14:	4629      	mov	r1, r5
 8003d16:	4638      	mov	r0, r7
 8003d18:	47c0      	blx	r8
 8003d1a:	4306      	orrs	r6, r0
 8003d1c:	3568      	adds	r5, #104	@ 0x68
 8003d1e:	e7e9      	b.n	8003cf4 <_fwalk_sglue+0x10>

08003d20 <iprintf>:
 8003d20:	b40f      	push	{r0, r1, r2, r3}
 8003d22:	b507      	push	{r0, r1, r2, lr}
 8003d24:	4906      	ldr	r1, [pc, #24]	@ (8003d40 <iprintf+0x20>)
 8003d26:	ab04      	add	r3, sp, #16
 8003d28:	6808      	ldr	r0, [r1, #0]
 8003d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d2e:	6881      	ldr	r1, [r0, #8]
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	f000 f8d1 	bl	8003ed8 <_vfiprintf_r>
 8003d36:	b003      	add	sp, #12
 8003d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d3c:	b004      	add	sp, #16
 8003d3e:	4770      	bx	lr
 8003d40:	20000018 	.word	0x20000018

08003d44 <_puts_r>:
 8003d44:	6a03      	ldr	r3, [r0, #32]
 8003d46:	b570      	push	{r4, r5, r6, lr}
 8003d48:	6884      	ldr	r4, [r0, #8]
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	460e      	mov	r6, r1
 8003d4e:	b90b      	cbnz	r3, 8003d54 <_puts_r+0x10>
 8003d50:	f7ff ffb0 	bl	8003cb4 <__sinit>
 8003d54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d56:	07db      	lsls	r3, r3, #31
 8003d58:	d405      	bmi.n	8003d66 <_puts_r+0x22>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	0598      	lsls	r0, r3, #22
 8003d5e:	d402      	bmi.n	8003d66 <_puts_r+0x22>
 8003d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d62:	f000 f880 	bl	8003e66 <__retarget_lock_acquire_recursive>
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	0719      	lsls	r1, r3, #28
 8003d6a:	d502      	bpl.n	8003d72 <_puts_r+0x2e>
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d135      	bne.n	8003dde <_puts_r+0x9a>
 8003d72:	4621      	mov	r1, r4
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 fd31 	bl	80047dc <__swsetup_r>
 8003d7a:	b380      	cbz	r0, 8003dde <_puts_r+0x9a>
 8003d7c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003d80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d82:	07da      	lsls	r2, r3, #31
 8003d84:	d405      	bmi.n	8003d92 <_puts_r+0x4e>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	059b      	lsls	r3, r3, #22
 8003d8a:	d402      	bmi.n	8003d92 <_puts_r+0x4e>
 8003d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d8e:	f000 f86b 	bl	8003e68 <__retarget_lock_release_recursive>
 8003d92:	4628      	mov	r0, r5
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da04      	bge.n	8003da4 <_puts_r+0x60>
 8003d9a:	69a2      	ldr	r2, [r4, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	dc17      	bgt.n	8003dd0 <_puts_r+0x8c>
 8003da0:	290a      	cmp	r1, #10
 8003da2:	d015      	beq.n	8003dd0 <_puts_r+0x8c>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	6022      	str	r2, [r4, #0]
 8003daa:	7019      	strb	r1, [r3, #0]
 8003dac:	68a3      	ldr	r3, [r4, #8]
 8003dae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003db2:	3b01      	subs	r3, #1
 8003db4:	60a3      	str	r3, [r4, #8]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	d1ed      	bne.n	8003d96 <_puts_r+0x52>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da11      	bge.n	8003de2 <_puts_r+0x9e>
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	210a      	movs	r1, #10
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 fccb 	bl	800475e <__swbuf_r>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d0d7      	beq.n	8003d7c <_puts_r+0x38>
 8003dcc:	250a      	movs	r5, #10
 8003dce:	e7d7      	b.n	8003d80 <_puts_r+0x3c>
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 fcc3 	bl	800475e <__swbuf_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d1e7      	bne.n	8003dac <_puts_r+0x68>
 8003ddc:	e7ce      	b.n	8003d7c <_puts_r+0x38>
 8003dde:	3e01      	subs	r6, #1
 8003de0:	e7e4      	b.n	8003dac <_puts_r+0x68>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	6022      	str	r2, [r4, #0]
 8003de8:	220a      	movs	r2, #10
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e7ee      	b.n	8003dcc <_puts_r+0x88>
	...

08003df0 <puts>:
 8003df0:	4b02      	ldr	r3, [pc, #8]	@ (8003dfc <puts+0xc>)
 8003df2:	4601      	mov	r1, r0
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	f7ff bfa5 	b.w	8003d44 <_puts_r>
 8003dfa:	bf00      	nop
 8003dfc:	20000018 	.word	0x20000018

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <__errno>:
 8003e10:	4b01      	ldr	r3, [pc, #4]	@ (8003e18 <__errno+0x8>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000018 	.word	0x20000018

08003e1c <__libc_init_array>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e54 <__libc_init_array+0x38>)
 8003e20:	4c0d      	ldr	r4, [pc, #52]	@ (8003e58 <__libc_init_array+0x3c>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	2600      	movs	r6, #0
 8003e28:	42a6      	cmp	r6, r4
 8003e2a:	d109      	bne.n	8003e40 <__libc_init_array+0x24>
 8003e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e5c <__libc_init_array+0x40>)
 8003e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e60 <__libc_init_array+0x44>)
 8003e30:	f000 fe4e 	bl	8004ad0 <_init>
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	2600      	movs	r6, #0
 8003e3a:	42a6      	cmp	r6, r4
 8003e3c:	d105      	bne.n	8003e4a <__libc_init_array+0x2e>
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e44:	4798      	blx	r3
 8003e46:	3601      	adds	r6, #1
 8003e48:	e7ee      	b.n	8003e28 <__libc_init_array+0xc>
 8003e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4e:	4798      	blx	r3
 8003e50:	3601      	adds	r6, #1
 8003e52:	e7f2      	b.n	8003e3a <__libc_init_array+0x1e>
 8003e54:	08004bd0 	.word	0x08004bd0
 8003e58:	08004bd0 	.word	0x08004bd0
 8003e5c:	08004bd0 	.word	0x08004bd0
 8003e60:	08004bd4 	.word	0x08004bd4

08003e64 <__retarget_lock_init_recursive>:
 8003e64:	4770      	bx	lr

08003e66 <__retarget_lock_acquire_recursive>:
 8003e66:	4770      	bx	lr

08003e68 <__retarget_lock_release_recursive>:
 8003e68:	4770      	bx	lr

08003e6a <memcpy>:
 8003e6a:	440a      	add	r2, r1
 8003e6c:	4291      	cmp	r1, r2
 8003e6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003e72:	d100      	bne.n	8003e76 <memcpy+0xc>
 8003e74:	4770      	bx	lr
 8003e76:	b510      	push	{r4, lr}
 8003e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e80:	4291      	cmp	r1, r2
 8003e82:	d1f9      	bne.n	8003e78 <memcpy+0xe>
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <__sfputc_r>:
 8003e86:	6893      	ldr	r3, [r2, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	b410      	push	{r4}
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	da08      	bge.n	8003ea4 <__sfputc_r+0x1e>
 8003e92:	6994      	ldr	r4, [r2, #24]
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	db01      	blt.n	8003e9c <__sfputc_r+0x16>
 8003e98:	290a      	cmp	r1, #10
 8003e9a:	d103      	bne.n	8003ea4 <__sfputc_r+0x1e>
 8003e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea0:	f000 bc5d 	b.w	800475e <__swbuf_r>
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	1c58      	adds	r0, r3, #1
 8003ea8:	6010      	str	r0, [r2, #0]
 8003eaa:	7019      	strb	r1, [r3, #0]
 8003eac:	4608      	mov	r0, r1
 8003eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <__sfputs_r>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	460f      	mov	r7, r1
 8003eba:	4614      	mov	r4, r2
 8003ebc:	18d5      	adds	r5, r2, r3
 8003ebe:	42ac      	cmp	r4, r5
 8003ec0:	d101      	bne.n	8003ec6 <__sfputs_r+0x12>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e007      	b.n	8003ed6 <__sfputs_r+0x22>
 8003ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eca:	463a      	mov	r2, r7
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f7ff ffda 	bl	8003e86 <__sfputc_r>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	d1f3      	bne.n	8003ebe <__sfputs_r+0xa>
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ed8 <_vfiprintf_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	460d      	mov	r5, r1
 8003ede:	b09d      	sub	sp, #116	@ 0x74
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	4698      	mov	r8, r3
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	b118      	cbz	r0, 8003ef0 <_vfiprintf_r+0x18>
 8003ee8:	6a03      	ldr	r3, [r0, #32]
 8003eea:	b90b      	cbnz	r3, 8003ef0 <_vfiprintf_r+0x18>
 8003eec:	f7ff fee2 	bl	8003cb4 <__sinit>
 8003ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ef2:	07d9      	lsls	r1, r3, #31
 8003ef4:	d405      	bmi.n	8003f02 <_vfiprintf_r+0x2a>
 8003ef6:	89ab      	ldrh	r3, [r5, #12]
 8003ef8:	059a      	lsls	r2, r3, #22
 8003efa:	d402      	bmi.n	8003f02 <_vfiprintf_r+0x2a>
 8003efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003efe:	f7ff ffb2 	bl	8003e66 <__retarget_lock_acquire_recursive>
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	071b      	lsls	r3, r3, #28
 8003f06:	d501      	bpl.n	8003f0c <_vfiprintf_r+0x34>
 8003f08:	692b      	ldr	r3, [r5, #16]
 8003f0a:	b99b      	cbnz	r3, 8003f34 <_vfiprintf_r+0x5c>
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f000 fc64 	bl	80047dc <__swsetup_r>
 8003f14:	b170      	cbz	r0, 8003f34 <_vfiprintf_r+0x5c>
 8003f16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f18:	07dc      	lsls	r4, r3, #31
 8003f1a:	d504      	bpl.n	8003f26 <_vfiprintf_r+0x4e>
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f20:	b01d      	add	sp, #116	@ 0x74
 8003f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f26:	89ab      	ldrh	r3, [r5, #12]
 8003f28:	0598      	lsls	r0, r3, #22
 8003f2a:	d4f7      	bmi.n	8003f1c <_vfiprintf_r+0x44>
 8003f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f2e:	f7ff ff9b 	bl	8003e68 <__retarget_lock_release_recursive>
 8003f32:	e7f3      	b.n	8003f1c <_vfiprintf_r+0x44>
 8003f34:	2300      	movs	r3, #0
 8003f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f38:	2320      	movs	r3, #32
 8003f3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f42:	2330      	movs	r3, #48	@ 0x30
 8003f44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80040f4 <_vfiprintf_r+0x21c>
 8003f48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f4c:	f04f 0901 	mov.w	r9, #1
 8003f50:	4623      	mov	r3, r4
 8003f52:	469a      	mov	sl, r3
 8003f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f58:	b10a      	cbz	r2, 8003f5e <_vfiprintf_r+0x86>
 8003f5a:	2a25      	cmp	r2, #37	@ 0x25
 8003f5c:	d1f9      	bne.n	8003f52 <_vfiprintf_r+0x7a>
 8003f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f62:	d00b      	beq.n	8003f7c <_vfiprintf_r+0xa4>
 8003f64:	465b      	mov	r3, fp
 8003f66:	4622      	mov	r2, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f7ff ffa2 	bl	8003eb4 <__sfputs_r>
 8003f70:	3001      	adds	r0, #1
 8003f72:	f000 80a7 	beq.w	80040c4 <_vfiprintf_r+0x1ec>
 8003f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f78:	445a      	add	r2, fp
 8003f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 809f 	beq.w	80040c4 <_vfiprintf_r+0x1ec>
 8003f86:	2300      	movs	r3, #0
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f90:	f10a 0a01 	add.w	sl, sl, #1
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	9307      	str	r3, [sp, #28]
 8003f98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f9e:	4654      	mov	r4, sl
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa6:	4853      	ldr	r0, [pc, #332]	@ (80040f4 <_vfiprintf_r+0x21c>)
 8003fa8:	f7fc f91a 	bl	80001e0 <memchr>
 8003fac:	9a04      	ldr	r2, [sp, #16]
 8003fae:	b9d8      	cbnz	r0, 8003fe8 <_vfiprintf_r+0x110>
 8003fb0:	06d1      	lsls	r1, r2, #27
 8003fb2:	bf44      	itt	mi
 8003fb4:	2320      	movmi	r3, #32
 8003fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fba:	0713      	lsls	r3, r2, #28
 8003fbc:	bf44      	itt	mi
 8003fbe:	232b      	movmi	r3, #43	@ 0x2b
 8003fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fca:	d015      	beq.n	8003ff8 <_vfiprintf_r+0x120>
 8003fcc:	9a07      	ldr	r2, [sp, #28]
 8003fce:	4654      	mov	r4, sl
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f04f 0c0a 	mov.w	ip, #10
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fdc:	3b30      	subs	r3, #48	@ 0x30
 8003fde:	2b09      	cmp	r3, #9
 8003fe0:	d94b      	bls.n	800407a <_vfiprintf_r+0x1a2>
 8003fe2:	b1b0      	cbz	r0, 8004012 <_vfiprintf_r+0x13a>
 8003fe4:	9207      	str	r2, [sp, #28]
 8003fe6:	e014      	b.n	8004012 <_vfiprintf_r+0x13a>
 8003fe8:	eba0 0308 	sub.w	r3, r0, r8
 8003fec:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	46a2      	mov	sl, r4
 8003ff6:	e7d2      	b.n	8003f9e <_vfiprintf_r+0xc6>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	1d19      	adds	r1, r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	9103      	str	r1, [sp, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	bfbb      	ittet	lt
 8004004:	425b      	neglt	r3, r3
 8004006:	f042 0202 	orrlt.w	r2, r2, #2
 800400a:	9307      	strge	r3, [sp, #28]
 800400c:	9307      	strlt	r3, [sp, #28]
 800400e:	bfb8      	it	lt
 8004010:	9204      	strlt	r2, [sp, #16]
 8004012:	7823      	ldrb	r3, [r4, #0]
 8004014:	2b2e      	cmp	r3, #46	@ 0x2e
 8004016:	d10a      	bne.n	800402e <_vfiprintf_r+0x156>
 8004018:	7863      	ldrb	r3, [r4, #1]
 800401a:	2b2a      	cmp	r3, #42	@ 0x2a
 800401c:	d132      	bne.n	8004084 <_vfiprintf_r+0x1ac>
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	1d1a      	adds	r2, r3, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	9203      	str	r2, [sp, #12]
 8004026:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800402a:	3402      	adds	r4, #2
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004104 <_vfiprintf_r+0x22c>
 8004032:	7821      	ldrb	r1, [r4, #0]
 8004034:	2203      	movs	r2, #3
 8004036:	4650      	mov	r0, sl
 8004038:	f7fc f8d2 	bl	80001e0 <memchr>
 800403c:	b138      	cbz	r0, 800404e <_vfiprintf_r+0x176>
 800403e:	9b04      	ldr	r3, [sp, #16]
 8004040:	eba0 000a 	sub.w	r0, r0, sl
 8004044:	2240      	movs	r2, #64	@ 0x40
 8004046:	4082      	lsls	r2, r0
 8004048:	4313      	orrs	r3, r2
 800404a:	3401      	adds	r4, #1
 800404c:	9304      	str	r3, [sp, #16]
 800404e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004052:	4829      	ldr	r0, [pc, #164]	@ (80040f8 <_vfiprintf_r+0x220>)
 8004054:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004058:	2206      	movs	r2, #6
 800405a:	f7fc f8c1 	bl	80001e0 <memchr>
 800405e:	2800      	cmp	r0, #0
 8004060:	d03f      	beq.n	80040e2 <_vfiprintf_r+0x20a>
 8004062:	4b26      	ldr	r3, [pc, #152]	@ (80040fc <_vfiprintf_r+0x224>)
 8004064:	bb1b      	cbnz	r3, 80040ae <_vfiprintf_r+0x1d6>
 8004066:	9b03      	ldr	r3, [sp, #12]
 8004068:	3307      	adds	r3, #7
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	3308      	adds	r3, #8
 8004070:	9303      	str	r3, [sp, #12]
 8004072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004074:	443b      	add	r3, r7
 8004076:	9309      	str	r3, [sp, #36]	@ 0x24
 8004078:	e76a      	b.n	8003f50 <_vfiprintf_r+0x78>
 800407a:	fb0c 3202 	mla	r2, ip, r2, r3
 800407e:	460c      	mov	r4, r1
 8004080:	2001      	movs	r0, #1
 8004082:	e7a8      	b.n	8003fd6 <_vfiprintf_r+0xfe>
 8004084:	2300      	movs	r3, #0
 8004086:	3401      	adds	r4, #1
 8004088:	9305      	str	r3, [sp, #20]
 800408a:	4619      	mov	r1, r3
 800408c:	f04f 0c0a 	mov.w	ip, #10
 8004090:	4620      	mov	r0, r4
 8004092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004096:	3a30      	subs	r2, #48	@ 0x30
 8004098:	2a09      	cmp	r2, #9
 800409a:	d903      	bls.n	80040a4 <_vfiprintf_r+0x1cc>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0c6      	beq.n	800402e <_vfiprintf_r+0x156>
 80040a0:	9105      	str	r1, [sp, #20]
 80040a2:	e7c4      	b.n	800402e <_vfiprintf_r+0x156>
 80040a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a8:	4604      	mov	r4, r0
 80040aa:	2301      	movs	r3, #1
 80040ac:	e7f0      	b.n	8004090 <_vfiprintf_r+0x1b8>
 80040ae:	ab03      	add	r3, sp, #12
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	462a      	mov	r2, r5
 80040b4:	4b12      	ldr	r3, [pc, #72]	@ (8004100 <_vfiprintf_r+0x228>)
 80040b6:	a904      	add	r1, sp, #16
 80040b8:	4630      	mov	r0, r6
 80040ba:	f3af 8000 	nop.w
 80040be:	4607      	mov	r7, r0
 80040c0:	1c78      	adds	r0, r7, #1
 80040c2:	d1d6      	bne.n	8004072 <_vfiprintf_r+0x19a>
 80040c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040c6:	07d9      	lsls	r1, r3, #31
 80040c8:	d405      	bmi.n	80040d6 <_vfiprintf_r+0x1fe>
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	059a      	lsls	r2, r3, #22
 80040ce:	d402      	bmi.n	80040d6 <_vfiprintf_r+0x1fe>
 80040d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040d2:	f7ff fec9 	bl	8003e68 <__retarget_lock_release_recursive>
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	065b      	lsls	r3, r3, #25
 80040da:	f53f af1f 	bmi.w	8003f1c <_vfiprintf_r+0x44>
 80040de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040e0:	e71e      	b.n	8003f20 <_vfiprintf_r+0x48>
 80040e2:	ab03      	add	r3, sp, #12
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	462a      	mov	r2, r5
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <_vfiprintf_r+0x228>)
 80040ea:	a904      	add	r1, sp, #16
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 f91b 	bl	8004328 <_printf_i>
 80040f2:	e7e4      	b.n	80040be <_vfiprintf_r+0x1e6>
 80040f4:	08004b94 	.word	0x08004b94
 80040f8:	08004b9e 	.word	0x08004b9e
 80040fc:	00000000 	.word	0x00000000
 8004100:	08003eb5 	.word	0x08003eb5
 8004104:	08004b9a 	.word	0x08004b9a

08004108 <sbrk_aligned>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4e0f      	ldr	r6, [pc, #60]	@ (8004148 <sbrk_aligned+0x40>)
 800410c:	460c      	mov	r4, r1
 800410e:	6831      	ldr	r1, [r6, #0]
 8004110:	4605      	mov	r5, r0
 8004112:	b911      	cbnz	r1, 800411a <sbrk_aligned+0x12>
 8004114:	f000 fc70 	bl	80049f8 <_sbrk_r>
 8004118:	6030      	str	r0, [r6, #0]
 800411a:	4621      	mov	r1, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f000 fc6b 	bl	80049f8 <_sbrk_r>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d103      	bne.n	800412e <sbrk_aligned+0x26>
 8004126:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800412a:	4620      	mov	r0, r4
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	1cc4      	adds	r4, r0, #3
 8004130:	f024 0403 	bic.w	r4, r4, #3
 8004134:	42a0      	cmp	r0, r4
 8004136:	d0f8      	beq.n	800412a <sbrk_aligned+0x22>
 8004138:	1a21      	subs	r1, r4, r0
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fc5c 	bl	80049f8 <_sbrk_r>
 8004140:	3001      	adds	r0, #1
 8004142:	d1f2      	bne.n	800412a <sbrk_aligned+0x22>
 8004144:	e7ef      	b.n	8004126 <sbrk_aligned+0x1e>
 8004146:	bf00      	nop
 8004148:	20000310 	.word	0x20000310

0800414c <_malloc_r>:
 800414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004150:	1ccd      	adds	r5, r1, #3
 8004152:	f025 0503 	bic.w	r5, r5, #3
 8004156:	3508      	adds	r5, #8
 8004158:	2d0c      	cmp	r5, #12
 800415a:	bf38      	it	cc
 800415c:	250c      	movcc	r5, #12
 800415e:	2d00      	cmp	r5, #0
 8004160:	4606      	mov	r6, r0
 8004162:	db01      	blt.n	8004168 <_malloc_r+0x1c>
 8004164:	42a9      	cmp	r1, r5
 8004166:	d904      	bls.n	8004172 <_malloc_r+0x26>
 8004168:	230c      	movs	r3, #12
 800416a:	6033      	str	r3, [r6, #0]
 800416c:	2000      	movs	r0, #0
 800416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004248 <_malloc_r+0xfc>
 8004176:	f000 faa3 	bl	80046c0 <__malloc_lock>
 800417a:	f8d8 3000 	ldr.w	r3, [r8]
 800417e:	461c      	mov	r4, r3
 8004180:	bb44      	cbnz	r4, 80041d4 <_malloc_r+0x88>
 8004182:	4629      	mov	r1, r5
 8004184:	4630      	mov	r0, r6
 8004186:	f7ff ffbf 	bl	8004108 <sbrk_aligned>
 800418a:	1c43      	adds	r3, r0, #1
 800418c:	4604      	mov	r4, r0
 800418e:	d158      	bne.n	8004242 <_malloc_r+0xf6>
 8004190:	f8d8 4000 	ldr.w	r4, [r8]
 8004194:	4627      	mov	r7, r4
 8004196:	2f00      	cmp	r7, #0
 8004198:	d143      	bne.n	8004222 <_malloc_r+0xd6>
 800419a:	2c00      	cmp	r4, #0
 800419c:	d04b      	beq.n	8004236 <_malloc_r+0xea>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4639      	mov	r1, r7
 80041a2:	4630      	mov	r0, r6
 80041a4:	eb04 0903 	add.w	r9, r4, r3
 80041a8:	f000 fc26 	bl	80049f8 <_sbrk_r>
 80041ac:	4581      	cmp	r9, r0
 80041ae:	d142      	bne.n	8004236 <_malloc_r+0xea>
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	1a6d      	subs	r5, r5, r1
 80041b4:	4629      	mov	r1, r5
 80041b6:	4630      	mov	r0, r6
 80041b8:	f7ff ffa6 	bl	8004108 <sbrk_aligned>
 80041bc:	3001      	adds	r0, #1
 80041be:	d03a      	beq.n	8004236 <_malloc_r+0xea>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	442b      	add	r3, r5
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	bb62      	cbnz	r2, 8004228 <_malloc_r+0xdc>
 80041ce:	f8c8 7000 	str.w	r7, [r8]
 80041d2:	e00f      	b.n	80041f4 <_malloc_r+0xa8>
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	1b52      	subs	r2, r2, r5
 80041d8:	d420      	bmi.n	800421c <_malloc_r+0xd0>
 80041da:	2a0b      	cmp	r2, #11
 80041dc:	d917      	bls.n	800420e <_malloc_r+0xc2>
 80041de:	1961      	adds	r1, r4, r5
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	6025      	str	r5, [r4, #0]
 80041e4:	bf18      	it	ne
 80041e6:	6059      	strne	r1, [r3, #4]
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	bf08      	it	eq
 80041ec:	f8c8 1000 	streq.w	r1, [r8]
 80041f0:	5162      	str	r2, [r4, r5]
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 fa69 	bl	80046cc <__malloc_unlock>
 80041fa:	f104 000b 	add.w	r0, r4, #11
 80041fe:	1d23      	adds	r3, r4, #4
 8004200:	f020 0007 	bic.w	r0, r0, #7
 8004204:	1ac2      	subs	r2, r0, r3
 8004206:	bf1c      	itt	ne
 8004208:	1a1b      	subne	r3, r3, r0
 800420a:	50a3      	strne	r3, [r4, r2]
 800420c:	e7af      	b.n	800416e <_malloc_r+0x22>
 800420e:	6862      	ldr	r2, [r4, #4]
 8004210:	42a3      	cmp	r3, r4
 8004212:	bf0c      	ite	eq
 8004214:	f8c8 2000 	streq.w	r2, [r8]
 8004218:	605a      	strne	r2, [r3, #4]
 800421a:	e7eb      	b.n	80041f4 <_malloc_r+0xa8>
 800421c:	4623      	mov	r3, r4
 800421e:	6864      	ldr	r4, [r4, #4]
 8004220:	e7ae      	b.n	8004180 <_malloc_r+0x34>
 8004222:	463c      	mov	r4, r7
 8004224:	687f      	ldr	r7, [r7, #4]
 8004226:	e7b6      	b.n	8004196 <_malloc_r+0x4a>
 8004228:	461a      	mov	r2, r3
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	42a3      	cmp	r3, r4
 800422e:	d1fb      	bne.n	8004228 <_malloc_r+0xdc>
 8004230:	2300      	movs	r3, #0
 8004232:	6053      	str	r3, [r2, #4]
 8004234:	e7de      	b.n	80041f4 <_malloc_r+0xa8>
 8004236:	230c      	movs	r3, #12
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	4630      	mov	r0, r6
 800423c:	f000 fa46 	bl	80046cc <__malloc_unlock>
 8004240:	e794      	b.n	800416c <_malloc_r+0x20>
 8004242:	6005      	str	r5, [r0, #0]
 8004244:	e7d6      	b.n	80041f4 <_malloc_r+0xa8>
 8004246:	bf00      	nop
 8004248:	20000314 	.word	0x20000314

0800424c <_printf_common>:
 800424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004250:	4616      	mov	r6, r2
 8004252:	4698      	mov	r8, r3
 8004254:	688a      	ldr	r2, [r1, #8]
 8004256:	690b      	ldr	r3, [r1, #16]
 8004258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800425c:	4293      	cmp	r3, r2
 800425e:	bfb8      	it	lt
 8004260:	4613      	movlt	r3, r2
 8004262:	6033      	str	r3, [r6, #0]
 8004264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004268:	4607      	mov	r7, r0
 800426a:	460c      	mov	r4, r1
 800426c:	b10a      	cbz	r2, 8004272 <_printf_common+0x26>
 800426e:	3301      	adds	r3, #1
 8004270:	6033      	str	r3, [r6, #0]
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	0699      	lsls	r1, r3, #26
 8004276:	bf42      	ittt	mi
 8004278:	6833      	ldrmi	r3, [r6, #0]
 800427a:	3302      	addmi	r3, #2
 800427c:	6033      	strmi	r3, [r6, #0]
 800427e:	6825      	ldr	r5, [r4, #0]
 8004280:	f015 0506 	ands.w	r5, r5, #6
 8004284:	d106      	bne.n	8004294 <_printf_common+0x48>
 8004286:	f104 0a19 	add.w	sl, r4, #25
 800428a:	68e3      	ldr	r3, [r4, #12]
 800428c:	6832      	ldr	r2, [r6, #0]
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	42ab      	cmp	r3, r5
 8004292:	dc26      	bgt.n	80042e2 <_printf_common+0x96>
 8004294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	3b00      	subs	r3, #0
 800429c:	bf18      	it	ne
 800429e:	2301      	movne	r3, #1
 80042a0:	0692      	lsls	r2, r2, #26
 80042a2:	d42b      	bmi.n	80042fc <_printf_common+0xb0>
 80042a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042a8:	4641      	mov	r1, r8
 80042aa:	4638      	mov	r0, r7
 80042ac:	47c8      	blx	r9
 80042ae:	3001      	adds	r0, #1
 80042b0:	d01e      	beq.n	80042f0 <_printf_common+0xa4>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	f003 0306 	and.w	r3, r3, #6
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf02      	ittt	eq
 80042be:	68e5      	ldreq	r5, [r4, #12]
 80042c0:	6833      	ldreq	r3, [r6, #0]
 80042c2:	1aed      	subeq	r5, r5, r3
 80042c4:	68a3      	ldr	r3, [r4, #8]
 80042c6:	bf0c      	ite	eq
 80042c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042cc:	2500      	movne	r5, #0
 80042ce:	4293      	cmp	r3, r2
 80042d0:	bfc4      	itt	gt
 80042d2:	1a9b      	subgt	r3, r3, r2
 80042d4:	18ed      	addgt	r5, r5, r3
 80042d6:	2600      	movs	r6, #0
 80042d8:	341a      	adds	r4, #26
 80042da:	42b5      	cmp	r5, r6
 80042dc:	d11a      	bne.n	8004314 <_printf_common+0xc8>
 80042de:	2000      	movs	r0, #0
 80042e0:	e008      	b.n	80042f4 <_printf_common+0xa8>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4652      	mov	r2, sl
 80042e6:	4641      	mov	r1, r8
 80042e8:	4638      	mov	r0, r7
 80042ea:	47c8      	blx	r9
 80042ec:	3001      	adds	r0, #1
 80042ee:	d103      	bne.n	80042f8 <_printf_common+0xac>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f8:	3501      	adds	r5, #1
 80042fa:	e7c6      	b.n	800428a <_printf_common+0x3e>
 80042fc:	18e1      	adds	r1, r4, r3
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	2030      	movs	r0, #48	@ 0x30
 8004302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004306:	4422      	add	r2, r4
 8004308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800430c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004310:	3302      	adds	r3, #2
 8004312:	e7c7      	b.n	80042a4 <_printf_common+0x58>
 8004314:	2301      	movs	r3, #1
 8004316:	4622      	mov	r2, r4
 8004318:	4641      	mov	r1, r8
 800431a:	4638      	mov	r0, r7
 800431c:	47c8      	blx	r9
 800431e:	3001      	adds	r0, #1
 8004320:	d0e6      	beq.n	80042f0 <_printf_common+0xa4>
 8004322:	3601      	adds	r6, #1
 8004324:	e7d9      	b.n	80042da <_printf_common+0x8e>
	...

08004328 <_printf_i>:
 8004328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	7e0f      	ldrb	r7, [r1, #24]
 800432e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004330:	2f78      	cmp	r7, #120	@ 0x78
 8004332:	4691      	mov	r9, r2
 8004334:	4680      	mov	r8, r0
 8004336:	460c      	mov	r4, r1
 8004338:	469a      	mov	sl, r3
 800433a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800433e:	d807      	bhi.n	8004350 <_printf_i+0x28>
 8004340:	2f62      	cmp	r7, #98	@ 0x62
 8004342:	d80a      	bhi.n	800435a <_printf_i+0x32>
 8004344:	2f00      	cmp	r7, #0
 8004346:	f000 80d2 	beq.w	80044ee <_printf_i+0x1c6>
 800434a:	2f58      	cmp	r7, #88	@ 0x58
 800434c:	f000 80b9 	beq.w	80044c2 <_printf_i+0x19a>
 8004350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004358:	e03a      	b.n	80043d0 <_printf_i+0xa8>
 800435a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800435e:	2b15      	cmp	r3, #21
 8004360:	d8f6      	bhi.n	8004350 <_printf_i+0x28>
 8004362:	a101      	add	r1, pc, #4	@ (adr r1, 8004368 <_printf_i+0x40>)
 8004364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043d5 	.word	0x080043d5
 8004370:	08004351 	.word	0x08004351
 8004374:	08004351 	.word	0x08004351
 8004378:	08004351 	.word	0x08004351
 800437c:	08004351 	.word	0x08004351
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004351 	.word	0x08004351
 8004388:	08004351 	.word	0x08004351
 800438c:	08004351 	.word	0x08004351
 8004390:	08004351 	.word	0x08004351
 8004394:	080044d5 	.word	0x080044d5
 8004398:	080043ff 	.word	0x080043ff
 800439c:	0800448f 	.word	0x0800448f
 80043a0:	08004351 	.word	0x08004351
 80043a4:	08004351 	.word	0x08004351
 80043a8:	080044f7 	.word	0x080044f7
 80043ac:	08004351 	.word	0x08004351
 80043b0:	080043ff 	.word	0x080043ff
 80043b4:	08004351 	.word	0x08004351
 80043b8:	08004351 	.word	0x08004351
 80043bc:	08004497 	.word	0x08004497
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6032      	str	r2, [r6, #0]
 80043c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e09d      	b.n	8004510 <_printf_i+0x1e8>
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	6820      	ldr	r0, [r4, #0]
 80043d8:	1d19      	adds	r1, r3, #4
 80043da:	6031      	str	r1, [r6, #0]
 80043dc:	0606      	lsls	r6, r0, #24
 80043de:	d501      	bpl.n	80043e4 <_printf_i+0xbc>
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	e003      	b.n	80043ec <_printf_i+0xc4>
 80043e4:	0645      	lsls	r5, r0, #25
 80043e6:	d5fb      	bpl.n	80043e0 <_printf_i+0xb8>
 80043e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	da03      	bge.n	80043f8 <_printf_i+0xd0>
 80043f0:	232d      	movs	r3, #45	@ 0x2d
 80043f2:	426d      	negs	r5, r5
 80043f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043f8:	4859      	ldr	r0, [pc, #356]	@ (8004560 <_printf_i+0x238>)
 80043fa:	230a      	movs	r3, #10
 80043fc:	e011      	b.n	8004422 <_printf_i+0xfa>
 80043fe:	6821      	ldr	r1, [r4, #0]
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	0608      	lsls	r0, r1, #24
 8004404:	f853 5b04 	ldr.w	r5, [r3], #4
 8004408:	d402      	bmi.n	8004410 <_printf_i+0xe8>
 800440a:	0649      	lsls	r1, r1, #25
 800440c:	bf48      	it	mi
 800440e:	b2ad      	uxthmi	r5, r5
 8004410:	2f6f      	cmp	r7, #111	@ 0x6f
 8004412:	4853      	ldr	r0, [pc, #332]	@ (8004560 <_printf_i+0x238>)
 8004414:	6033      	str	r3, [r6, #0]
 8004416:	bf14      	ite	ne
 8004418:	230a      	movne	r3, #10
 800441a:	2308      	moveq	r3, #8
 800441c:	2100      	movs	r1, #0
 800441e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004422:	6866      	ldr	r6, [r4, #4]
 8004424:	60a6      	str	r6, [r4, #8]
 8004426:	2e00      	cmp	r6, #0
 8004428:	bfa2      	ittt	ge
 800442a:	6821      	ldrge	r1, [r4, #0]
 800442c:	f021 0104 	bicge.w	r1, r1, #4
 8004430:	6021      	strge	r1, [r4, #0]
 8004432:	b90d      	cbnz	r5, 8004438 <_printf_i+0x110>
 8004434:	2e00      	cmp	r6, #0
 8004436:	d04b      	beq.n	80044d0 <_printf_i+0x1a8>
 8004438:	4616      	mov	r6, r2
 800443a:	fbb5 f1f3 	udiv	r1, r5, r3
 800443e:	fb03 5711 	mls	r7, r3, r1, r5
 8004442:	5dc7      	ldrb	r7, [r0, r7]
 8004444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004448:	462f      	mov	r7, r5
 800444a:	42bb      	cmp	r3, r7
 800444c:	460d      	mov	r5, r1
 800444e:	d9f4      	bls.n	800443a <_printf_i+0x112>
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10b      	bne.n	800446c <_printf_i+0x144>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	07df      	lsls	r7, r3, #31
 8004458:	d508      	bpl.n	800446c <_printf_i+0x144>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	6861      	ldr	r1, [r4, #4]
 800445e:	4299      	cmp	r1, r3
 8004460:	bfde      	ittt	le
 8004462:	2330      	movle	r3, #48	@ 0x30
 8004464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004468:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800446c:	1b92      	subs	r2, r2, r6
 800446e:	6122      	str	r2, [r4, #16]
 8004470:	f8cd a000 	str.w	sl, [sp]
 8004474:	464b      	mov	r3, r9
 8004476:	aa03      	add	r2, sp, #12
 8004478:	4621      	mov	r1, r4
 800447a:	4640      	mov	r0, r8
 800447c:	f7ff fee6 	bl	800424c <_printf_common>
 8004480:	3001      	adds	r0, #1
 8004482:	d14a      	bne.n	800451a <_printf_i+0x1f2>
 8004484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004488:	b004      	add	sp, #16
 800448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	f043 0320 	orr.w	r3, r3, #32
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	4833      	ldr	r0, [pc, #204]	@ (8004564 <_printf_i+0x23c>)
 8004498:	2778      	movs	r7, #120	@ 0x78
 800449a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	6831      	ldr	r1, [r6, #0]
 80044a2:	061f      	lsls	r7, r3, #24
 80044a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80044a8:	d402      	bmi.n	80044b0 <_printf_i+0x188>
 80044aa:	065f      	lsls	r7, r3, #25
 80044ac:	bf48      	it	mi
 80044ae:	b2ad      	uxthmi	r5, r5
 80044b0:	6031      	str	r1, [r6, #0]
 80044b2:	07d9      	lsls	r1, r3, #31
 80044b4:	bf44      	itt	mi
 80044b6:	f043 0320 	orrmi.w	r3, r3, #32
 80044ba:	6023      	strmi	r3, [r4, #0]
 80044bc:	b11d      	cbz	r5, 80044c6 <_printf_i+0x19e>
 80044be:	2310      	movs	r3, #16
 80044c0:	e7ac      	b.n	800441c <_printf_i+0xf4>
 80044c2:	4827      	ldr	r0, [pc, #156]	@ (8004560 <_printf_i+0x238>)
 80044c4:	e7e9      	b.n	800449a <_printf_i+0x172>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f023 0320 	bic.w	r3, r3, #32
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	e7f6      	b.n	80044be <_printf_i+0x196>
 80044d0:	4616      	mov	r6, r2
 80044d2:	e7bd      	b.n	8004450 <_printf_i+0x128>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	6961      	ldr	r1, [r4, #20]
 80044da:	1d18      	adds	r0, r3, #4
 80044dc:	6030      	str	r0, [r6, #0]
 80044de:	062e      	lsls	r6, r5, #24
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	d501      	bpl.n	80044e8 <_printf_i+0x1c0>
 80044e4:	6019      	str	r1, [r3, #0]
 80044e6:	e002      	b.n	80044ee <_printf_i+0x1c6>
 80044e8:	0668      	lsls	r0, r5, #25
 80044ea:	d5fb      	bpl.n	80044e4 <_printf_i+0x1bc>
 80044ec:	8019      	strh	r1, [r3, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	4616      	mov	r6, r2
 80044f4:	e7bc      	b.n	8004470 <_printf_i+0x148>
 80044f6:	6833      	ldr	r3, [r6, #0]
 80044f8:	1d1a      	adds	r2, r3, #4
 80044fa:	6032      	str	r2, [r6, #0]
 80044fc:	681e      	ldr	r6, [r3, #0]
 80044fe:	6862      	ldr	r2, [r4, #4]
 8004500:	2100      	movs	r1, #0
 8004502:	4630      	mov	r0, r6
 8004504:	f7fb fe6c 	bl	80001e0 <memchr>
 8004508:	b108      	cbz	r0, 800450e <_printf_i+0x1e6>
 800450a:	1b80      	subs	r0, r0, r6
 800450c:	6060      	str	r0, [r4, #4]
 800450e:	6863      	ldr	r3, [r4, #4]
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	2300      	movs	r3, #0
 8004514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004518:	e7aa      	b.n	8004470 <_printf_i+0x148>
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	4632      	mov	r2, r6
 800451e:	4649      	mov	r1, r9
 8004520:	4640      	mov	r0, r8
 8004522:	47d0      	blx	sl
 8004524:	3001      	adds	r0, #1
 8004526:	d0ad      	beq.n	8004484 <_printf_i+0x15c>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	079b      	lsls	r3, r3, #30
 800452c:	d413      	bmi.n	8004556 <_printf_i+0x22e>
 800452e:	68e0      	ldr	r0, [r4, #12]
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	4298      	cmp	r0, r3
 8004534:	bfb8      	it	lt
 8004536:	4618      	movlt	r0, r3
 8004538:	e7a6      	b.n	8004488 <_printf_i+0x160>
 800453a:	2301      	movs	r3, #1
 800453c:	4632      	mov	r2, r6
 800453e:	4649      	mov	r1, r9
 8004540:	4640      	mov	r0, r8
 8004542:	47d0      	blx	sl
 8004544:	3001      	adds	r0, #1
 8004546:	d09d      	beq.n	8004484 <_printf_i+0x15c>
 8004548:	3501      	adds	r5, #1
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	9903      	ldr	r1, [sp, #12]
 800454e:	1a5b      	subs	r3, r3, r1
 8004550:	42ab      	cmp	r3, r5
 8004552:	dcf2      	bgt.n	800453a <_printf_i+0x212>
 8004554:	e7eb      	b.n	800452e <_printf_i+0x206>
 8004556:	2500      	movs	r5, #0
 8004558:	f104 0619 	add.w	r6, r4, #25
 800455c:	e7f5      	b.n	800454a <_printf_i+0x222>
 800455e:	bf00      	nop
 8004560:	08004ba5 	.word	0x08004ba5
 8004564:	08004bb6 	.word	0x08004bb6

08004568 <__sflush_r>:
 8004568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004570:	0716      	lsls	r6, r2, #28
 8004572:	4605      	mov	r5, r0
 8004574:	460c      	mov	r4, r1
 8004576:	d454      	bmi.n	8004622 <__sflush_r+0xba>
 8004578:	684b      	ldr	r3, [r1, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dc02      	bgt.n	8004584 <__sflush_r+0x1c>
 800457e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	dd48      	ble.n	8004616 <__sflush_r+0xae>
 8004584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004586:	2e00      	cmp	r6, #0
 8004588:	d045      	beq.n	8004616 <__sflush_r+0xae>
 800458a:	2300      	movs	r3, #0
 800458c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004590:	682f      	ldr	r7, [r5, #0]
 8004592:	6a21      	ldr	r1, [r4, #32]
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	d030      	beq.n	80045fa <__sflush_r+0x92>
 8004598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	0759      	lsls	r1, r3, #29
 800459e:	d505      	bpl.n	80045ac <__sflush_r+0x44>
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045a6:	b10b      	cbz	r3, 80045ac <__sflush_r+0x44>
 80045a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045b0:	6a21      	ldr	r1, [r4, #32]
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b0      	blx	r6
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	d106      	bne.n	80045ca <__sflush_r+0x62>
 80045bc:	6829      	ldr	r1, [r5, #0]
 80045be:	291d      	cmp	r1, #29
 80045c0:	d82b      	bhi.n	800461a <__sflush_r+0xb2>
 80045c2:	4a2a      	ldr	r2, [pc, #168]	@ (800466c <__sflush_r+0x104>)
 80045c4:	410a      	asrs	r2, r1
 80045c6:	07d6      	lsls	r6, r2, #31
 80045c8:	d427      	bmi.n	800461a <__sflush_r+0xb2>
 80045ca:	2200      	movs	r2, #0
 80045cc:	6062      	str	r2, [r4, #4]
 80045ce:	04d9      	lsls	r1, r3, #19
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	6022      	str	r2, [r4, #0]
 80045d4:	d504      	bpl.n	80045e0 <__sflush_r+0x78>
 80045d6:	1c42      	adds	r2, r0, #1
 80045d8:	d101      	bne.n	80045de <__sflush_r+0x76>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	b903      	cbnz	r3, 80045e0 <__sflush_r+0x78>
 80045de:	6560      	str	r0, [r4, #84]	@ 0x54
 80045e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045e2:	602f      	str	r7, [r5, #0]
 80045e4:	b1b9      	cbz	r1, 8004616 <__sflush_r+0xae>
 80045e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045ea:	4299      	cmp	r1, r3
 80045ec:	d002      	beq.n	80045f4 <__sflush_r+0x8c>
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fa24 	bl	8004a3c <_free_r>
 80045f4:	2300      	movs	r3, #0
 80045f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80045f8:	e00d      	b.n	8004616 <__sflush_r+0xae>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b0      	blx	r6
 8004600:	4602      	mov	r2, r0
 8004602:	1c50      	adds	r0, r2, #1
 8004604:	d1c9      	bne.n	800459a <__sflush_r+0x32>
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0c6      	beq.n	800459a <__sflush_r+0x32>
 800460c:	2b1d      	cmp	r3, #29
 800460e:	d001      	beq.n	8004614 <__sflush_r+0xac>
 8004610:	2b16      	cmp	r3, #22
 8004612:	d11e      	bne.n	8004652 <__sflush_r+0xea>
 8004614:	602f      	str	r7, [r5, #0]
 8004616:	2000      	movs	r0, #0
 8004618:	e022      	b.n	8004660 <__sflush_r+0xf8>
 800461a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800461e:	b21b      	sxth	r3, r3
 8004620:	e01b      	b.n	800465a <__sflush_r+0xf2>
 8004622:	690f      	ldr	r7, [r1, #16]
 8004624:	2f00      	cmp	r7, #0
 8004626:	d0f6      	beq.n	8004616 <__sflush_r+0xae>
 8004628:	0793      	lsls	r3, r2, #30
 800462a:	680e      	ldr	r6, [r1, #0]
 800462c:	bf08      	it	eq
 800462e:	694b      	ldreq	r3, [r1, #20]
 8004630:	600f      	str	r7, [r1, #0]
 8004632:	bf18      	it	ne
 8004634:	2300      	movne	r3, #0
 8004636:	eba6 0807 	sub.w	r8, r6, r7
 800463a:	608b      	str	r3, [r1, #8]
 800463c:	f1b8 0f00 	cmp.w	r8, #0
 8004640:	dde9      	ble.n	8004616 <__sflush_r+0xae>
 8004642:	6a21      	ldr	r1, [r4, #32]
 8004644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004646:	4643      	mov	r3, r8
 8004648:	463a      	mov	r2, r7
 800464a:	4628      	mov	r0, r5
 800464c:	47b0      	blx	r6
 800464e:	2800      	cmp	r0, #0
 8004650:	dc08      	bgt.n	8004664 <__sflush_r+0xfc>
 8004652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004664:	4407      	add	r7, r0
 8004666:	eba8 0800 	sub.w	r8, r8, r0
 800466a:	e7e7      	b.n	800463c <__sflush_r+0xd4>
 800466c:	dfbffffe 	.word	0xdfbffffe

08004670 <_fflush_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	690b      	ldr	r3, [r1, #16]
 8004674:	4605      	mov	r5, r0
 8004676:	460c      	mov	r4, r1
 8004678:	b913      	cbnz	r3, 8004680 <_fflush_r+0x10>
 800467a:	2500      	movs	r5, #0
 800467c:	4628      	mov	r0, r5
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	b118      	cbz	r0, 800468a <_fflush_r+0x1a>
 8004682:	6a03      	ldr	r3, [r0, #32]
 8004684:	b90b      	cbnz	r3, 800468a <_fflush_r+0x1a>
 8004686:	f7ff fb15 	bl	8003cb4 <__sinit>
 800468a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f3      	beq.n	800467a <_fflush_r+0xa>
 8004692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004694:	07d0      	lsls	r0, r2, #31
 8004696:	d404      	bmi.n	80046a2 <_fflush_r+0x32>
 8004698:	0599      	lsls	r1, r3, #22
 800469a:	d402      	bmi.n	80046a2 <_fflush_r+0x32>
 800469c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800469e:	f7ff fbe2 	bl	8003e66 <__retarget_lock_acquire_recursive>
 80046a2:	4628      	mov	r0, r5
 80046a4:	4621      	mov	r1, r4
 80046a6:	f7ff ff5f 	bl	8004568 <__sflush_r>
 80046aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046ac:	07da      	lsls	r2, r3, #31
 80046ae:	4605      	mov	r5, r0
 80046b0:	d4e4      	bmi.n	800467c <_fflush_r+0xc>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	059b      	lsls	r3, r3, #22
 80046b6:	d4e1      	bmi.n	800467c <_fflush_r+0xc>
 80046b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ba:	f7ff fbd5 	bl	8003e68 <__retarget_lock_release_recursive>
 80046be:	e7dd      	b.n	800467c <_fflush_r+0xc>

080046c0 <__malloc_lock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	@ (80046c8 <__malloc_lock+0x8>)
 80046c2:	f7ff bbd0 	b.w	8003e66 <__retarget_lock_acquire_recursive>
 80046c6:	bf00      	nop
 80046c8:	2000030c 	.word	0x2000030c

080046cc <__malloc_unlock>:
 80046cc:	4801      	ldr	r0, [pc, #4]	@ (80046d4 <__malloc_unlock+0x8>)
 80046ce:	f7ff bbcb 	b.w	8003e68 <__retarget_lock_release_recursive>
 80046d2:	bf00      	nop
 80046d4:	2000030c 	.word	0x2000030c

080046d8 <__sread>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	460c      	mov	r4, r1
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	f000 f978 	bl	80049d4 <_read_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bfab      	itete	ge
 80046e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046ea:	89a3      	ldrhlt	r3, [r4, #12]
 80046ec:	181b      	addge	r3, r3, r0
 80046ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046f2:	bfac      	ite	ge
 80046f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046f6:	81a3      	strhlt	r3, [r4, #12]
 80046f8:	bd10      	pop	{r4, pc}

080046fa <__swrite>:
 80046fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fe:	461f      	mov	r7, r3
 8004700:	898b      	ldrh	r3, [r1, #12]
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	4605      	mov	r5, r0
 8004706:	460c      	mov	r4, r1
 8004708:	4616      	mov	r6, r2
 800470a:	d505      	bpl.n	8004718 <__swrite+0x1e>
 800470c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004710:	2302      	movs	r3, #2
 8004712:	2200      	movs	r2, #0
 8004714:	f000 f94c 	bl	80049b0 <_lseek_r>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800471e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	4632      	mov	r2, r6
 8004726:	463b      	mov	r3, r7
 8004728:	4628      	mov	r0, r5
 800472a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800472e:	f000 b973 	b.w	8004a18 <_write_r>

08004732 <__sseek>:
 8004732:	b510      	push	{r4, lr}
 8004734:	460c      	mov	r4, r1
 8004736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473a:	f000 f939 	bl	80049b0 <_lseek_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	bf15      	itete	ne
 8004744:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800474a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800474e:	81a3      	strheq	r3, [r4, #12]
 8004750:	bf18      	it	ne
 8004752:	81a3      	strhne	r3, [r4, #12]
 8004754:	bd10      	pop	{r4, pc}

08004756 <__sclose>:
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 b8f7 	b.w	800494c <_close_r>

0800475e <__swbuf_r>:
 800475e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004760:	460e      	mov	r6, r1
 8004762:	4614      	mov	r4, r2
 8004764:	4605      	mov	r5, r0
 8004766:	b118      	cbz	r0, 8004770 <__swbuf_r+0x12>
 8004768:	6a03      	ldr	r3, [r0, #32]
 800476a:	b90b      	cbnz	r3, 8004770 <__swbuf_r+0x12>
 800476c:	f7ff faa2 	bl	8003cb4 <__sinit>
 8004770:	69a3      	ldr	r3, [r4, #24]
 8004772:	60a3      	str	r3, [r4, #8]
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	071a      	lsls	r2, r3, #28
 8004778:	d501      	bpl.n	800477e <__swbuf_r+0x20>
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	b943      	cbnz	r3, 8004790 <__swbuf_r+0x32>
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 f82b 	bl	80047dc <__swsetup_r>
 8004786:	b118      	cbz	r0, 8004790 <__swbuf_r+0x32>
 8004788:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800478c:	4638      	mov	r0, r7
 800478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	6922      	ldr	r2, [r4, #16]
 8004794:	1a98      	subs	r0, r3, r2
 8004796:	6963      	ldr	r3, [r4, #20]
 8004798:	b2f6      	uxtb	r6, r6
 800479a:	4283      	cmp	r3, r0
 800479c:	4637      	mov	r7, r6
 800479e:	dc05      	bgt.n	80047ac <__swbuf_r+0x4e>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	f7ff ff64 	bl	8004670 <_fflush_r>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1ed      	bne.n	8004788 <__swbuf_r+0x2a>
 80047ac:	68a3      	ldr	r3, [r4, #8]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	60a3      	str	r3, [r4, #8]
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	6022      	str	r2, [r4, #0]
 80047b8:	701e      	strb	r6, [r3, #0]
 80047ba:	6962      	ldr	r2, [r4, #20]
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	429a      	cmp	r2, r3
 80047c0:	d004      	beq.n	80047cc <__swbuf_r+0x6e>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	07db      	lsls	r3, r3, #31
 80047c6:	d5e1      	bpl.n	800478c <__swbuf_r+0x2e>
 80047c8:	2e0a      	cmp	r6, #10
 80047ca:	d1df      	bne.n	800478c <__swbuf_r+0x2e>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f7ff ff4e 	bl	8004670 <_fflush_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0d9      	beq.n	800478c <__swbuf_r+0x2e>
 80047d8:	e7d6      	b.n	8004788 <__swbuf_r+0x2a>
	...

080047dc <__swsetup_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4b29      	ldr	r3, [pc, #164]	@ (8004884 <__swsetup_r+0xa8>)
 80047e0:	4605      	mov	r5, r0
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	460c      	mov	r4, r1
 80047e6:	b118      	cbz	r0, 80047f0 <__swsetup_r+0x14>
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	b90b      	cbnz	r3, 80047f0 <__swsetup_r+0x14>
 80047ec:	f7ff fa62 	bl	8003cb4 <__sinit>
 80047f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f4:	0719      	lsls	r1, r3, #28
 80047f6:	d422      	bmi.n	800483e <__swsetup_r+0x62>
 80047f8:	06da      	lsls	r2, r3, #27
 80047fa:	d407      	bmi.n	800480c <__swsetup_r+0x30>
 80047fc:	2209      	movs	r2, #9
 80047fe:	602a      	str	r2, [r5, #0]
 8004800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800480a:	e033      	b.n	8004874 <__swsetup_r+0x98>
 800480c:	0758      	lsls	r0, r3, #29
 800480e:	d512      	bpl.n	8004836 <__swsetup_r+0x5a>
 8004810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004812:	b141      	cbz	r1, 8004826 <__swsetup_r+0x4a>
 8004814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004818:	4299      	cmp	r1, r3
 800481a:	d002      	beq.n	8004822 <__swsetup_r+0x46>
 800481c:	4628      	mov	r0, r5
 800481e:	f000 f90d 	bl	8004a3c <_free_r>
 8004822:	2300      	movs	r3, #0
 8004824:	6363      	str	r3, [r4, #52]	@ 0x34
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	2300      	movs	r3, #0
 8004830:	6063      	str	r3, [r4, #4]
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f043 0308 	orr.w	r3, r3, #8
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	b94b      	cbnz	r3, 8004856 <__swsetup_r+0x7a>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800484c:	d003      	beq.n	8004856 <__swsetup_r+0x7a>
 800484e:	4621      	mov	r1, r4
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f83f 	bl	80048d4 <__smakebuf_r>
 8004856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800485a:	f013 0201 	ands.w	r2, r3, #1
 800485e:	d00a      	beq.n	8004876 <__swsetup_r+0x9a>
 8004860:	2200      	movs	r2, #0
 8004862:	60a2      	str	r2, [r4, #8]
 8004864:	6962      	ldr	r2, [r4, #20]
 8004866:	4252      	negs	r2, r2
 8004868:	61a2      	str	r2, [r4, #24]
 800486a:	6922      	ldr	r2, [r4, #16]
 800486c:	b942      	cbnz	r2, 8004880 <__swsetup_r+0xa4>
 800486e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004872:	d1c5      	bne.n	8004800 <__swsetup_r+0x24>
 8004874:	bd38      	pop	{r3, r4, r5, pc}
 8004876:	0799      	lsls	r1, r3, #30
 8004878:	bf58      	it	pl
 800487a:	6962      	ldrpl	r2, [r4, #20]
 800487c:	60a2      	str	r2, [r4, #8]
 800487e:	e7f4      	b.n	800486a <__swsetup_r+0x8e>
 8004880:	2000      	movs	r0, #0
 8004882:	e7f7      	b.n	8004874 <__swsetup_r+0x98>
 8004884:	20000018 	.word	0x20000018

08004888 <__swhatbuf_r>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	460c      	mov	r4, r1
 800488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004890:	2900      	cmp	r1, #0
 8004892:	b096      	sub	sp, #88	@ 0x58
 8004894:	4615      	mov	r5, r2
 8004896:	461e      	mov	r6, r3
 8004898:	da0d      	bge.n	80048b6 <__swhatbuf_r+0x2e>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	bf14      	ite	ne
 80048a6:	2340      	movne	r3, #64	@ 0x40
 80048a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048ac:	2000      	movs	r0, #0
 80048ae:	6031      	str	r1, [r6, #0]
 80048b0:	602b      	str	r3, [r5, #0]
 80048b2:	b016      	add	sp, #88	@ 0x58
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	466a      	mov	r2, sp
 80048b8:	f000 f858 	bl	800496c <_fstat_r>
 80048bc:	2800      	cmp	r0, #0
 80048be:	dbec      	blt.n	800489a <__swhatbuf_r+0x12>
 80048c0:	9901      	ldr	r1, [sp, #4]
 80048c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048ca:	4259      	negs	r1, r3
 80048cc:	4159      	adcs	r1, r3
 80048ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048d2:	e7eb      	b.n	80048ac <__swhatbuf_r+0x24>

080048d4 <__smakebuf_r>:
 80048d4:	898b      	ldrh	r3, [r1, #12]
 80048d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048d8:	079d      	lsls	r5, r3, #30
 80048da:	4606      	mov	r6, r0
 80048dc:	460c      	mov	r4, r1
 80048de:	d507      	bpl.n	80048f0 <__smakebuf_r+0x1c>
 80048e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	6123      	str	r3, [r4, #16]
 80048e8:	2301      	movs	r3, #1
 80048ea:	6163      	str	r3, [r4, #20]
 80048ec:	b003      	add	sp, #12
 80048ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f0:	ab01      	add	r3, sp, #4
 80048f2:	466a      	mov	r2, sp
 80048f4:	f7ff ffc8 	bl	8004888 <__swhatbuf_r>
 80048f8:	9f00      	ldr	r7, [sp, #0]
 80048fa:	4605      	mov	r5, r0
 80048fc:	4639      	mov	r1, r7
 80048fe:	4630      	mov	r0, r6
 8004900:	f7ff fc24 	bl	800414c <_malloc_r>
 8004904:	b948      	cbnz	r0, 800491a <__smakebuf_r+0x46>
 8004906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490a:	059a      	lsls	r2, r3, #22
 800490c:	d4ee      	bmi.n	80048ec <__smakebuf_r+0x18>
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	e7e2      	b.n	80048e0 <__smakebuf_r+0xc>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	6020      	str	r0, [r4, #0]
 800491e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	9b01      	ldr	r3, [sp, #4]
 8004926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800492a:	b15b      	cbz	r3, 8004944 <__smakebuf_r+0x70>
 800492c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004930:	4630      	mov	r0, r6
 8004932:	f000 f82d 	bl	8004990 <_isatty_r>
 8004936:	b128      	cbz	r0, 8004944 <__smakebuf_r+0x70>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	431d      	orrs	r5, r3
 8004948:	81a5      	strh	r5, [r4, #12]
 800494a:	e7cf      	b.n	80048ec <__smakebuf_r+0x18>

0800494c <_close_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d06      	ldr	r5, [pc, #24]	@ (8004968 <_close_r+0x1c>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	f7fc fb5b 	bl	8001012 <_close>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_close_r+0x1a>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_close_r+0x1a>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000318 	.word	0x20000318

0800496c <_fstat_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4d07      	ldr	r5, [pc, #28]	@ (800498c <_fstat_r+0x20>)
 8004970:	2300      	movs	r3, #0
 8004972:	4604      	mov	r4, r0
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	f7fc fb56 	bl	800102a <_fstat>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d102      	bne.n	8004988 <_fstat_r+0x1c>
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	b103      	cbz	r3, 8004988 <_fstat_r+0x1c>
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	bd38      	pop	{r3, r4, r5, pc}
 800498a:	bf00      	nop
 800498c:	20000318 	.word	0x20000318

08004990 <_isatty_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d06      	ldr	r5, [pc, #24]	@ (80049ac <_isatty_r+0x1c>)
 8004994:	2300      	movs	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	f7fc fb55 	bl	800104a <_isatty>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_isatty_r+0x1a>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_isatty_r+0x1a>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20000318 	.word	0x20000318

080049b0 <_lseek_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d07      	ldr	r5, [pc, #28]	@ (80049d0 <_lseek_r+0x20>)
 80049b4:	4604      	mov	r4, r0
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fc fb4e 	bl	8001060 <_lseek>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_lseek_r+0x1e>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_lseek_r+0x1e>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20000318 	.word	0x20000318

080049d4 <_read_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d07      	ldr	r5, [pc, #28]	@ (80049f4 <_read_r+0x20>)
 80049d8:	4604      	mov	r4, r0
 80049da:	4608      	mov	r0, r1
 80049dc:	4611      	mov	r1, r2
 80049de:	2200      	movs	r2, #0
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fc fadc 	bl	8000fa0 <_read>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_read_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_read_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000318 	.word	0x20000318

080049f8 <_sbrk_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	@ (8004a14 <_sbrk_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc fb3a 	bl	800107c <_sbrk>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_sbrk_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_sbrk_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000318 	.word	0x20000318

08004a18 <_write_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d07      	ldr	r5, [pc, #28]	@ (8004a38 <_write_r+0x20>)
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	4608      	mov	r0, r1
 8004a20:	4611      	mov	r1, r2
 8004a22:	2200      	movs	r2, #0
 8004a24:	602a      	str	r2, [r5, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f7fc fad7 	bl	8000fda <_write>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d102      	bne.n	8004a36 <_write_r+0x1e>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	b103      	cbz	r3, 8004a36 <_write_r+0x1e>
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	20000318 	.word	0x20000318

08004a3c <_free_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d041      	beq.n	8004ac8 <_free_r+0x8c>
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f0c      	subs	r4, r1, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfb8      	it	lt
 8004a4e:	18e4      	addlt	r4, r4, r3
 8004a50:	f7ff fe36 	bl	80046c0 <__malloc_lock>
 8004a54:	4a1d      	ldr	r2, [pc, #116]	@ (8004acc <_free_r+0x90>)
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	b933      	cbnz	r3, 8004a68 <_free_r+0x2c>
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a64:	f7ff be32 	b.w	80046cc <__malloc_unlock>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d908      	bls.n	8004a7e <_free_r+0x42>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	1821      	adds	r1, r4, r0
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf01      	itttt	eq
 8004a74:	6819      	ldreq	r1, [r3, #0]
 8004a76:	685b      	ldreq	r3, [r3, #4]
 8004a78:	1809      	addeq	r1, r1, r0
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	e7ed      	b.n	8004a5a <_free_r+0x1e>
 8004a7e:	461a      	mov	r2, r3
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b10b      	cbz	r3, 8004a88 <_free_r+0x4c>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d9fa      	bls.n	8004a7e <_free_r+0x42>
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	1850      	adds	r0, r2, r1
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d10b      	bne.n	8004aa8 <_free_r+0x6c>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	4401      	add	r1, r0
 8004a94:	1850      	adds	r0, r2, r1
 8004a96:	4283      	cmp	r3, r0
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	d1e0      	bne.n	8004a5e <_free_r+0x22>
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	6053      	str	r3, [r2, #4]
 8004aa2:	4408      	add	r0, r1
 8004aa4:	6010      	str	r0, [r2, #0]
 8004aa6:	e7da      	b.n	8004a5e <_free_r+0x22>
 8004aa8:	d902      	bls.n	8004ab0 <_free_r+0x74>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	e7d6      	b.n	8004a5e <_free_r+0x22>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	1821      	adds	r1, r4, r0
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf04      	itt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	bf04      	itt	eq
 8004ac0:	1809      	addeq	r1, r1, r0
 8004ac2:	6021      	streq	r1, [r4, #0]
 8004ac4:	6054      	str	r4, [r2, #4]
 8004ac6:	e7ca      	b.n	8004a5e <_free_r+0x22>
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	bf00      	nop
 8004acc:	20000314 	.word	0x20000314

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
