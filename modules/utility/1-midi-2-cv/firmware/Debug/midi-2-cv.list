
midi-2-cv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080044a0  080044a0  000054a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b8  080044b8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080044b8  080044b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c0  080044c0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044c4  080044c4  000054c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080044c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000005c  08004524  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08004524  000063ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121f1  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002860  00000000  00000000  0001827d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001aae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d97  00000000  00000000  0001bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045aa  00000000  00000000  0001c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015962  00000000  00000000  00020f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f09  00000000  00000000  000368c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd7cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c68  00000000  00000000  000cd810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000d2478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004488 	.word	0x08004488

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08004488 	.word	0x08004488

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <buffer_init>:
#include "app/buffer.h"
#include <stdint.h>
#include <stdlib.h>

BUFFER_STATUS buffer_init(Buffer *buf, uint16_t buffer_size) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
    uint32_t i;
    buffer_u8_free(buf);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 f826 	bl	8000526 <buffer_u8_free>

    buf->buffer = (uint8_t *) malloc(buffer_size * sizeof(uint8_t));
 80004da:	887b      	ldrh	r3, [r7, #2]
 80004dc:	4618      	mov	r0, r3
 80004de:	f003 fe87 	bl	80041f0 <malloc>
 80004e2:	4603      	mov	r3, r0
 80004e4:	461a      	mov	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	609a      	str	r2, [r3, #8]

    if (NULL == buf->buffer) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d101      	bne.n	80004f6 <buffer_init+0x2e>
        return BUFFER_FAILURE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e013      	b.n	800051e <buffer_init+0x56>
    }
    for (i = 0; i < buffer_size; i++) {
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e008      	b.n	800050e <buffer_init+0x46>
        buf->buffer[i] = 0;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	689a      	ldr	r2, [r3, #8]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4413      	add	r3, r2
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < buffer_size; i++) {
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3301      	adds	r3, #1
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	887b      	ldrh	r3, [r7, #2]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3f2      	bcc.n	80004fc <buffer_init+0x34>
    }

    buf->length = buffer_size;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	887a      	ldrh	r2, [r7, #2]
 800051a:	809a      	strh	r2, [r3, #4]

    return BUFFER_SUCCESS;
 800051c:	2301      	movs	r3, #1
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <buffer_u8_free>:

BUFFER_STATUS buffer_u8_free(Buffer *buf) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
    if (NULL != buf->buffer) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d004      	beq.n	8000540 <buffer_u8_free+0x1a>
        free(buf->buffer);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fe60 	bl	8004200 <free>
    }

    buf->idx_front = buf->idx_rear = 0;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	805a      	strh	r2, [r3, #2]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	885a      	ldrh	r2, [r3, #2]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	801a      	strh	r2, [r3, #0]
    buf->length = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	809a      	strh	r2, [r3, #4]

    return BUFFER_SUCCESS;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <buffer_push>:

BUFFER_STATUS buffer_push(Buffer *buf, const uint8_t *input) {
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
    if (((buf->idx_front + 1) & (buf->length - 1)) == buf->idx_rear) { //buffer over-run error occurs.
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	889b      	ldrh	r3, [r3, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	4013      	ands	r3, r2
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	8852      	ldrh	r2, [r2, #2]
 800057a:	4293      	cmp	r3, r2
 800057c:	d101      	bne.n	8000582 <buffer_push+0x24>
        return BUFFER_FAILURE;
 800057e:	2300      	movs	r3, #0
 8000580:	e01b      	b.n	80005ba <buffer_push+0x5c>
    } else {

        buf->buffer[buf->idx_front] = *input;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	8812      	ldrh	r2, [r2, #0]
 800058a:	4413      	add	r3, r2
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	701a      	strb	r2, [r3, #0]
        buf->idx_front++;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	801a      	strh	r2, [r3, #0]
        buf->idx_front &= (buf->length - 1);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	4013      	ands	r3, r2
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	801a      	strh	r2, [r3, #0]
        return BUFFER_SUCCESS;
 80005b8:	2301      	movs	r3, #1
    }
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <buffer_pop>:

BUFFER_STATUS buffer_pop(Buffer *buf, uint8_t *ret) {
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
    if (buf->idx_front == buf->idx_rear) { // if buffer under-run error occurs.
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	885b      	ldrh	r3, [r3, #2]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d101      	bne.n	80005e0 <buffer_pop+0x1a>
        return BUFFER_FAILURE;
 80005dc:	2300      	movs	r3, #0
 80005de:	e01b      	b.n	8000618 <buffer_pop+0x52>
    } else {
        *ret = (buf->buffer[buf->idx_rear]);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	8852      	ldrh	r2, [r2, #2]
 80005e8:	4413      	add	r3, r2
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	701a      	strb	r2, [r3, #0]
        buf->idx_rear++;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	885b      	ldrh	r3, [r3, #2]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	805a      	strh	r2, [r3, #2]
        buf->idx_rear &= (buf->length - 1);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	885b      	ldrh	r3, [r3, #2]
 8000600:	b21a      	sxth	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	889b      	ldrh	r3, [r3, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	b29b      	uxth	r3, r3
 800060a:	b21b      	sxth	r3, r3
 800060c:	4013      	ands	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29a      	uxth	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	805a      	strh	r2, [r3, #2]
        return BUFFER_SUCCESS;
 8000616:	2301      	movs	r3, #1
    }
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <midi_init>:

// ***********
// Implementation
// ***********

int32_t midi_init() {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    // I guess this means that the ring buffer is not initialized well
    if (!buffer_init(&rx_buffer, MIDI_BUFFER_LENGTH)) {
 8000628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062c:	480e      	ldr	r0, [pc, #56]	@ (8000668 <midi_init+0x44>)
 800062e:	f7ff ff4b 	bl	80004c8 <buffer_init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <midi_init+0x1a>
        return MOD_ERR_ARG;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800063c:	e012      	b.n	8000664 <midi_init+0x40>
    }

    // Initialize variables for RPN
    rpn_event.flag = 0x00;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <midi_init+0x48>)
 8000640:	2200      	movs	r2, #0
 8000642:	705a      	strb	r2, [r3, #1]

    rpn_event.dataentry_lsb
            = rpn_event.dataentry_msb
            = rpn_event.param_lsb
            = rpn_event.param_msb
            = 0x00;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <midi_init+0x48>)
 8000646:	2200      	movs	r2, #0
 8000648:	709a      	strb	r2, [r3, #2]
            = rpn_event.param_msb
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <midi_init+0x48>)
 800064c:	789a      	ldrb	r2, [r3, #2]
 800064e:	4b07      	ldr	r3, [pc, #28]	@ (800066c <midi_init+0x48>)
 8000650:	70da      	strb	r2, [r3, #3]
            = rpn_event.param_lsb
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <midi_init+0x48>)
 8000654:	78da      	ldrb	r2, [r3, #3]
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <midi_init+0x48>)
 8000658:	711a      	strb	r2, [r3, #4]
            = rpn_event.dataentry_msb
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <midi_init+0x48>)
 800065c:	791a      	ldrb	r2, [r3, #4]
 800065e:	4b03      	ldr	r3, [pc, #12]	@ (800066c <midi_init+0x48>)
 8000660:	715a      	strb	r2, [r3, #5]

    return 0;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000084 	.word	0x20000084
 800066c:	2000007c 	.word	0x2000007c

08000670 <midi_run>:

int32_t midi_run(MIDI_event *midi_event) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    while (1 == midi_pop_buffer()) {
 8000678:	e007      	b.n	800068a <midi_run+0x1a>
        // will keep returning false when not all events are read
        if (midi_is_event_generated(midi_event)) {
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f836 	bl	80006ec <midi_is_event_generated>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <midi_run+0x1a>
            return 1;
 8000686:	2301      	movs	r3, #1
 8000688:	e005      	b.n	8000696 <midi_run+0x26>
    while (1 == midi_pop_buffer()) {
 800068a:	f000 f81d 	bl	80006c8 <midi_pop_buffer>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f2      	bne.n	800067a <midi_run+0xa>
        }
    }
    return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <midi_push_buffer>:

bool midi_push_buffer(uint8_t *input) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    return buffer_push(&rx_buffer, input) == BUFFER_SUCCESS;
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <midi_push_buffer+0x24>)
 80006ac:	f7ff ff57 	bl	800055e <buffer_push>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000084 	.word	0x20000084

080006c8 <midi_pop_buffer>:

bool midi_pop_buffer() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    return buffer_pop(&rx_buffer, &midi_buffer) == BUFFER_SUCCESS;
 80006cc:	4905      	ldr	r1, [pc, #20]	@ (80006e4 <midi_pop_buffer+0x1c>)
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <midi_pop_buffer+0x20>)
 80006d0:	f7ff ff79 	bl	80005c6 <buffer_pop>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000090 	.word	0x20000090
 80006e8:	20000084 	.word	0x20000084

080006ec <midi_is_event_generated>:

bool midi_is_event_generated(MIDI_event *midi_event) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    uint8_t upper_half_byte = (midi_buffer) & 0xF0;
 80006f4:	4b81      	ldr	r3, [pc, #516]	@ (80008fc <midi_is_event_generated+0x210>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	f023 030f 	bic.w	r3, r3, #15
 80006fc:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_half_byte = (midi_buffer) & 0x0F;
 80006fe:	4b7f      	ldr	r3, [pc, #508]	@ (80008fc <midi_is_event_generated+0x210>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	73bb      	strb	r3, [r7, #14]

    // status byte.
    if (upper_half_byte & 0x80) {
 8000708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070c:	2b00      	cmp	r3, #0
 800070e:	f280 808c 	bge.w	800082a <midi_is_event_generated+0x13e>
        // MIDI System Message
        if (0xF0 == upper_half_byte) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2bf0      	cmp	r3, #240	@ 0xf0
 8000716:	d117      	bne.n	8000748 <midi_is_event_generated+0x5c>
            switch (lower_half_byte) {
 8000718:	7bbb      	ldrb	r3, [r7, #14]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <midi_is_event_generated+0x38>
 800071e:	2b07      	cmp	r3, #7
 8000720:	d00e      	beq.n	8000740 <midi_is_event_generated+0x54>
 8000722:	e0de      	b.n	80008e2 <midi_is_event_generated+0x1f6>
                case 0x00://SysEx Start
                    midi_event->type = analyzed_status.type = MSG_SYSEX;
 8000724:	4b76      	ldr	r3, [pc, #472]	@ (8000900 <midi_is_event_generated+0x214>)
 8000726:	2204      	movs	r2, #4
 8000728:	705a      	strb	r2, [r3, #1]
 800072a:	4b75      	ldr	r3, [pc, #468]	@ (8000900 <midi_is_event_generated+0x214>)
 800072c:	785a      	ldrb	r2, [r3, #1]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	701a      	strb	r2, [r3, #0]
                    analyzed_status.data_idx = 0;
 8000732:	4b73      	ldr	r3, [pc, #460]	@ (8000900 <midi_is_event_generated+0x214>)
 8000734:	2200      	movs	r2, #0
 8000736:	70da      	strb	r2, [r3, #3]
                    analyzed_status.stat = WAIT_SYSTEM_DATA;
 8000738:	4b71      	ldr	r3, [pc, #452]	@ (8000900 <midi_is_event_generated+0x214>)
 800073a:	2203      	movs	r2, #3
 800073c:	701a      	strb	r2, [r3, #0]
                    break;
 800073e:	e0d0      	b.n	80008e2 <midi_is_event_generated+0x1f6>

                case 0x07://SysEx End
                    analyzed_status.stat = END_ANALYSIS;
 8000740:	4b6f      	ldr	r3, [pc, #444]	@ (8000900 <midi_is_event_generated+0x214>)
 8000742:	2204      	movs	r2, #4
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e0cc      	b.n	80008e2 <midi_is_event_generated+0x1f6>
            }
            // MIDI Channel Message.
        } else {
            switch (upper_half_byte) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2be0      	cmp	r3, #224	@ 0xe0
 800074c:	d02f      	beq.n	80007ae <midi_is_event_generated+0xc2>
 800074e:	2be0      	cmp	r3, #224	@ 0xe0
 8000750:	dc60      	bgt.n	8000814 <midi_is_event_generated+0x128>
 8000752:	2bc0      	cmp	r3, #192	@ 0xc0
 8000754:	d04d      	beq.n	80007f2 <midi_is_event_generated+0x106>
 8000756:	2bc0      	cmp	r3, #192	@ 0xc0
 8000758:	dc5c      	bgt.n	8000814 <midi_is_event_generated+0x128>
 800075a:	2bb0      	cmp	r3, #176	@ 0xb0
 800075c:	d038      	beq.n	80007d0 <midi_is_event_generated+0xe4>
 800075e:	2bb0      	cmp	r3, #176	@ 0xb0
 8000760:	dc58      	bgt.n	8000814 <midi_is_event_generated+0x128>
 8000762:	2b80      	cmp	r3, #128	@ 0x80
 8000764:	d012      	beq.n	800078c <midi_is_event_generated+0xa0>
 8000766:	2b90      	cmp	r3, #144	@ 0x90
 8000768:	d154      	bne.n	8000814 <midi_is_event_generated+0x128>

                case 0x90: //Note On Message.
                    midi_event->type = analyzed_status.type = MSG_NOTE_ON;
 800076a:	4b65      	ldr	r3, [pc, #404]	@ (8000900 <midi_is_event_generated+0x214>)
 800076c:	2201      	movs	r2, #1
 800076e:	705a      	strb	r2, [r3, #1]
 8000770:	4b63      	ldr	r3, [pc, #396]	@ (8000900 <midi_is_event_generated+0x214>)
 8000772:	785a      	ldrb	r2, [r3, #1]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	701a      	strb	r2, [r3, #0]
                    analyzed_status.stat = WAIT_DATA1;
 8000778:	4b61      	ldr	r3, [pc, #388]	@ (8000900 <midi_is_event_generated+0x214>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
                    midi_event->channel = lower_half_byte;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7bba      	ldrb	r2, [r7, #14]
 8000782:	705a      	strb	r2, [r3, #1]
                    analyzed_status.channel = lower_half_byte;
 8000784:	4a5e      	ldr	r2, [pc, #376]	@ (8000900 <midi_is_event_generated+0x214>)
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	7093      	strb	r3, [r2, #2]
                    break;
 800078a:	e0aa      	b.n	80008e2 <midi_is_event_generated+0x1f6>

                case 0x80: //Note Off Message.
                    midi_event->type = analyzed_status.type = MSG_NOTE_OFF;
 800078c:	4b5c      	ldr	r3, [pc, #368]	@ (8000900 <midi_is_event_generated+0x214>)
 800078e:	2202      	movs	r2, #2
 8000790:	705a      	strb	r2, [r3, #1]
 8000792:	4b5b      	ldr	r3, [pc, #364]	@ (8000900 <midi_is_event_generated+0x214>)
 8000794:	785a      	ldrb	r2, [r3, #1]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	701a      	strb	r2, [r3, #0]
                    analyzed_status.stat = WAIT_DATA1;
 800079a:	4b59      	ldr	r3, [pc, #356]	@ (8000900 <midi_is_event_generated+0x214>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
                    midi_event->channel = lower_half_byte;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7bba      	ldrb	r2, [r7, #14]
 80007a4:	705a      	strb	r2, [r3, #1]
                    analyzed_status.channel = lower_half_byte;
 80007a6:	4a56      	ldr	r2, [pc, #344]	@ (8000900 <midi_is_event_generated+0x214>)
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	7093      	strb	r3, [r2, #2]
                    break;
 80007ac:	e099      	b.n	80008e2 <midi_is_event_generated+0x1f6>

                case 0xE0: //Pitch Bend.
                    midi_event->type = analyzed_status.type = MSG_PITCH;
 80007ae:	4b54      	ldr	r3, [pc, #336]	@ (8000900 <midi_is_event_generated+0x214>)
 80007b0:	2203      	movs	r2, #3
 80007b2:	705a      	strb	r2, [r3, #1]
 80007b4:	4b52      	ldr	r3, [pc, #328]	@ (8000900 <midi_is_event_generated+0x214>)
 80007b6:	785a      	ldrb	r2, [r3, #1]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	701a      	strb	r2, [r3, #0]
                    analyzed_status.stat = WAIT_DATA1;
 80007bc:	4b50      	ldr	r3, [pc, #320]	@ (8000900 <midi_is_event_generated+0x214>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
                    midi_event->channel = lower_half_byte;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7bba      	ldrb	r2, [r7, #14]
 80007c6:	705a      	strb	r2, [r3, #1]
                    analyzed_status.channel = lower_half_byte;
 80007c8:	4a4d      	ldr	r2, [pc, #308]	@ (8000900 <midi_is_event_generated+0x214>)
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	7093      	strb	r3, [r2, #2]
                    break;
 80007ce:	e088      	b.n	80008e2 <midi_is_event_generated+0x1f6>

                case 0xB0: //Control Change
                    midi_event->type = analyzed_status.type = MSG_CC;
 80007d0:	4b4b      	ldr	r3, [pc, #300]	@ (8000900 <midi_is_event_generated+0x214>)
 80007d2:	2205      	movs	r2, #5
 80007d4:	705a      	strb	r2, [r3, #1]
 80007d6:	4b4a      	ldr	r3, [pc, #296]	@ (8000900 <midi_is_event_generated+0x214>)
 80007d8:	785a      	ldrb	r2, [r3, #1]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	701a      	strb	r2, [r3, #0]
                    analyzed_status.stat = WAIT_DATA1;
 80007de:	4b48      	ldr	r3, [pc, #288]	@ (8000900 <midi_is_event_generated+0x214>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
                    midi_event->channel = lower_half_byte;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7bba      	ldrb	r2, [r7, #14]
 80007e8:	705a      	strb	r2, [r3, #1]
                    analyzed_status.channel = lower_half_byte;
 80007ea:	4a45      	ldr	r2, [pc, #276]	@ (8000900 <midi_is_event_generated+0x214>)
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	7093      	strb	r3, [r2, #2]
                    break;
 80007f0:	e077      	b.n	80008e2 <midi_is_event_generated+0x1f6>

                case 0xC0: //Program Change
                    midi_event->type = analyzed_status.type = MSG_PROG;
 80007f2:	4b43      	ldr	r3, [pc, #268]	@ (8000900 <midi_is_event_generated+0x214>)
 80007f4:	2206      	movs	r2, #6
 80007f6:	705a      	strb	r2, [r3, #1]
 80007f8:	4b41      	ldr	r3, [pc, #260]	@ (8000900 <midi_is_event_generated+0x214>)
 80007fa:	785a      	ldrb	r2, [r3, #1]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	701a      	strb	r2, [r3, #0]
                    analyzed_status.stat = WAIT_DATA1;
 8000800:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <midi_is_event_generated+0x214>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
                    midi_event->channel = lower_half_byte;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7bba      	ldrb	r2, [r7, #14]
 800080a:	705a      	strb	r2, [r3, #1]
                    analyzed_status.channel = lower_half_byte;
 800080c:	4a3c      	ldr	r2, [pc, #240]	@ (8000900 <midi_is_event_generated+0x214>)
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	7093      	strb	r3, [r2, #2]
                    break;
 8000812:	e066      	b.n	80008e2 <midi_is_event_generated+0x1f6>

                default:
                    midi_event->type = analyzed_status.type = MSG_NOTHING;
 8000814:	4b3a      	ldr	r3, [pc, #232]	@ (8000900 <midi_is_event_generated+0x214>)
 8000816:	2200      	movs	r2, #0
 8000818:	705a      	strb	r2, [r3, #1]
 800081a:	4b39      	ldr	r3, [pc, #228]	@ (8000900 <midi_is_event_generated+0x214>)
 800081c:	785a      	ldrb	r2, [r3, #1]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
                    analyzed_status.stat = START_ANALYSIS;
 8000822:	4b37      	ldr	r3, [pc, #220]	@ (8000900 <midi_is_event_generated+0x214>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
                    break;
 8000828:	e05b      	b.n	80008e2 <midi_is_event_generated+0x1f6>
            }
        }
        //data byte
    } else {
        switch (analyzed_status.stat) {
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <midi_is_event_generated+0x214>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b01      	subs	r3, #1
 8000830:	2b03      	cmp	r3, #3
 8000832:	d853      	bhi.n	80008dc <midi_is_event_generated+0x1f0>
 8000834:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <midi_is_event_generated+0x150>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	0800084d 	.word	0x0800084d
 8000840:	08000895 	.word	0x08000895
 8000844:	080008a5 	.word	0x080008a5
 8000848:	080008cd 	.word	0x080008cd

            case WAIT_DATA1:
                midi_event->data_byte[0] = (midi_buffer);
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <midi_is_event_generated+0x210>)
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	709a      	strb	r2, [r3, #2]
                if (MSG_NOTE_ON == analyzed_status.type || MSG_NOTE_OFF == analyzed_status.type ||
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <midi_is_event_generated+0x214>)
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d00b      	beq.n	8000874 <midi_is_event_generated+0x188>
 800085c:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <midi_is_event_generated+0x214>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d007      	beq.n	8000874 <midi_is_event_generated+0x188>
                    MSG_PITCH == analyzed_status.type || MSG_CC == analyzed_status.type) {
 8000864:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <midi_is_event_generated+0x214>)
 8000866:	785b      	ldrb	r3, [r3, #1]
                if (MSG_NOTE_ON == analyzed_status.type || MSG_NOTE_OFF == analyzed_status.type ||
 8000868:	2b03      	cmp	r3, #3
 800086a:	d003      	beq.n	8000874 <midi_is_event_generated+0x188>
                    MSG_PITCH == analyzed_status.type || MSG_CC == analyzed_status.type) {
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <midi_is_event_generated+0x214>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	2b05      	cmp	r3, #5
 8000872:	d103      	bne.n	800087c <midi_is_event_generated+0x190>
                    analyzed_status.stat = WAIT_DATA2;
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <midi_is_event_generated+0x214>)
 8000876:	2202      	movs	r2, #2
 8000878:	701a      	strb	r2, [r3, #0]
                } else if (MSG_PROG == analyzed_status.type) {
                    analyzed_status.stat = END_ANALYSIS;
                } else {
                    analyzed_status.stat = START_ANALYSIS;
                }
                break;
 800087a:	e032      	b.n	80008e2 <midi_is_event_generated+0x1f6>
                } else if (MSG_PROG == analyzed_status.type) {
 800087c:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <midi_is_event_generated+0x214>)
 800087e:	785b      	ldrb	r3, [r3, #1]
 8000880:	2b06      	cmp	r3, #6
 8000882:	d103      	bne.n	800088c <midi_is_event_generated+0x1a0>
                    analyzed_status.stat = END_ANALYSIS;
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <midi_is_event_generated+0x214>)
 8000886:	2204      	movs	r2, #4
 8000888:	701a      	strb	r2, [r3, #0]
                break;
 800088a:	e02a      	b.n	80008e2 <midi_is_event_generated+0x1f6>
                    analyzed_status.stat = START_ANALYSIS;
 800088c:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <midi_is_event_generated+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
                break;
 8000892:	e026      	b.n	80008e2 <midi_is_event_generated+0x1f6>

            case WAIT_DATA2:
                midi_event->data_byte[1] = (midi_buffer);
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <midi_is_event_generated+0x210>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	70da      	strb	r2, [r3, #3]
                analyzed_status.stat = END_ANALYSIS;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <midi_is_event_generated+0x214>)
 800089e:	2204      	movs	r2, #4
 80008a0:	701a      	strb	r2, [r3, #0]
                break;
 80008a2:	e01e      	b.n	80008e2 <midi_is_event_generated+0x1f6>

            case WAIT_SYSTEM_DATA:
                midi_event->data_byte[analyzed_status.data_idx++] = (midi_buffer);
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <midi_is_event_generated+0x214>)
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	b2d1      	uxtb	r1, r2
 80008ac:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <midi_is_event_generated+0x214>)
 80008ae:	70d1      	strb	r1, [r2, #3]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <midi_is_event_generated+0x210>)
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	440b      	add	r3, r1
 80008ba:	709a      	strb	r2, [r3, #2]

                if (analyzed_status.data_idx > (MIDI_DATABYTE_MAX - 1)) {
 80008bc:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <midi_is_event_generated+0x214>)
 80008be:	78db      	ldrb	r3, [r3, #3]
 80008c0:	2b1f      	cmp	r3, #31
 80008c2:	d90d      	bls.n	80008e0 <midi_is_event_generated+0x1f4>
                    analyzed_status.stat = END_ANALYSIS;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <midi_is_event_generated+0x214>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	701a      	strb	r2, [r3, #0]
                }
                break;
 80008ca:	e009      	b.n	80008e0 <midi_is_event_generated+0x1f4>

            case END_ANALYSIS:
                midi_event->data_byte[0] = (midi_buffer);
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <midi_is_event_generated+0x210>)
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	709a      	strb	r2, [r3, #2]
                analyzed_status.stat = WAIT_DATA2;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <midi_is_event_generated+0x214>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	701a      	strb	r2, [r3, #0]
                break;
 80008da:	e002      	b.n	80008e2 <midi_is_event_generated+0x1f6>

            case START_ANALYSIS:
            default:
                break;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <midi_is_event_generated+0x1f6>
                break;
 80008e0:	bf00      	nop
        }
    }

    if (END_ANALYSIS == analyzed_status.stat) {
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <midi_is_event_generated+0x214>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d101      	bne.n	80008ee <midi_is_event_generated+0x202>
        return true;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <midi_is_event_generated+0x204>
    } else {
        return false;
 80008ee:	2300      	movs	r3, #0
    }

}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000090 	.word	0x20000090
 8000900:	20000078 	.word	0x20000078

08000904 <midi_handler_init>:
//******************
// Implementation
//******************

uint32_t midi_handler_init(struct midi_handler_config* cfg)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    if (cfg == NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <midi_handler_init+0x14>
    {
        return MOD_ERR_ARG;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000916:	e010      	b.n	800093a <midi_handler_init+0x36>
    }

    memset(&state, 0, sizeof(state));
 8000918:	2218      	movs	r2, #24
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	@ (8000944 <midi_handler_init+0x40>)
 800091e:	f003 fd25 	bl	800436c <memset>
    state.cfg = *cfg;
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <midi_handler_init+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4614      	mov	r4, r2
 8000928:	461d      	mov	r5, r3
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	6023      	str	r3, [r4, #0]

    // used to track channel mode
    state.current_channel = 0x00;
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <midi_handler_init+0x40>)
 8000934:	2200      	movs	r2, #0
 8000936:	751a      	strb	r2, [r3, #20]
    //
    //     // MOD output
    //     mcp4728_init(state.cfg.mod_dac3);
    // }

    return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bdb0      	pop	{r4, r5, r7, pc}
 8000942:	bf00      	nop
 8000944:	20000094 	.word	0x20000094

08000948 <midi_handler_run>:

void midi_handler_run(MIDI_event* midi_event)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    switch (midi_event->type)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3b01      	subs	r3, #1
 8000956:	2b04      	cmp	r3, #4
 8000958:	d814      	bhi.n	8000984 <midi_handler_run+0x3c>
 800095a:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <midi_handler_run+0x18>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	0800097d 	.word	0x0800097d
 8000964:	08000975 	.word	0x08000975
 8000968:	08000985 	.word	0x08000985
 800096c:	08000985 	.word	0x08000985
 8000970:	08000985 	.word	0x08000985
    {
    case MSG_NOTE_OFF:
        midi_handle_note_off(midi_event);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 f893 	bl	8000aa0 <midi_handle_note_off>
        break;
 800097a:	e004      	b.n	8000986 <midi_handler_run+0x3e>

    case MSG_NOTE_ON:
        midi_handle_note_on(midi_event);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f807 	bl	8000990 <midi_handle_note_on>
        break;
 8000982:	e000      	b.n	8000986 <midi_handler_run+0x3e>
    case MSG_CC:
        // midi_handle_cc(midi_event);
        break;

    default:
        break;
 8000984:	bf00      	nop
    }
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop

08000990 <midi_handle_note_on>:
// ********************
// Private functions
// ********************

void midi_handle_note_on(MIDI_event* midi_event)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    // check velocity (probably in WAIT_DATA_1)
    // if === 0 --> send note_off
    uint8_t velocity = midi_event->data_byte[1];
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	78db      	ldrb	r3, [r3, #3]
 800099c:	77fb      	strb	r3, [r7, #31]

    // early return for 0 velocity
    if (velocity == 0)
 800099e:	7ffb      	ldrb	r3, [r7, #31]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d103      	bne.n	80009ac <midi_handle_note_on+0x1c>
    {
        midi_handle_note_off(midi_event);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f87b 	bl	8000aa0 <midi_handle_note_off>
        return;
 80009aa:	e072      	b.n	8000a92 <midi_handle_note_on+0x102>
    }

    if (state.cfg.assignment_mode == MH_SEQUENCE)
 80009ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000a98 <midi_handle_note_on+0x108>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d102      	bne.n	80009ba <midi_handle_note_on+0x2a>
    {
        // todo: check for next available channel
        // assign next channel
        state.current_channel = 0;
 80009b4:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <midi_handle_note_on+0x108>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	751a      	strb	r2, [r3, #20]
    }

    // get Note/Octave for midi note
    uint8_t midi_note = midi_event->data_byte[0];
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	77bb      	strb	r3, [r7, #30]

    uint8_t note = midi_get_note(midi_note);
 80009c0:	7fbb      	ldrb	r3, [r7, #30]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f89c 	bl	8000b00 <midi_get_note>
 80009c8:	4603      	mov	r3, r0
 80009ca:	777b      	strb	r3, [r7, #29]
    uint8_t octave = midi_get_octave(midi_note);
 80009cc:	7fbb      	ldrb	r3, [r7, #30]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f8f6 	bl	8000bc0 <midi_get_octave>
 80009d4:	4603      	mov	r3, r0
 80009d6:	773b      	strb	r3, [r7, #28]

    // calculate the CV value
    uint16_t value = (octave * OCT_VALUE) + (note * (OCT_VALUE / 12));
 80009d8:	7f3b      	ldrb	r3, [r7, #28]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	1ad2      	subs	r2, r2, r3
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	7f7b      	ldrb	r3, [r7, #29]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4619      	mov	r1, r3
 80009f0:	00c9      	lsls	r1, r1, #3
 80009f2:	440b      	add	r3, r1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	837b      	strh	r3, [r7, #26]

    if (state.cfg.mode == MH_SINGLE_DAC)
 80009fc:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <midi_handle_note_on+0x108>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d11a      	bne.n	8000a3a <midi_handle_note_on+0xaa>
    {
        // only 1 channel is supported in MH_SINGLE_DAC mode
        if (midi_event->channel != 0)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d141      	bne.n	8000a90 <midi_handle_note_on+0x100>

        // Always write to DAC_1
        // mcp4728_write_voltage(state.cfg.cv_dac1, MCP4728_CHANNEL_A, value);
        // mcp4728_write_voltage(state.cfg.cv_dac1, MCP4728_CHANNEL_B, velocity * 4);

        if (state.cfg.trigger_mode == MH_TRIGGER_ON)
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <midi_handle_note_on+0x108>)
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d108      	bne.n	8000a26 <midi_handle_note_on+0x96>
        {
            HAL_GPIO_WritePin(GATE_1_OUT_GPIO_Port, GATE_1_OUT_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1a:	4820      	ldr	r0, [pc, #128]	@ (8000a9c <midi_handle_note_on+0x10c>)
 8000a1c:	f001 fa1e 	bl	8001e5c <HAL_GPIO_WritePin>
            HAL_Delay(10);
 8000a20:	200a      	movs	r0, #10
 8000a22:	f000 fecf 	bl	80017c4 <HAL_Delay>
        }

        HAL_GPIO_WritePin(GATE_1_OUT_GPIO_Port, GATE_1_OUT_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2c:	481b      	ldr	r0, [pc, #108]	@ (8000a9c <midi_handle_note_on+0x10c>)
 8000a2e:	f001 fa15 	bl	8001e5c <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000a32:	200a      	movs	r0, #10
 8000a34:	f000 fec6 	bl	80017c4 <HAL_Delay>
 8000a38:	e02b      	b.n	8000a92 <midi_handle_note_on+0x102>
    }
    else if (state.cfg.mode == MH_MULTI_DAC)
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <midi_handle_note_on+0x108>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d127      	bne.n	8000a92 <midi_handle_note_on+0x102>
    {
        // Assign right channel for the midi-channel

        midi_handler_trigger_channel trigger_channel;
        midi_channel_to_trigger_channel(midi_event->channel, &trigger_channel);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	f107 0210 	add.w	r2, r7, #16
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f8fd 	bl	8000c4c <midi_channel_to_trigger_channel>
        // 2000 / 127 = 15 --> we use a 15x translation for a wide velocity amount
        // Todo: check if this actually makes sense, or set a bit for high/low range?
        // mcp4728_write_voltage(state.cfg.vel_dac2, trigger_channel.channel, velocity * 4);

        midi_handler_trigger_channel gate_channel;
        midi_channel_to_trigger_channel(midi_event->channel, &gate_channel);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	f107 0208 	add.w	r2, r7, #8
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f8f5 	bl	8000c4c <midi_channel_to_trigger_channel>

        if (state.cfg.trigger_mode == MH_TRIGGER_ON)
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <midi_handle_note_on+0x108>)
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d108      	bne.n	8000a7c <midi_handle_note_on+0xec>
        {
            HAL_GPIO_WritePin(gate_channel.port, gate_channel.pin, GPIO_PIN_RESET);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	89b9      	ldrh	r1, [r7, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f9f3 	bl	8001e5c <HAL_GPIO_WritePin>
            HAL_Delay(10);
 8000a76:	200a      	movs	r0, #10
 8000a78:	f000 fea4 	bl	80017c4 <HAL_Delay>
        }
        HAL_GPIO_WritePin(gate_channel.port, gate_channel.pin, GPIO_PIN_SET);
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	89b9      	ldrh	r1, [r7, #12]
 8000a80:	2201      	movs	r2, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f9ea 	bl	8001e5c <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000a88:	200a      	movs	r0, #10
 8000a8a:	f000 fe9b 	bl	80017c4 <HAL_Delay>
 8000a8e:	e000      	b.n	8000a92 <midi_handle_note_on+0x102>
            return;
 8000a90:	bf00      	nop
    }
}
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000094 	.word	0x20000094
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <midi_handle_note_off>:

void midi_handle_note_off(MIDI_event* midi_event)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    if (state.cfg.mode == MH_SINGLE_DAC)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <midi_handle_note_off+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10d      	bne.n	8000acc <midi_handle_note_off+0x2c>
    {
        // only 1 channel is supported in MH_SINGLE_DAC mode
        if (midi_event->channel != 0)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d11b      	bne.n	8000af0 <midi_handle_note_off+0x50>
        {
            return;
        }

        HAL_GPIO_WritePin(GATE_1_OUT_GPIO_Port, GATE_1_OUT_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <midi_handle_note_off+0x5c>)
 8000ac0:	f001 f9cc 	bl	8001e5c <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f000 fe7d 	bl	80017c4 <HAL_Delay>
 8000aca:	e012      	b.n	8000af2 <midi_handle_note_off+0x52>
    }
    else
    {
        midi_handler_trigger_channel trigger_channel;
        midi_channel_to_trigger_channel(midi_event->channel, &trigger_channel);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	f107 0208 	add.w	r2, r7, #8
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f8b8 	bl	8000c4c <midi_channel_to_trigger_channel>

        HAL_GPIO_WritePin(trigger_channel.port, trigger_channel.pin, GPIO_PIN_RESET);
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	89b9      	ldrh	r1, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 f9ba 	bl	8001e5c <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000ae8:	200a      	movs	r0, #10
 8000aea:	f000 fe6b 	bl	80017c4 <HAL_Delay>
 8000aee:	e000      	b.n	8000af2 <midi_handle_note_off+0x52>
            return;
 8000af0:	bf00      	nop
    }
}
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000094 	.word	0x20000094
 8000afc:	40020400 	.word	0x40020400

08000b00 <midi_get_note>:
// ********************
// Helper functions
// ********************

uint8_t midi_get_note(uint8_t midi_note)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    uint8_t note = NOTE_C;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73fb      	strb	r3, [r7, #15]

    // find note value by simple division
    uint8_t restValue = midi_note % 12;
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <midi_get_note+0xbc>)
 8000b12:	fba3 1302 	umull	r1, r3, r3, r2
 8000b16:	08d9      	lsrs	r1, r3, #3
 8000b18:	460b      	mov	r3, r1
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	440b      	add	r3, r1
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	73bb      	strb	r3, [r7, #14]

    switch (restValue)
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	2b0b      	cmp	r3, #11
 8000b28:	d83e      	bhi.n	8000ba8 <midi_get_note+0xa8>
 8000b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b30 <midi_get_note+0x30>)
 8000b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b30:	08000b61 	.word	0x08000b61
 8000b34:	08000b67 	.word	0x08000b67
 8000b38:	08000b6d 	.word	0x08000b6d
 8000b3c:	08000b73 	.word	0x08000b73
 8000b40:	08000b79 	.word	0x08000b79
 8000b44:	08000b7f 	.word	0x08000b7f
 8000b48:	08000b85 	.word	0x08000b85
 8000b4c:	08000b8b 	.word	0x08000b8b
 8000b50:	08000b91 	.word	0x08000b91
 8000b54:	08000b97 	.word	0x08000b97
 8000b58:	08000b9d 	.word	0x08000b9d
 8000b5c:	08000ba3 	.word	0x08000ba3
    {
    case 0:
        note = NOTE_C;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
        break;
 8000b64:	e023      	b.n	8000bae <midi_get_note+0xae>
    case 1:
        note = NOTE_CS;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
        break;
 8000b6a:	e020      	b.n	8000bae <midi_get_note+0xae>
    case 2:
        note = NOTE_D;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8000b70:	e01d      	b.n	8000bae <midi_get_note+0xae>
    case 3:
        note = NOTE_DS;
 8000b72:	2303      	movs	r3, #3
 8000b74:	73fb      	strb	r3, [r7, #15]
        break;
 8000b76:	e01a      	b.n	8000bae <midi_get_note+0xae>
    case 4:
        note = NOTE_E;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8000b7c:	e017      	b.n	8000bae <midi_get_note+0xae>
    case 5:
        note = NOTE_F;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	73fb      	strb	r3, [r7, #15]
        break;
 8000b82:	e014      	b.n	8000bae <midi_get_note+0xae>
    case 6:
        note = NOTE_FS;
 8000b84:	2306      	movs	r3, #6
 8000b86:	73fb      	strb	r3, [r7, #15]
        break;
 8000b88:	e011      	b.n	8000bae <midi_get_note+0xae>
    case 7:
        note = NOTE_G;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8000b8e:	e00e      	b.n	8000bae <midi_get_note+0xae>
    case 8:
        note = NOTE_GS;
 8000b90:	2308      	movs	r3, #8
 8000b92:	73fb      	strb	r3, [r7, #15]
        break;
 8000b94:	e00b      	b.n	8000bae <midi_get_note+0xae>
    case 9:
        note = NOTE_A;
 8000b96:	2309      	movs	r3, #9
 8000b98:	73fb      	strb	r3, [r7, #15]
        break;
 8000b9a:	e008      	b.n	8000bae <midi_get_note+0xae>
    case 10:
        note = NOTE_AS;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	73fb      	strb	r3, [r7, #15]
        break;
 8000ba0:	e005      	b.n	8000bae <midi_get_note+0xae>
    case 11:
        note = NOTE_B;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8000ba6:	e002      	b.n	8000bae <midi_get_note+0xae>
    default:
        note = NOTE_C;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
        break;
 8000bac:	bf00      	nop
    }

    return note;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	aaaaaaab 	.word	0xaaaaaaab

08000bc0 <midi_get_octave>:

uint8_t midi_get_octave(uint8_t midi_note)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    uint8_t octave = OCTAVE_0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

    if (midi_note < 24)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b17      	cmp	r3, #23
 8000bd2:	d802      	bhi.n	8000bda <midi_get_octave+0x1a>
    {
        octave = OCTAVE_0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e031      	b.n	8000c3e <midi_get_octave+0x7e>
    }
    else if (midi_note >= 24 && midi_note < 36)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b17      	cmp	r3, #23
 8000bde:	d905      	bls.n	8000bec <midi_get_octave+0x2c>
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b23      	cmp	r3, #35	@ 0x23
 8000be4:	d802      	bhi.n	8000bec <midi_get_octave+0x2c>
    {
        octave = OCTAVE_1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e028      	b.n	8000c3e <midi_get_octave+0x7e>
    }
    else if (midi_note >= 36 && midi_note < 48)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b23      	cmp	r3, #35	@ 0x23
 8000bf0:	d905      	bls.n	8000bfe <midi_get_octave+0x3e>
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bf6:	d802      	bhi.n	8000bfe <midi_get_octave+0x3e>
    {
        octave = OCTAVE_2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e01f      	b.n	8000c3e <midi_get_octave+0x7e>
    }
    else if (midi_note >= 48 && midi_note < 60)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c02:	d905      	bls.n	8000c10 <midi_get_octave+0x50>
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c08:	d802      	bhi.n	8000c10 <midi_get_octave+0x50>
    {
        octave = OCTAVE_3;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e016      	b.n	8000c3e <midi_get_octave+0x7e>
    }
    else if (midi_note >= 60 && midi_note < 72)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c14:	d905      	bls.n	8000c22 <midi_get_octave+0x62>
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b47      	cmp	r3, #71	@ 0x47
 8000c1a:	d802      	bhi.n	8000c22 <midi_get_octave+0x62>
    {
        octave = OCTAVE_4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e00d      	b.n	8000c3e <midi_get_octave+0x7e>
    }
    else if (midi_note >= 72 && midi_note < 84)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b47      	cmp	r3, #71	@ 0x47
 8000c26:	d905      	bls.n	8000c34 <midi_get_octave+0x74>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b53      	cmp	r3, #83	@ 0x53
 8000c2c:	d802      	bhi.n	8000c34 <midi_get_octave+0x74>
    {
        octave = OCTAVE_5;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e004      	b.n	8000c3e <midi_get_octave+0x7e>
    }
    else if (midi_note >= 84)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b53      	cmp	r3, #83	@ 0x53
 8000c38:	d901      	bls.n	8000c3e <midi_get_octave+0x7e>
    {
        octave = OCTAVE_6;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	73fb      	strb	r3, [r7, #15]
    }

    return octave;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <midi_channel_to_trigger_channel>:

void midi_channel_to_trigger_channel(uint8_t midi_channel, midi_handler_trigger_channel* trigger_channel)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
    uint8_t channel_to_select = 16;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	73fb      	strb	r3, [r7, #15]

    if (state.cfg.assignment_mode == MH_CHANNEL)
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <midi_channel_to_trigger_channel+0xbc>)
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <midi_channel_to_trigger_channel+0x1e>
    {
        channel_to_select = midi_channel;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e006      	b.n	8000c78 <midi_channel_to_trigger_channel+0x2c>
    }
    else if (state.cfg.assignment_mode == MH_SEQUENCE)
 8000c6a:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <midi_channel_to_trigger_channel+0xbc>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d102      	bne.n	8000c78 <midi_channel_to_trigger_channel+0x2c>
    {
        // will be incremented by each note trigger
        // based on available channels
        channel_to_select = state.current_channel;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <midi_channel_to_trigger_channel+0xbc>)
 8000c74:	7d1b      	ldrb	r3, [r3, #20]
 8000c76:	73fb      	strb	r3, [r7, #15]
    {
        // Something cool should happen here!
        // channel_to_select = state.current_channel;
    }

    if (channel_to_select == 0)
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10a      	bne.n	8000c94 <midi_channel_to_trigger_channel+0x48>
    {
        trigger_channel->port = GATE_1_OUT_GPIO_Port;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <midi_channel_to_trigger_channel+0xc0>)
 8000c82:	601a      	str	r2, [r3, #0]
        trigger_channel->pin = GATE_1_OUT_Pin;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c8a:	809a      	strh	r2, [r3, #4]
        trigger_channel->channel = MCP4728_CHANNEL_A;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	719a      	strb	r2, [r3, #6]
        trigger_channel->pin = CH_16_OUT_Pin;

        // channel does not exist on the MCP4728
        trigger_channel->channel = MCP4728_NO_CHANNEL;
    }
}
 8000c92:	e033      	b.n	8000cfc <midi_channel_to_trigger_channel+0xb0>
    else if (channel_to_select == 1)
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d10a      	bne.n	8000cb0 <midi_channel_to_trigger_channel+0x64>
        trigger_channel->port = GATE_2_OUT_GPIO_Port;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <midi_channel_to_trigger_channel+0xc0>)
 8000c9e:	601a      	str	r2, [r3, #0]
        trigger_channel->pin = GATE_2_OUT_Pin;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca6:	809a      	strh	r2, [r3, #4]
        trigger_channel->channel = MCP4728_CHANNEL_B;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2201      	movs	r2, #1
 8000cac:	719a      	strb	r2, [r3, #6]
}
 8000cae:	e025      	b.n	8000cfc <midi_channel_to_trigger_channel+0xb0>
    else if (channel_to_select == 2)
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d10a      	bne.n	8000ccc <midi_channel_to_trigger_channel+0x80>
        trigger_channel->port = GATE_3_OUT_GPIO_Port;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <midi_channel_to_trigger_channel+0xc0>)
 8000cba:	601a      	str	r2, [r3, #0]
        trigger_channel->pin = GATE_3_OUT_Pin;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cc2:	809a      	strh	r2, [r3, #4]
        trigger_channel->channel = MCP4728_CHANNEL_C;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	719a      	strb	r2, [r3, #6]
}
 8000cca:	e017      	b.n	8000cfc <midi_channel_to_trigger_channel+0xb0>
    else if (channel_to_select == 3)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d10a      	bne.n	8000ce8 <midi_channel_to_trigger_channel+0x9c>
        trigger_channel->port = GATE_4_OUT_GPIO_Port;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <midi_channel_to_trigger_channel+0xc0>)
 8000cd6:	601a      	str	r2, [r3, #0]
        trigger_channel->pin = GATE_4_OUT_Pin;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cde:	809a      	strh	r2, [r3, #4]
        trigger_channel->channel = MCP4728_CHANNEL_D;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	719a      	strb	r2, [r3, #6]
}
 8000ce6:	e009      	b.n	8000cfc <midi_channel_to_trigger_channel+0xb0>
        trigger_channel->port = CH_16_OUT_GPIO_Port;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <midi_channel_to_trigger_channel+0xc4>)
 8000cec:	601a      	str	r2, [r3, #0]
        trigger_channel->pin = CH_16_OUT_Pin;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf4:	809a      	strh	r2, [r3, #4]
        trigger_channel->channel = MCP4728_NO_CHANNEL;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	719a      	strb	r2, [r3, #6]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020800 	.word	0x40020800

08000d14 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

/*
 * This is the interrupt handler. Make sure that the USART global interrupt is enabled in the IOC
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == huart1.Instance) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_UART_RxCpltCallback+0x38>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d10d      	bne.n	8000d44 <HAL_UART_RxCpltCallback+0x30>
    GPIOC->ODR |= GPIO_PIN_9;
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_UART_RxCpltCallback+0x3c>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_UART_RxCpltCallback+0x3c>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6153      	str	r3, [r2, #20]
    midi_push_buffer(&midi_received_buf);
 8000d34:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <HAL_UART_RxCpltCallback+0x40>)
 8000d36:	f7ff fcb3 	bl	80006a0 <midi_push_buffer>
    HAL_UART_Receive_IT(&huart1, &midi_received_buf, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4905      	ldr	r1, [pc, #20]	@ (8000d54 <HAL_UART_RxCpltCallback+0x40>)
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <HAL_UART_RxCpltCallback+0x38>)
 8000d40:	f002 fb32 	bl	80033a8 <HAL_UART_Receive_IT>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000210 	.word	0x20000210
 8000d50:	40020800 	.word	0x40020800
 8000d54:	20000258 	.word	0x20000258

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	@ 0x38
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 fcbf 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f843 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f000 f9cb 	bl	8001100 <MX_GPIO_Init>
  MX_RTC_Init();
 8000d6a:	f000 f929 	bl	8000fc0 <MX_RTC_Init>
  MX_TIM1_Init();
 8000d6e:	f000 f94d 	bl	800100c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000d72:	f000 f89b 	bl	8000eac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d76:	f000 f8c7 	bl	8000f08 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000d7a:	f000 f8f3 	bl	8000f64 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000d7e:	f000 f995 	bl	80010ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // ensure interrupt will be called on next receive
  HAL_UART_Receive_IT(&huart1, &midi_received_buf, 1);
 8000d82:	2201      	movs	r2, #1
 8000d84:	4914      	ldr	r1, [pc, #80]	@ (8000dd8 <main+0x80>)
 8000d86:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <main+0x84>)
 8000d88:	f002 fb0e 	bl	80033a8 <HAL_UART_Receive_IT>

  // Init midi system
   midi_init();
 8000d8c:	f7ff fc4a 	bl	8000624 <midi_init>

  // Init midi handler
  struct midi_handler_config config;
  config.cv_dac1 = &hi2c1;
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <main+0x88>)
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  config.vel_dac2 = &hi2c2;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <main+0x8c>)
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  config.mod_dac3 = &hi2c3;
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <main+0x90>)
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  config.assignment_mode = MH_CHANNEL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  config.mode = MH_MULTI_DAC;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  config.trigger_mode = MH_TRIGGER_ON;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  // bit mask of channels available
  // 0000ABCD;
  // 00001111 ==> All channels available
  config.available_channels = 0b00001111;
 8000dae:	230f      	movs	r3, #15
 8000db0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

   midi_handler_init(&config);
 8000db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fda3 	bl	8000904 <midi_handler_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    MIDI_event midi_event;

    if (midi_run(&midi_event) == true) {
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc55 	bl	8000670 <midi_run>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d1f8      	bne.n	8000dbe <main+0x66>
      midi_handler_run(&midi_event);
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fdba 	bl	8000948 <midi_handler_run>
  while (1) {
 8000dd4:	e7f3      	b.n	8000dbe <main+0x66>
 8000dd6:	bf00      	nop
 8000dd8:	20000258 	.word	0x20000258
 8000ddc:	20000210 	.word	0x20000210
 8000de0:	200000ac 	.word	0x200000ac
 8000de4:	20000100 	.word	0x20000100
 8000de8:	20000154 	.word	0x20000154

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	@ 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	2230      	movs	r2, #48	@ 0x30
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 fab6 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <SystemClock_Config+0xb8>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a22      	ldr	r2, [pc, #136]	@ (8000ea4 <SystemClock_Config+0xb8>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <SystemClock_Config+0xb8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <SystemClock_Config+0xbc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <SystemClock_Config+0xbc>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <SystemClock_Config+0xbc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e50:	2310      	movs	r3, #16
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 f959 	bl	8002118 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e6c:	f000 f9cc 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fbbc 	bl	8002608 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e96:	f000 f9b7 	bl	8001208 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	@ 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eb2:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <MX_I2C1_Init+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <MX_I2C1_Init+0x58>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <MX_I2C1_Init+0x50>)
 8000eea:	f000 ffd1 	bl	8001e90 <HAL_I2C_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef4:	f000 f988 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	40005400 	.word	0x40005400
 8000f04:	000186a0 	.word	0x000186a0

08000f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <MX_I2C2_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <MX_I2C2_Init+0x58>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_I2C2_Init+0x50>)
 8000f46:	f000 ffa3 	bl	8001e90 <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f50:	f000 f95a 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000100 	.word	0x20000100
 8000f5c:	40005800 	.word	0x40005800
 8000f60:	000186a0 	.word	0x000186a0

08000f64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <MX_I2C3_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_I2C3_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_I2C3_Init+0x50>)
 8000fa2:	f000 ff75 	bl	8001e90 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f92c 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000154 	.word	0x20000154
 8000fb8:	40005c00 	.word	0x40005c00
 8000fbc:	000186a0 	.word	0x000186a0

08000fc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <MX_RTC_Init+0x48>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fd2:	227f      	movs	r2, #127	@ 0x7f
 8000fd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fd8:	22ff      	movs	r2, #255	@ 0xff
 8000fda:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_RTC_Init+0x44>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_RTC_Init+0x44>)
 8000ff0:	f001 fdda 	bl	8002ba8 <HAL_RTC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ffa:	f000 f905 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001a8 	.word	0x200001a8
 8001008:	40002800 	.word	0x40002800

0800100c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_TIM1_Init+0x98>)
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <MX_TIM1_Init+0x9c>)
 800102c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_TIM1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_TIM1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_TIM1_Init+0x98>)
 800103c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_TIM1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_TIM1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_TIM1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001054:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <MX_TIM1_Init+0x98>)
 8001056:	f001 fead 	bl	8002db4 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001060:	f000 f8d2 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <MX_TIM1_Init+0x98>)
 8001072:	f001 feee 	bl	8002e52 <HAL_TIM_ConfigClockSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800107c:	f000 f8c4 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_TIM1_Init+0x98>)
 800108e:	f002 f8cd 	bl	800322c <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001098:	f000 f8b6 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001c8 	.word	0x200001c8
 80010a8:	40010000 	.word	0x40010000

080010ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <MX_USART1_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f002 f910 	bl	8003308 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f88b 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000210 	.word	0x20000210
 80010fc:	40011000 	.word	0x40011000

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a36      	ldr	r2, [pc, #216]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a2f      	ldr	r2, [pc, #188]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <MX_GPIO_Init+0xf8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GATE_1_OUT_Pin|GATE_2_OUT_Pin|GATE_3_OUT_Pin|GATE_4_OUT_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001170:	4822      	ldr	r0, [pc, #136]	@ (80011fc <MX_GPIO_Init+0xfc>)
 8001172:	f000 fe73 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_16_OUT_GPIO_Port, CH_16_OUT_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800117c:	4820      	ldr	r0, [pc, #128]	@ (8001200 <MX_GPIO_Init+0x100>)
 800117e:	f000 fe6d 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GATE_1_IN_Pin GATE_2_IN_Pin GATE_3_IN_Pin GATE_4_IN_Pin */
  GPIO_InitStruct.Pin = GATE_1_IN_Pin|GATE_2_IN_Pin|GATE_3_IN_Pin|GATE_4_IN_Pin;
 8001182:	2366      	movs	r3, #102	@ 0x66
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	481b      	ldr	r0, [pc, #108]	@ (8001204 <MX_GPIO_Init+0x104>)
 8001196:	f000 fcdd 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_SW_1_Pin MODE_SW_2_Pin */
  GPIO_InitStruct.Pin = MODE_SW_1_Pin|MODE_SW_2_Pin;
 800119a:	2303      	movs	r3, #3
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <MX_GPIO_Init+0xfc>)
 80011ae:	f000 fcd1 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : GATE_1_OUT_Pin GATE_2_OUT_Pin GATE_3_OUT_Pin GATE_4_OUT_Pin */
  GPIO_InitStruct.Pin = GATE_1_OUT_Pin|GATE_2_OUT_Pin|GATE_3_OUT_Pin|GATE_4_OUT_Pin;
 80011b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80011b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_GPIO_Init+0xfc>)
 80011cc:	f000 fcc2 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_16_OUT_Pin */
  GPIO_InitStruct.Pin = CH_16_OUT_Pin;
 80011d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CH_16_OUT_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_GPIO_Init+0x100>)
 80011ea:	f000 fcb3 	bl	8001b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020000 	.word	0x40020000

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_MspInit+0x58>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <HAL_MspInit+0x58>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_MspInit+0x58>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_MspInit+0x58>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	4a0b      	ldr	r2, [pc, #44]	@ (800126c <HAL_MspInit+0x58>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	@ 0x40
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_MspInit+0x58>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2005      	movs	r0, #5
 8001258:	f000 fbb3 	bl	80019c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800125c:	2005      	movs	r0, #5
 800125e:	f000 fbcc 	bl	80019fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	@ 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a63      	ldr	r2, [pc, #396]	@ (800141c <HAL_I2C_MspInit+0x1ac>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12c      	bne.n	80012ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	4b62      	ldr	r3, [pc, #392]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a61      	ldr	r2, [pc, #388]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ae:	23c0      	movs	r3, #192	@ 0xc0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b2:	2312      	movs	r3, #18
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012be:	2304      	movs	r3, #4
 80012c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4856      	ldr	r0, [pc, #344]	@ (8001424 <HAL_I2C_MspInit+0x1b4>)
 80012ca:	f000 fc43 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a52      	ldr	r2, [pc, #328]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80012d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b50      	ldr	r3, [pc, #320]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012ea:	e093      	b.n	8001414 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <HAL_I2C_MspInit+0x1b8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d13d      	bne.n	8001372 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a48      	ldr	r2, [pc, #288]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001324:	2304      	movs	r3, #4
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	483d      	ldr	r0, [pc, #244]	@ (8001424 <HAL_I2C_MspInit+0x1b4>)
 8001330:	f000 fc10 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001334:	2308      	movs	r3, #8
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001344:	2309      	movs	r3, #9
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4835      	ldr	r0, [pc, #212]	@ (8001424 <HAL_I2C_MspInit+0x1b4>)
 8001350:	f000 fc00 	bl	8001b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	4b31      	ldr	r3, [pc, #196]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	4a30      	ldr	r2, [pc, #192]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 800135e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001362:	6413      	str	r3, [r2, #64]	@ 0x40
 8001364:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
}
 8001370:	e050      	b.n	8001414 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <HAL_I2C_MspInit+0x1bc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d14b      	bne.n	8001414 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4a26      	ldr	r2, [pc, #152]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6313      	str	r3, [r2, #48]	@ 0x30
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ba:	2312      	movs	r3, #18
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013c6:	2304      	movs	r3, #4
 80013c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4817      	ldr	r0, [pc, #92]	@ (8001430 <HAL_I2C_MspInit+0x1c0>)
 80013d2:	f000 fbbf 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013dc:	2312      	movs	r3, #18
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013e8:	2304      	movs	r3, #4
 80013ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4810      	ldr	r0, [pc, #64]	@ (8001434 <HAL_I2C_MspInit+0x1c4>)
 80013f4:	f000 fbae 	bl	8001b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 8001402:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_I2C_MspInit+0x1b0>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
}
 8001414:	bf00      	nop
 8001416:	3738      	adds	r7, #56	@ 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40005400 	.word	0x40005400
 8001420:	40023800 	.word	0x40023800
 8001424:	40020400 	.word	0x40020400
 8001428:	40005800 	.word	0x40005800
 800142c:	40005c00 	.word	0x40005c00
 8001430:	40020800 	.word	0x40020800
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <HAL_RTC_MspInit+0x50>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d111      	bne.n	8001480 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800145c:	2302      	movs	r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001464:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f001 faac 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001476:	f7ff fec7 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <HAL_RTC_MspInit+0x54>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40002800 	.word	0x40002800
 800148c:	42470e3c 	.word	0x42470e3c

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_TIM_Base_MspInit+0x3c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10d      	bne.n	80014be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_TIM_Base_MspInit+0x40>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <HAL_TIM_Base_MspInit+0x40>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <HAL_TIM_Base_MspInit+0x40>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <HAL_UART_MspInit+0x94>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d134      	bne.n	8001560 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_UART_MspInit+0x98>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a14      	ldr	r2, [pc, #80]	@ (800156c <HAL_UART_MspInit+0x98>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_UART_MspInit+0x98>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800152e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001540:	2307      	movs	r3, #7
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4809      	ldr	r0, [pc, #36]	@ (8001570 <HAL_UART_MspInit+0x9c>)
 800154c:	f000 fb02 	bl	8001b54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2025      	movs	r0, #37	@ 0x25
 8001556:	f000 fa34 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800155a:	2025      	movs	r0, #37	@ 0x25
 800155c:	f000 fa4d 	bl	80019fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40011000 	.word	0x40011000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f000 f8db 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <USART1_IRQHandler+0x10>)
 80015e6:	f001 ff05 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000210 	.word	0x20000210

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	@ (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f002 feba 	bl	800439c <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20020000 	.word	0x20020000
 8001654:	00000400 	.word	0x00000400
 8001658:	2000025c 	.word	0x2000025c
 800165c:	200003b0 	.word	0x200003b0

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <SystemInit+0x28>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166a:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <SystemInit+0x28>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  SCB->VTOR = FLASH_BASE;  // <---------------- WORKAROUND!
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SystemInit+0x28>)
 8001676:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800167a:	609a      	str	r2, [r3, #8]

}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001690:	f7ff ffe6 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	@ (80016cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f002 fe75 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff fb4b 	bl	8000d58 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016d0:	080044c8 	.word	0x080044c8
  ldr r2, =_sbss
 80016d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016d8:	200003ac 	.word	0x200003ac

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f94f 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fd7e 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f967 	bl	8001a16 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001760:	f000 f92f 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000260 	.word	0x20000260

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000260 	.word	0x20000260

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff3e 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff31 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff feb6 	bl	80017ac <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d008      	beq.n	8001a60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e052      	b.n	8001b06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0216 	bic.w	r2, r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <HAL_DMA_Abort+0x62>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0208 	bic.w	r2, r2, #8
 8001a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab0:	e013      	b.n	8001ada <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab2:	f7ff fe7b 	bl	80017ac <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d90c      	bls.n	8001ada <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e015      	b.n	8001b06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e4      	bne.n	8001ab2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aec:	223f      	movs	r2, #63	@ 0x3f
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d004      	beq.n	8001b2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	@ 0x80
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e00c      	b.n	8001b46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2205      	movs	r2, #5
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e159      	b.n	8001e24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8148 	bne.w	8001e1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d005      	beq.n	8001ba6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a2 	beq.w	8001e1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b57      	ldr	r3, [pc, #348]	@ (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cea:	4b54      	ldr	r3, [pc, #336]	@ (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf6:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <HAL_GPIO_Init+0x2ec>)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a49      	ldr	r2, [pc, #292]	@ (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x202>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a48      	ldr	r2, [pc, #288]	@ (8001e48 <HAL_GPIO_Init+0x2f4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x1fe>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a47      	ldr	r2, [pc, #284]	@ (8001e4c <HAL_GPIO_Init+0x2f8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a46      	ldr	r2, [pc, #280]	@ (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x1f6>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a45      	ldr	r2, [pc, #276]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x1f2>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d56:	2300      	movs	r3, #0
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	@ (8001e40 <HAL_GPIO_Init+0x2ec>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a24      	ldr	r2, [pc, #144]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dee:	4a1a      	ldr	r2, [pc, #104]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e18:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f aea2 	bls.w	8001b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	@ 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e12b      	b.n	80020fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f9da 	bl	8001270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef4:	f000 fd40 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a81      	ldr	r2, [pc, #516]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d807      	bhi.n	8001f14 <HAL_I2C_Init+0x84>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a80      	ldr	r2, [pc, #512]	@ (8002108 <HAL_I2C_Init+0x278>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e006      	b.n	8001f22 <HAL_I2C_Init+0x92>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a7d      	ldr	r2, [pc, #500]	@ (800210c <HAL_I2C_Init+0x27c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0e7      	b.n	80020fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a78      	ldr	r2, [pc, #480]	@ (8002110 <HAL_I2C_Init+0x280>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9b      	lsrs	r3, r3, #18
 8001f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d802      	bhi.n	8001f64 <HAL_I2C_Init+0xd4>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	e009      	b.n	8001f78 <HAL_I2C_Init+0xe8>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	4a69      	ldr	r2, [pc, #420]	@ (8002114 <HAL_I2C_Init+0x284>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	3301      	adds	r3, #1
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	495c      	ldr	r1, [pc, #368]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d819      	bhi.n	8001fcc <HAL_I2C_Init+0x13c>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e59      	subs	r1, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fac:	400b      	ands	r3, r1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_I2C_Init+0x138>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1e59      	subs	r1, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc6:	e051      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e04f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <HAL_I2C_Init+0x168>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e012      	b.n	800201e <HAL_I2C_Init+0x18e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x196>
 8002022:	2301      	movs	r3, #1
 8002024:	e022      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10e      	bne.n	800204c <HAL_I2C_Init+0x1bc>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e58      	subs	r0, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	440b      	add	r3, r1
 800203c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204a:	e00f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	6809      	ldr	r1, [r1, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800209a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6911      	ldr	r1, [r2, #16]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68d2      	ldr	r2, [r2, #12]
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	000186a0 	.word	0x000186a0
 8002108:	001e847f 	.word	0x001e847f
 800210c:	003d08ff 	.word	0x003d08ff
 8002110:	431bde83 	.word	0x431bde83
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e267      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d075      	beq.n	8002222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002136:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00c      	beq.n	800215c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b85      	ldr	r3, [pc, #532]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800214a:	2b08      	cmp	r3, #8
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b82      	ldr	r3, [pc, #520]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b7e      	ldr	r3, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e242      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x74>
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x98>
 8002196:	4b70      	ldr	r3, [pc, #448]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6f      	ldr	r2, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xb0>
 80021b0:	4b69      	ldr	r3, [pc, #420]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a68      	ldr	r2, [pc, #416]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a65      	ldr	r2, [pc, #404]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff faec 	bl	80017ac <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fae8 	bl	80017ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e207      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fad8 	bl	80017ac <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fad4 	bl	80017ac <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1f3      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b51      	ldr	r3, [pc, #324]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800222e:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002246:	4b44      	ldr	r3, [pc, #272]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x152>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1c7      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3b      	ldr	r3, [pc, #236]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4937      	ldr	r1, [pc, #220]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b34      	ldr	r3, [pc, #208]	@ (800235c <HAL_RCC_OscConfig+0x244>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff fa8d 	bl	80017ac <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff fa89 	bl	80017ac <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1a8      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4925      	ldr	r1, [pc, #148]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_RCC_OscConfig+0x244>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff fa6c 	bl	80017ac <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff fa68 	bl	80017ac <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e187      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d036      	beq.n	8002370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <HAL_RCC_OscConfig+0x248>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7ff fa4c 	bl	80017ac <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fa48 	bl	80017ac <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e167      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_RCC_OscConfig+0x240>)
 800232c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x200>
 8002336:	e01b      	b.n	8002370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x248>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fa35 	bl	80017ac <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	e00e      	b.n	8002364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7ff fa31 	bl	80017ac <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d907      	bls.n	8002364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e150      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
 8002358:	40023800 	.word	0x40023800
 800235c:	42470000 	.word	0x42470000
 8002360:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b88      	ldr	r3, [pc, #544]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ea      	bne.n	8002346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8097 	beq.w	80024ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b81      	ldr	r3, [pc, #516]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b7d      	ldr	r3, [pc, #500]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	4a7c      	ldr	r2, [pc, #496]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	@ 0x40
 800239e:	4b7a      	ldr	r3, [pc, #488]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b77      	ldr	r3, [pc, #476]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b74      	ldr	r3, [pc, #464]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a73      	ldr	r2, [pc, #460]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f9f1 	bl	80017ac <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7ff f9ed 	bl	80017ac <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e10c      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b6a      	ldr	r3, [pc, #424]	@ (800258c <HAL_RCC_OscConfig+0x474>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x2ea>
 80023f4:	4b64      	ldr	r3, [pc, #400]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	4a63      	ldr	r2, [pc, #396]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x324>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x30c>
 800240a:	4b5f      	ldr	r3, [pc, #380]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	4a5e      	ldr	r2, [pc, #376]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	@ 0x70
 8002416:	4b5c      	ldr	r3, [pc, #368]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241a:	4a5b      	ldr	r2, [pc, #364]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6713      	str	r3, [r2, #112]	@ 0x70
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0x324>
 8002424:	4b58      	ldr	r3, [pc, #352]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002428:	4a57      	ldr	r2, [pc, #348]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002430:	4b55      	ldr	r3, [pc, #340]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002434:	4a54      	ldr	r2, [pc, #336]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff f9b2 	bl	80017ac <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff f9ae 	bl	80017ac <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e0cb      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ee      	beq.n	800244c <HAL_RCC_OscConfig+0x334>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7ff f99c 	bl	80017ac <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7ff f998 	bl	80017ac <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0b5      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ee      	bne.n	8002478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	4a38      	ldr	r2, [pc, #224]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a1 	beq.w	80025f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b6:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d05c      	beq.n	800257c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d141      	bne.n	800254e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b31      	ldr	r3, [pc, #196]	@ (8002590 <HAL_RCC_OscConfig+0x478>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff f96c 	bl	80017ac <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f968 	bl	80017ac <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e087      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	491b      	ldr	r1, [pc, #108]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x478>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff f941 	bl	80017ac <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff f93d 	bl	80017ac <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e05c      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002540:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x416>
 800254c:	e054      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_RCC_OscConfig+0x478>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f92a 	bl	80017ac <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f926 	bl	80017ac <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e045      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_RCC_OscConfig+0x470>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x444>
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e038      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000
 8002590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_RCC_OscConfig+0x4ec>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d028      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d121      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d11a      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d111      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0cc      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d90c      	bls.n	8002644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b65      	ldr	r3, [pc, #404]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a58      	ldr	r2, [pc, #352]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800267e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d044      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d119      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b3f      	ldr	r3, [pc, #252]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e067      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b37      	ldr	r3, [pc, #220]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4934      	ldr	r1, [pc, #208]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7ff f858 	bl	80017ac <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7ff f854 	bl	80017ac <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e04f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d20c      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe ffb8 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	080044a0 	.word	0x080044a0
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d8:	b090      	sub	sp, #64	@ 0x40
 80027da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ec:	4b59      	ldr	r3, [pc, #356]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d00d      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	f200 80a1 	bhi.w	8002940 <HAL_RCC_GetSysClockFreq+0x16c>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x34>
 8002802:	2b04      	cmp	r3, #4
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x3a>
 8002806:	e09b      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x184>)
 800280a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800280c:	e09b      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280e:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCC_GetSysClockFreq+0x188>)
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002812:	e098      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4b4f      	ldr	r3, [pc, #316]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281e:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d028      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2200      	movs	r2, #0
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	627a      	str	r2, [r7, #36]	@ 0x24
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800283c:	2100      	movs	r1, #0
 800283e:	4b47      	ldr	r3, [pc, #284]	@ (800295c <HAL_RCC_GetSysClockFreq+0x188>)
 8002840:	fb03 f201 	mul.w	r2, r3, r1
 8002844:	2300      	movs	r3, #0
 8002846:	fb00 f303 	mul.w	r3, r0, r3
 800284a:	4413      	add	r3, r2
 800284c:	4a43      	ldr	r2, [pc, #268]	@ (800295c <HAL_RCC_GetSysClockFreq+0x188>)
 800284e:	fba0 1202 	umull	r1, r2, r0, r2
 8002852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002854:	460a      	mov	r2, r1
 8002856:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800285a:	4413      	add	r3, r2
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002860:	2200      	movs	r2, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	61fa      	str	r2, [r7, #28]
 8002866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800286e:	f7fd fcb3 	bl	80001d8 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4613      	mov	r3, r2
 8002878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800287a:	e053      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	2200      	movs	r2, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	617a      	str	r2, [r7, #20]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800288e:	f04f 0b00 	mov.w	fp, #0
 8002892:	4652      	mov	r2, sl
 8002894:	465b      	mov	r3, fp
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	0159      	lsls	r1, r3, #5
 80028a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a4:	0150      	lsls	r0, r2, #5
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	ebb2 080a 	subs.w	r8, r2, sl
 80028ae:	eb63 090b 	sbc.w	r9, r3, fp
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028c6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ca:	eb63 0509 	sbc.w	r5, r3, r9
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	00eb      	lsls	r3, r5, #3
 80028d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028dc:	00e2      	lsls	r2, r4, #3
 80028de:	4614      	mov	r4, r2
 80028e0:	461d      	mov	r5, r3
 80028e2:	eb14 030a 	adds.w	r3, r4, sl
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	eb45 030b 	adc.w	r3, r5, fp
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fa:	4629      	mov	r1, r5
 80028fc:	028b      	lsls	r3, r1, #10
 80028fe:	4621      	mov	r1, r4
 8002900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002904:	4621      	mov	r1, r4
 8002906:	028a      	lsls	r2, r1, #10
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290e:	2200      	movs	r2, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002918:	f7fd fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x180>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	3301      	adds	r3, #1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800293e:	e002      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x184>)
 8002942:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002948:	4618      	mov	r0, r3
 800294a:	3740      	adds	r7, #64	@ 0x40
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400
 800295c:	01312d00 	.word	0x01312d00

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	080044b0 	.word	0x080044b0

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffdc 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0b5b      	lsrs	r3, r3, #13
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	@ (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	080044b0 	.word	0x080044b0

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d038      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029f0:	4b68      	ldr	r3, [pc, #416]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029f6:	f7fe fed9 	bl	80017ac <HAL_GetTick>
 80029fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029fe:	f7fe fed5 	bl	80017ac <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0bd      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a10:	4b61      	ldr	r3, [pc, #388]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	071b      	lsls	r3, r3, #28
 8002a2e:	495a      	ldr	r1, [pc, #360]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a36:	4b57      	ldr	r3, [pc, #348]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe feb6 	bl	80017ac <HAL_GetTick>
 8002a40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a44:	f7fe feb2 	bl	80017ac <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e09a      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a56:	4b50      	ldr	r3, [pc, #320]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8083 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	4a47      	ldr	r2, [pc, #284]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a80:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a8c:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a42      	ldr	r2, [pc, #264]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fe88 	bl	80017ac <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fe84 	bl	80017ac <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e06c      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002abe:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02f      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d028      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002adc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002af2:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002af8:	4b27      	ldr	r3, [pc, #156]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d114      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fe52 	bl	80017ac <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fe4e 	bl	80017ac <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e034      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ee      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002b3c:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b50:	4911      	ldr	r1, [pc, #68]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
 8002b56:	e005      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002b58:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b62:	6093      	str	r3, [r2, #8]
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	4909      	ldr	r1, [pc, #36]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7d1a      	ldrb	r2, [r3, #20]
 8002b86:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002b88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	42470068 	.word	0x42470068
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42470e40 	.word	0x42470e40
 8002ba4:	424711e0 	.word	0x424711e0

08002ba8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e073      	b.n	8002ca6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7f5b      	ldrb	r3, [r3, #29]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fc32 	bl	8001438 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d055      	beq.n	8002c94 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	22ca      	movs	r2, #202	@ 0xca
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2253      	movs	r2, #83	@ 0x53
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f87f 	bl	8002cfc <RTC_EnterInitMode>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d12c      	bne.n	8002c62 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c1a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6919      	ldr	r1, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	041a      	lsls	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f886 	bl	8002d6a <RTC_ExitInitMode>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d110      	bne.n	8002c8a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c92:	e001      	b.n	8002c98 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf8 <HAL_RTC_WaitForSynchro+0x48>)
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7fe fd72 	bl	80017ac <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cca:	e009      	b.n	8002ce0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ccc:	f7fe fd6e 	bl	80017ac <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cda:	d901      	bls.n	8002ce0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e007      	b.n	8002cf0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ee      	beq.n	8002ccc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	00013f5f 	.word	0x00013f5f

08002cfc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d122      	bne.n	8002d60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fd3f 	bl	80017ac <HAL_GetTick>
 8002d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d30:	e00c      	b.n	8002d4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d32:	f7fe fd3b 	bl	80017ac <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d40:	d904      	bls.n	8002d4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <RTC_EnterInitMode+0x64>
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d1e8      	bne.n	8002d32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff8b 	bl	8002cb0 <HAL_RTC_WaitForSynchro>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2204      	movs	r2, #4
 8002da4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e041      	b.n	8002e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fb58 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 f8f4 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_ConfigClockSource+0x1c>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0b4      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x186>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea6:	d03e      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eac:	f200 8087 	bhi.w	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb4:	f000 8086 	beq.w	8002fc4 <HAL_TIM_ConfigClockSource+0x172>
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ebc:	d87f      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002ebe:	2b70      	cmp	r3, #112	@ 0x70
 8002ec0:	d01a      	beq.n	8002ef8 <HAL_TIM_ConfigClockSource+0xa6>
 8002ec2:	2b70      	cmp	r3, #112	@ 0x70
 8002ec4:	d87b      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002ec6:	2b60      	cmp	r3, #96	@ 0x60
 8002ec8:	d050      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0x11a>
 8002eca:	2b60      	cmp	r3, #96	@ 0x60
 8002ecc:	d877      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002ece:	2b50      	cmp	r3, #80	@ 0x50
 8002ed0:	d03c      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xfa>
 8002ed2:	2b50      	cmp	r3, #80	@ 0x50
 8002ed4:	d873      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d058      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0x13a>
 8002eda:	2b40      	cmp	r3, #64	@ 0x40
 8002edc:	d86f      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002ede:	2b30      	cmp	r3, #48	@ 0x30
 8002ee0:	d064      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0x15a>
 8002ee2:	2b30      	cmp	r3, #48	@ 0x30
 8002ee4:	d86b      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d060      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0x15a>
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d867      	bhi.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d05c      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0x15a>
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d05a      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0x15a>
 8002ef6:	e062      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f08:	f000 f970 	bl	80031ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	609a      	str	r2, [r3, #8]
      break;
 8002f24:	e04f      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f36:	f000 f959 	bl	80031ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f48:	609a      	str	r2, [r3, #8]
      break;
 8002f4a:	e03c      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f000 f8cd 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2150      	movs	r1, #80	@ 0x50
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f926 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f6a:	e02c      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f000 f8ec 	bl	8003156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2160      	movs	r1, #96	@ 0x60
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f916 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f8a:	e01c      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f000 f8ad 	bl	80030f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2140      	movs	r1, #64	@ 0x40
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f906 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002faa:	e00c      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f000 f8fd 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e003      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc2:	e000      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3a      	ldr	r2, [pc, #232]	@ (80030dc <TIM_Base_SetConfig+0xfc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00f      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a37      	ldr	r2, [pc, #220]	@ (80030e0 <TIM_Base_SetConfig+0x100>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a36      	ldr	r2, [pc, #216]	@ (80030e4 <TIM_Base_SetConfig+0x104>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x38>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a35      	ldr	r2, [pc, #212]	@ (80030e8 <TIM_Base_SetConfig+0x108>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2b      	ldr	r2, [pc, #172]	@ (80030dc <TIM_Base_SetConfig+0xfc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01b      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003038:	d017      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a28      	ldr	r2, [pc, #160]	@ (80030e0 <TIM_Base_SetConfig+0x100>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a27      	ldr	r2, [pc, #156]	@ (80030e4 <TIM_Base_SetConfig+0x104>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00f      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a26      	ldr	r2, [pc, #152]	@ (80030e8 <TIM_Base_SetConfig+0x108>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00b      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a25      	ldr	r2, [pc, #148]	@ (80030ec <TIM_Base_SetConfig+0x10c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a24      	ldr	r2, [pc, #144]	@ (80030f0 <TIM_Base_SetConfig+0x110>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_Base_SetConfig+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a23      	ldr	r2, [pc, #140]	@ (80030f4 <TIM_Base_SetConfig+0x114>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d108      	bne.n	800307c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0e      	ldr	r2, [pc, #56]	@ (80030dc <TIM_Base_SetConfig+0xfc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f023 0201 	bic.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]
  }
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800

080030f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 030a 	bic.w	r3, r3, #10
 8003134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f023 0210 	bic.w	r2, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	031b      	lsls	r3, r3, #12
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f043 0307 	orr.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	021a      	lsls	r2, r3, #8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	431a      	orrs	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003240:	2302      	movs	r3, #2
 8003242:	e050      	b.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d013      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a18      	ldr	r2, [pc, #96]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a16      	ldr	r2, [pc, #88]	@ (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a15      	ldr	r2, [pc, #84]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10c      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40014000 	.word	0x40014000

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e042      	b.n	80033a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe f8d0 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	@ 0x24
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fcdb 	bl	8003d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d112      	bne.n	80033e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Receive_IT+0x26>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00b      	b.n	80033ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	461a      	mov	r2, r3
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 faba 	bl	8003958 <UART_Start_Receive_IT>
 80033e4:	4603      	mov	r3, r0
 80033e6:	e000      	b.n	80033ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0ba      	sub	sp, #232	@ 0xe8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fb99 	bl	8003b8a <UART_Receive_IT>
      return;
 8003458:	e25b      	b.n	8003912 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800345a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80de 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
 8003464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80d1 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
 80034d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d011      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f043 0208 	orr.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 81f2 	beq.w	8003908 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb24 	bl	8003b8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_UART_IRQHandler+0x17a>
 8003566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04f      	beq.n	800360e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa2c 	bl	80039cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	d141      	bne.n	8003606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800359c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d9      	bne.n	8003582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035da:	4a7e      	ldr	r2, [pc, #504]	@ (80037d4 <HAL_UART_IRQHandler+0x3e0>)
 80035dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fa93 	bl	8001b0e <HAL_DMA_Abort_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f8:	4610      	mov	r0, r2
 80035fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e00e      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f994 	bl	800392c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e00a      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f990 	bl	800392c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e006      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f98c 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800361a:	e175      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	bf00      	nop
    return;
 800361e:	e173      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 814f 	bne.w	80038c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8148 	beq.w	80038c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8141 	beq.w	80038c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	f040 80b6 	bne.w	80037d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8145 	beq.w	800390c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800368a:	429a      	cmp	r2, r3
 800368c:	f080 813e 	bcs.w	800390c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a2:	f000 8088 	beq.w	80037b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1d9      	bne.n	80036a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800371a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800371e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e1      	bne.n	80036f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800373e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e3      	bne.n	800372e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003786:	f023 0310 	bic.w	r3, r3, #16
 800378a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800379a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800379e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe f93c 	bl	8001a2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8b7 	bl	8003940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037d2:	e09b      	b.n	800390c <HAL_UART_IRQHandler+0x518>
 80037d4:	08003a93 	.word	0x08003a93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 808e 	beq.w	8003910 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8089 	beq.w	8003910 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800380e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003822:	647a      	str	r2, [r7, #68]	@ 0x44
 8003824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e3      	bne.n	80037fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	623b      	str	r3, [r7, #32]
   return(result);
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3314      	adds	r3, #20
 8003856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800385a:	633a      	str	r2, [r7, #48]	@ 0x30
 800385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e3      	bne.n	8003836 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	60fb      	str	r3, [r7, #12]
   return(result);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0310 	bic.w	r3, r3, #16
 8003892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038a0:	61fa      	str	r2, [r7, #28]
 80038a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	617b      	str	r3, [r7, #20]
   return(result);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e3      	bne.n	800387c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f83d 	bl	8003940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038c6:	e023      	b.n	8003910 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_UART_IRQHandler+0x4f4>
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8ea 	bl	8003aba <UART_Transmit_IT>
    return;
 80038e6:	e014      	b.n	8003912 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <HAL_UART_IRQHandler+0x51e>
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f92a 	bl	8003b5a <UART_EndTransmit_IT>
    return;
 8003906:	e004      	b.n	8003912 <HAL_UART_IRQHandler+0x51e>
    return;
 8003908:	bf00      	nop
 800390a:	e002      	b.n	8003912 <HAL_UART_IRQHandler+0x51e>
      return;
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <HAL_UART_IRQHandler+0x51e>
      return;
 8003910:	bf00      	nop
  }
}
 8003912:	37e8      	adds	r7, #232	@ 0xe8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2222      	movs	r2, #34	@ 0x22
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0220 	orr.w	r2, r2, #32
 80039bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b095      	sub	sp, #84	@ 0x54
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e5      	bne.n	80039d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d119      	bne.n	8003a78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f023 0310 	bic.w	r3, r3, #16
 8003a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a64:	61ba      	str	r2, [r7, #24]
 8003a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	613b      	str	r3, [r7, #16]
   return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a86:	bf00      	nop
 8003a88:	3754      	adds	r7, #84	@ 0x54
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff ff3d 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b21      	cmp	r3, #33	@ 0x21
 8003acc:	d13e      	bne.n	8003b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad6:	d114      	bne.n	8003b02 <UART_Transmit_IT+0x48>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d110      	bne.n	8003b02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]
 8003b00:	e008      	b.n	8003b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6211      	str	r1, [r2, #32]
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4619      	mov	r1, r3
 8003b22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10f      	bne.n	8003b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fecc 	bl	8003918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b08c      	sub	sp, #48	@ 0x30
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b22      	cmp	r3, #34	@ 0x22
 8003b9c:	f040 80ae 	bne.w	8003cfc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d117      	bne.n	8003bda <UART_Receive_IT+0x50>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d113      	bne.n	8003bda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd8:	e026      	b.n	8003c28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bec:	d007      	beq.n	8003bfe <UART_Receive_IT+0x74>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <UART_Receive_IT+0x82>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e008      	b.n	8003c1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4619      	mov	r1, r3
 8003c36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d15d      	bne.n	8003cf8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0220 	bic.w	r2, r2, #32
 8003c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d135      	bne.n	8003cee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	613b      	str	r3, [r7, #16]
   return(result);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f023 0310 	bic.w	r3, r3, #16
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	623a      	str	r2, [r7, #32]
 8003caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	69f9      	ldr	r1, [r7, #28]
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d10a      	bne.n	8003ce0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe2a 	bl	8003940 <HAL_UARTEx_RxEventCallback>
 8003cec:	e002      	b.n	8003cf4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd f810 	bl	8000d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e002      	b.n	8003cfe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3730      	adds	r7, #48	@ 0x30
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b0c0      	sub	sp, #256	@ 0x100
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	68d9      	ldr	r1, [r3, #12]
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	ea40 0301 	orr.w	r3, r0, r1
 8003d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d60:	f021 010c 	bic.w	r1, r1, #12
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	6999      	ldr	r1, [r3, #24]
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	ea40 0301 	orr.w	r3, r0, r1
 8003d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd4 <UART_SetConfig+0x2cc>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d005      	beq.n	8003da8 <UART_SetConfig+0xa0>
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd8 <UART_SetConfig+0x2d0>)
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d104      	bne.n	8003db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7fe fdfa 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8003dac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003db0:	e003      	b.n	8003dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db2:	f7fe fde1 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8003db6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	f040 810c 	bne.w	8003fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003de2:	415b      	adcs	r3, r3
 8003de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dea:	4621      	mov	r1, r4
 8003dec:	eb12 0801 	adds.w	r8, r2, r1
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb43 0901 	adc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e18:	462b      	mov	r3, r5
 8003e1a:	eb49 0303 	adc.w	r3, r9, r3
 8003e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e36:	460b      	mov	r3, r1
 8003e38:	18db      	adds	r3, r3, r3
 8003e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	eb42 0303 	adc.w	r3, r2, r3
 8003e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e4c:	f7fc f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4b61      	ldr	r3, [pc, #388]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003e56:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	011c      	lsls	r4, r3, #4
 8003e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e80:	4641      	mov	r1, r8
 8003e82:	eb12 0a01 	adds.w	sl, r2, r1
 8003e86:	4649      	mov	r1, r9
 8003e88:	eb43 0b01 	adc.w	fp, r3, r1
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea0:	4692      	mov	sl, r2
 8003ea2:	469b      	mov	fp, r3
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	18db      	adds	r3, r3, r3
 8003ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ee2:	f7fc f979 	bl	80001d8 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003eee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2264      	movs	r2, #100	@ 0x64
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	1acb      	subs	r3, r1, r3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f02:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003f04:	fba3 2302 	umull	r2, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f10:	441c      	add	r4, r3
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f34:	4641      	mov	r1, r8
 8003f36:	1851      	adds	r1, r2, r1
 8003f38:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	414b      	adcs	r3, r1
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4651      	mov	r1, sl
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4642      	mov	r2, r8
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f88:	460b      	mov	r3, r1
 8003f8a:	18db      	adds	r3, r3, r3
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8e:	4613      	mov	r3, r2
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f9e:	f7fc f91b 	bl	80001d8 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2164      	movs	r1, #100	@ 0x64
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	3332      	adds	r3, #50	@ 0x32
 8003fba:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4422      	add	r2, r4
 8003fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd0:	e106      	b.n	80041e0 <UART_SetConfig+0x4d8>
 8003fd2:	bf00      	nop
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	6239      	str	r1, [r7, #32]
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004002:	4641      	mov	r1, r8
 8004004:	1854      	adds	r4, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0501 	adc.w	r5, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	00eb      	lsls	r3, r5, #3
 8004016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401a:	00e2      	lsls	r2, r4, #3
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	4643      	mov	r3, r8
 8004022:	18e3      	adds	r3, r4, r3
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004028:	464b      	mov	r3, r9
 800402a:	eb45 0303 	adc.w	r3, r5, r3
 800402e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800403e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800404e:	4629      	mov	r1, r5
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	4621      	mov	r1, r4
 8004054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004058:	4621      	mov	r1, r4
 800405a:	008a      	lsls	r2, r1, #2
 800405c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004060:	f7fc f8ba 	bl	80001d8 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4b60      	ldr	r3, [pc, #384]	@ (80041ec <UART_SetConfig+0x4e4>)
 800406a:	fba3 2302 	umull	r2, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	011c      	lsls	r4, r3, #4
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800407c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	61b9      	str	r1, [r7, #24]
 800408c:	415b      	adcs	r3, r3
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004094:	4641      	mov	r1, r8
 8004096:	1851      	adds	r1, r2, r1
 8004098:	6139      	str	r1, [r7, #16]
 800409a:	4649      	mov	r1, r9
 800409c:	414b      	adcs	r3, r1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ac:	4659      	mov	r1, fp
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b6:	4651      	mov	r1, sl
 80040b8:	00ca      	lsls	r2, r1, #3
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	4642      	mov	r2, r8
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c8:	464b      	mov	r3, r9
 80040ca:	460a      	mov	r2, r1
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040ec:	4649      	mov	r1, r9
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	4641      	mov	r1, r8
 80040f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f6:	4641      	mov	r1, r8
 80040f8:	008a      	lsls	r2, r1, #2
 80040fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040fe:	f7fc f86b 	bl	80001d8 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4611      	mov	r1, r2
 8004108:	4b38      	ldr	r3, [pc, #224]	@ (80041ec <UART_SetConfig+0x4e4>)
 800410a:	fba3 2301 	umull	r2, r3, r3, r1
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2264      	movs	r2, #100	@ 0x64
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	1acb      	subs	r3, r1, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	3332      	adds	r3, #50	@ 0x32
 800411c:	4a33      	ldr	r2, [pc, #204]	@ (80041ec <UART_SetConfig+0x4e4>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004128:	441c      	add	r4, r3
 800412a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412e:	2200      	movs	r2, #0
 8004130:	673b      	str	r3, [r7, #112]	@ 0x70
 8004132:	677a      	str	r2, [r7, #116]	@ 0x74
 8004134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	415b      	adcs	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004148:	4641      	mov	r1, r8
 800414a:	1851      	adds	r1, r2, r1
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	4649      	mov	r1, r9
 8004150:	414b      	adcs	r3, r1
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004160:	4659      	mov	r1, fp
 8004162:	00cb      	lsls	r3, r1, #3
 8004164:	4651      	mov	r1, sl
 8004166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416a:	4651      	mov	r1, sl
 800416c:	00ca      	lsls	r2, r1, #3
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	4603      	mov	r3, r0
 8004174:	4642      	mov	r2, r8
 8004176:	189b      	adds	r3, r3, r2
 8004178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800417a:	464b      	mov	r3, r9
 800417c:	460a      	mov	r2, r1
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	663b      	str	r3, [r7, #96]	@ 0x60
 800418e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800419c:	4649      	mov	r1, r9
 800419e:	008b      	lsls	r3, r1, #2
 80041a0:	4641      	mov	r1, r8
 80041a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a6:	4641      	mov	r1, r8
 80041a8:	008a      	lsls	r2, r1, #2
 80041aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ae:	f7fc f813 	bl	80001d8 <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <UART_SetConfig+0x4e4>)
 80041b8:	fba3 1302 	umull	r1, r3, r3, r2
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	2164      	movs	r1, #100	@ 0x64
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	3332      	adds	r3, #50	@ 0x32
 80041ca:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <UART_SetConfig+0x4e4>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4422      	add	r2, r4
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041e6:	46bd      	mov	sp, r7
 80041e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ec:	51eb851f 	.word	0x51eb851f

080041f0 <malloc>:
 80041f0:	4b02      	ldr	r3, [pc, #8]	@ (80041fc <malloc+0xc>)
 80041f2:	4601      	mov	r1, r0
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	f000 b82d 	b.w	8004254 <_malloc_r>
 80041fa:	bf00      	nop
 80041fc:	2000000c 	.word	0x2000000c

08004200 <free>:
 8004200:	4b02      	ldr	r3, [pc, #8]	@ (800420c <free+0xc>)
 8004202:	4601      	mov	r1, r0
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f000 b8f5 	b.w	80043f4 <_free_r>
 800420a:	bf00      	nop
 800420c:	2000000c 	.word	0x2000000c

08004210 <sbrk_aligned>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	4e0f      	ldr	r6, [pc, #60]	@ (8004250 <sbrk_aligned+0x40>)
 8004214:	460c      	mov	r4, r1
 8004216:	6831      	ldr	r1, [r6, #0]
 8004218:	4605      	mov	r5, r0
 800421a:	b911      	cbnz	r1, 8004222 <sbrk_aligned+0x12>
 800421c:	f000 f8ae 	bl	800437c <_sbrk_r>
 8004220:	6030      	str	r0, [r6, #0]
 8004222:	4621      	mov	r1, r4
 8004224:	4628      	mov	r0, r5
 8004226:	f000 f8a9 	bl	800437c <_sbrk_r>
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d103      	bne.n	8004236 <sbrk_aligned+0x26>
 800422e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004232:	4620      	mov	r0, r4
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	1cc4      	adds	r4, r0, #3
 8004238:	f024 0403 	bic.w	r4, r4, #3
 800423c:	42a0      	cmp	r0, r4
 800423e:	d0f8      	beq.n	8004232 <sbrk_aligned+0x22>
 8004240:	1a21      	subs	r1, r4, r0
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f89a 	bl	800437c <_sbrk_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d1f2      	bne.n	8004232 <sbrk_aligned+0x22>
 800424c:	e7ef      	b.n	800422e <sbrk_aligned+0x1e>
 800424e:	bf00      	nop
 8004250:	20000264 	.word	0x20000264

08004254 <_malloc_r>:
 8004254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004258:	1ccd      	adds	r5, r1, #3
 800425a:	f025 0503 	bic.w	r5, r5, #3
 800425e:	3508      	adds	r5, #8
 8004260:	2d0c      	cmp	r5, #12
 8004262:	bf38      	it	cc
 8004264:	250c      	movcc	r5, #12
 8004266:	2d00      	cmp	r5, #0
 8004268:	4606      	mov	r6, r0
 800426a:	db01      	blt.n	8004270 <_malloc_r+0x1c>
 800426c:	42a9      	cmp	r1, r5
 800426e:	d904      	bls.n	800427a <_malloc_r+0x26>
 8004270:	230c      	movs	r3, #12
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	2000      	movs	r0, #0
 8004276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004350 <_malloc_r+0xfc>
 800427e:	f000 f869 	bl	8004354 <__malloc_lock>
 8004282:	f8d8 3000 	ldr.w	r3, [r8]
 8004286:	461c      	mov	r4, r3
 8004288:	bb44      	cbnz	r4, 80042dc <_malloc_r+0x88>
 800428a:	4629      	mov	r1, r5
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff ffbf 	bl	8004210 <sbrk_aligned>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	4604      	mov	r4, r0
 8004296:	d158      	bne.n	800434a <_malloc_r+0xf6>
 8004298:	f8d8 4000 	ldr.w	r4, [r8]
 800429c:	4627      	mov	r7, r4
 800429e:	2f00      	cmp	r7, #0
 80042a0:	d143      	bne.n	800432a <_malloc_r+0xd6>
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	d04b      	beq.n	800433e <_malloc_r+0xea>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	4639      	mov	r1, r7
 80042aa:	4630      	mov	r0, r6
 80042ac:	eb04 0903 	add.w	r9, r4, r3
 80042b0:	f000 f864 	bl	800437c <_sbrk_r>
 80042b4:	4581      	cmp	r9, r0
 80042b6:	d142      	bne.n	800433e <_malloc_r+0xea>
 80042b8:	6821      	ldr	r1, [r4, #0]
 80042ba:	1a6d      	subs	r5, r5, r1
 80042bc:	4629      	mov	r1, r5
 80042be:	4630      	mov	r0, r6
 80042c0:	f7ff ffa6 	bl	8004210 <sbrk_aligned>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d03a      	beq.n	800433e <_malloc_r+0xea>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	442b      	add	r3, r5
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	f8d8 3000 	ldr.w	r3, [r8]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	bb62      	cbnz	r2, 8004330 <_malloc_r+0xdc>
 80042d6:	f8c8 7000 	str.w	r7, [r8]
 80042da:	e00f      	b.n	80042fc <_malloc_r+0xa8>
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	1b52      	subs	r2, r2, r5
 80042e0:	d420      	bmi.n	8004324 <_malloc_r+0xd0>
 80042e2:	2a0b      	cmp	r2, #11
 80042e4:	d917      	bls.n	8004316 <_malloc_r+0xc2>
 80042e6:	1961      	adds	r1, r4, r5
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	6025      	str	r5, [r4, #0]
 80042ec:	bf18      	it	ne
 80042ee:	6059      	strne	r1, [r3, #4]
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	bf08      	it	eq
 80042f4:	f8c8 1000 	streq.w	r1, [r8]
 80042f8:	5162      	str	r2, [r4, r5]
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f82f 	bl	8004360 <__malloc_unlock>
 8004302:	f104 000b 	add.w	r0, r4, #11
 8004306:	1d23      	adds	r3, r4, #4
 8004308:	f020 0007 	bic.w	r0, r0, #7
 800430c:	1ac2      	subs	r2, r0, r3
 800430e:	bf1c      	itt	ne
 8004310:	1a1b      	subne	r3, r3, r0
 8004312:	50a3      	strne	r3, [r4, r2]
 8004314:	e7af      	b.n	8004276 <_malloc_r+0x22>
 8004316:	6862      	ldr	r2, [r4, #4]
 8004318:	42a3      	cmp	r3, r4
 800431a:	bf0c      	ite	eq
 800431c:	f8c8 2000 	streq.w	r2, [r8]
 8004320:	605a      	strne	r2, [r3, #4]
 8004322:	e7eb      	b.n	80042fc <_malloc_r+0xa8>
 8004324:	4623      	mov	r3, r4
 8004326:	6864      	ldr	r4, [r4, #4]
 8004328:	e7ae      	b.n	8004288 <_malloc_r+0x34>
 800432a:	463c      	mov	r4, r7
 800432c:	687f      	ldr	r7, [r7, #4]
 800432e:	e7b6      	b.n	800429e <_malloc_r+0x4a>
 8004330:	461a      	mov	r2, r3
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	d1fb      	bne.n	8004330 <_malloc_r+0xdc>
 8004338:	2300      	movs	r3, #0
 800433a:	6053      	str	r3, [r2, #4]
 800433c:	e7de      	b.n	80042fc <_malloc_r+0xa8>
 800433e:	230c      	movs	r3, #12
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	4630      	mov	r0, r6
 8004344:	f000 f80c 	bl	8004360 <__malloc_unlock>
 8004348:	e794      	b.n	8004274 <_malloc_r+0x20>
 800434a:	6005      	str	r5, [r0, #0]
 800434c:	e7d6      	b.n	80042fc <_malloc_r+0xa8>
 800434e:	bf00      	nop
 8004350:	20000268 	.word	0x20000268

08004354 <__malloc_lock>:
 8004354:	4801      	ldr	r0, [pc, #4]	@ (800435c <__malloc_lock+0x8>)
 8004356:	f000 b84b 	b.w	80043f0 <__retarget_lock_acquire_recursive>
 800435a:	bf00      	nop
 800435c:	200003a4 	.word	0x200003a4

08004360 <__malloc_unlock>:
 8004360:	4801      	ldr	r0, [pc, #4]	@ (8004368 <__malloc_unlock+0x8>)
 8004362:	f000 b846 	b.w	80043f2 <__retarget_lock_release_recursive>
 8004366:	bf00      	nop
 8004368:	200003a4 	.word	0x200003a4

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <_sbrk_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d06      	ldr	r5, [pc, #24]	@ (8004398 <_sbrk_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fd f934 	bl	80015f4 <_sbrk>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_sbrk_r+0x1a>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_sbrk_r+0x1a>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	200003a8 	.word	0x200003a8

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	@ (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	@ (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	@ (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	@ (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	@ (80043ec <__libc_init_array+0x44>)
 80043bc:	f000 f864 	bl	8004488 <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	080044c0 	.word	0x080044c0
 80043e4:	080044c0 	.word	0x080044c0
 80043e8:	080044c0 	.word	0x080044c0
 80043ec:	080044c4 	.word	0x080044c4

080043f0 <__retarget_lock_acquire_recursive>:
 80043f0:	4770      	bx	lr

080043f2 <__retarget_lock_release_recursive>:
 80043f2:	4770      	bx	lr

080043f4 <_free_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4605      	mov	r5, r0
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d041      	beq.n	8004480 <_free_r+0x8c>
 80043fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004400:	1f0c      	subs	r4, r1, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfb8      	it	lt
 8004406:	18e4      	addlt	r4, r4, r3
 8004408:	f7ff ffa4 	bl	8004354 <__malloc_lock>
 800440c:	4a1d      	ldr	r2, [pc, #116]	@ (8004484 <_free_r+0x90>)
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	b933      	cbnz	r3, 8004420 <_free_r+0x2c>
 8004412:	6063      	str	r3, [r4, #4]
 8004414:	6014      	str	r4, [r2, #0]
 8004416:	4628      	mov	r0, r5
 8004418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800441c:	f7ff bfa0 	b.w	8004360 <__malloc_unlock>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d908      	bls.n	8004436 <_free_r+0x42>
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	1821      	adds	r1, r4, r0
 8004428:	428b      	cmp	r3, r1
 800442a:	bf01      	itttt	eq
 800442c:	6819      	ldreq	r1, [r3, #0]
 800442e:	685b      	ldreq	r3, [r3, #4]
 8004430:	1809      	addeq	r1, r1, r0
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	e7ed      	b.n	8004412 <_free_r+0x1e>
 8004436:	461a      	mov	r2, r3
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b10b      	cbz	r3, 8004440 <_free_r+0x4c>
 800443c:	42a3      	cmp	r3, r4
 800443e:	d9fa      	bls.n	8004436 <_free_r+0x42>
 8004440:	6811      	ldr	r1, [r2, #0]
 8004442:	1850      	adds	r0, r2, r1
 8004444:	42a0      	cmp	r0, r4
 8004446:	d10b      	bne.n	8004460 <_free_r+0x6c>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	4401      	add	r1, r0
 800444c:	1850      	adds	r0, r2, r1
 800444e:	4283      	cmp	r3, r0
 8004450:	6011      	str	r1, [r2, #0]
 8004452:	d1e0      	bne.n	8004416 <_free_r+0x22>
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	6053      	str	r3, [r2, #4]
 800445a:	4408      	add	r0, r1
 800445c:	6010      	str	r0, [r2, #0]
 800445e:	e7da      	b.n	8004416 <_free_r+0x22>
 8004460:	d902      	bls.n	8004468 <_free_r+0x74>
 8004462:	230c      	movs	r3, #12
 8004464:	602b      	str	r3, [r5, #0]
 8004466:	e7d6      	b.n	8004416 <_free_r+0x22>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	1821      	adds	r1, r4, r0
 800446c:	428b      	cmp	r3, r1
 800446e:	bf04      	itt	eq
 8004470:	6819      	ldreq	r1, [r3, #0]
 8004472:	685b      	ldreq	r3, [r3, #4]
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	bf04      	itt	eq
 8004478:	1809      	addeq	r1, r1, r0
 800447a:	6021      	streq	r1, [r4, #0]
 800447c:	6054      	str	r4, [r2, #4]
 800447e:	e7ca      	b.n	8004416 <_free_r+0x22>
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	bf00      	nop
 8004484:	20000268 	.word	0x20000268

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
