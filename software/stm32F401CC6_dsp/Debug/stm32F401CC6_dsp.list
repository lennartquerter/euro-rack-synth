
stm32F401CC6_dsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004fe8  08004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005044  08005044  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800504c  0800504c  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005054  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000078  080050cc  00007078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  080050cc  00007864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b81  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db2  00000000  00000000  00010c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  000129e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000745  00000000  00000000  00013370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cde  00000000  00000000  00013ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d40e  00000000  00000000  0002b793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e2a  00000000  00000000  00038ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb9cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec0  00000000  00000000  000cba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000ce8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fd0 	.word	0x08004fd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004fd0 	.word	0x08004fd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <setVoltageAndCall>:
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
int8_t factor = 100;

void setVoltageAndCall(enum note_name noteName, int32_t delay) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
    double noteVoltage = NOTES_GetVoltage(noteName);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 ff54 	bl	8001a38 <NOTES_GetVoltage>
 8000b90:	ed87 0b04 	vstr	d0, [r7, #16]
    uint8_t voltageLevel = (uint8_t) (noteVoltage * factor);
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <setVoltageAndCall+0x58>)
 8000b96:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fdec 	bl	8000778 <__aeabi_i2d>
 8000ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ba4:	f7ff fb6c 	bl	8000280 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fe4c 	bl	800084c <__aeabi_d2uiz>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
    MCP4728_Write_EXT_Voltage(&hi2c1, MCP4728_CHANNEL_A, voltageLevel);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <setVoltageAndCall+0x5c>)
 8000bc0:	f000 fac3 	bl	800114a <MCP4728_Write_EXT_Voltage>
    HAL_Delay(delay);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f9d2 	bl	8001f70 <HAL_Delay>
}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	2000013c 	.word	0x2000013c

08000bdc <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000be2:	f001 f953 	bl	8001e8c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000be6:	f000 f945 	bl	8000e74 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000bea:	f000 fa43 	bl	8001074 <MX_GPIO_Init>
    MX_DMA_Init();
 8000bee:	f000 fa21 	bl	8001034 <MX_DMA_Init>
    MX_ADC1_Init();
 8000bf2:	f000 f99f 	bl	8000f34 <MX_ADC1_Init>
    MX_I2C1_Init();
 8000bf6:	f000 f9ef 	bl	8000fd8 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c00:	489a      	ldr	r0, [pc, #616]	@ (8000e6c <main+0x290>)
 8000c02:	f002 f9bb 	bl	8002f7c <HAL_GPIO_WritePin>

    MCP4728_Init(&hi2c1);
 8000c06:	489a      	ldr	r0, [pc, #616]	@ (8000e70 <main+0x294>)
 8000c08:	f000 fad2 	bl	80011b0 <MCP4728_Init>
    int32_t ok;

    ok = NOTES_init();
 8000c0c:	f000 fb12 	bl	8001234 <NOTES_init>
 8000c10:	6078      	str	r0, [r7, #4]
    if (ok != 0) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <main+0x48>
        HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c1e:	4893      	ldr	r0, [pc, #588]	@ (8000e6c <main+0x290>)
 8000c20:	f002 f9ac 	bl	8002f7c <HAL_GPIO_WritePin>
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        setVoltageAndCall(NOTE_0_C, 100);
 8000c24:	2164      	movs	r1, #100	@ 0x64
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ffa8 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_C_SHARP, 100);
 8000c2c:	2164      	movs	r1, #100	@ 0x64
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ffa4 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_D, 100);
 8000c34:	2164      	movs	r1, #100	@ 0x64
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff ffa0 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_D_SHARP, 100);
 8000c3c:	2164      	movs	r1, #100	@ 0x64
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f7ff ff9c 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_E, 100);
 8000c44:	2164      	movs	r1, #100	@ 0x64
 8000c46:	2004      	movs	r0, #4
 8000c48:	f7ff ff98 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_F, 100);
 8000c4c:	2164      	movs	r1, #100	@ 0x64
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f7ff ff94 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_F_SHARP, 100);
 8000c54:	2164      	movs	r1, #100	@ 0x64
 8000c56:	2006      	movs	r0, #6
 8000c58:	f7ff ff90 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G, 100);
 8000c5c:	2164      	movs	r1, #100	@ 0x64
 8000c5e:	2007      	movs	r0, #7
 8000c60:	f7ff ff8c 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G_SHARP, 100);
 8000c64:	2164      	movs	r1, #100	@ 0x64
 8000c66:	2008      	movs	r0, #8
 8000c68:	f7ff ff88 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_A, 100);
 8000c6c:	2164      	movs	r1, #100	@ 0x64
 8000c6e:	2009      	movs	r0, #9
 8000c70:	f7ff ff84 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_A_SHARP, 100);
 8000c74:	2164      	movs	r1, #100	@ 0x64
 8000c76:	200a      	movs	r0, #10
 8000c78:	f7ff ff80 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_B, 100);
 8000c7c:	2164      	movs	r1, #100	@ 0x64
 8000c7e:	200b      	movs	r0, #11
 8000c80:	f7ff ff7c 	bl	8000b7c <setVoltageAndCall>
        HAL_Delay(250);
 8000c84:	20fa      	movs	r0, #250	@ 0xfa
 8000c86:	f001 f973 	bl	8001f70 <HAL_Delay>
        setVoltageAndCall(NOTE_1_C, 100);
 8000c8a:	2164      	movs	r1, #100	@ 0x64
 8000c8c:	200c      	movs	r0, #12
 8000c8e:	f7ff ff75 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_C_SHARP, 100);
 8000c92:	2164      	movs	r1, #100	@ 0x64
 8000c94:	200d      	movs	r0, #13
 8000c96:	f7ff ff71 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_D, 100);
 8000c9a:	2164      	movs	r1, #100	@ 0x64
 8000c9c:	200e      	movs	r0, #14
 8000c9e:	f7ff ff6d 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_D_SHARP, 100);
 8000ca2:	2164      	movs	r1, #100	@ 0x64
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f7ff ff69 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_E, 100);
 8000caa:	2164      	movs	r1, #100	@ 0x64
 8000cac:	2010      	movs	r0, #16
 8000cae:	f7ff ff65 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_F, 100);
 8000cb2:	2164      	movs	r1, #100	@ 0x64
 8000cb4:	2011      	movs	r0, #17
 8000cb6:	f7ff ff61 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_F_SHARP, 100);
 8000cba:	2164      	movs	r1, #100	@ 0x64
 8000cbc:	2012      	movs	r0, #18
 8000cbe:	f7ff ff5d 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_G, 100);
 8000cc2:	2164      	movs	r1, #100	@ 0x64
 8000cc4:	2013      	movs	r0, #19
 8000cc6:	f7ff ff59 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_G_SHARP, 100);
 8000cca:	2164      	movs	r1, #100	@ 0x64
 8000ccc:	2014      	movs	r0, #20
 8000cce:	f7ff ff55 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_A, 100);
 8000cd2:	2164      	movs	r1, #100	@ 0x64
 8000cd4:	2015      	movs	r0, #21
 8000cd6:	f7ff ff51 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_A_SHARP, 100);
 8000cda:	2164      	movs	r1, #100	@ 0x64
 8000cdc:	2016      	movs	r0, #22
 8000cde:	f7ff ff4d 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_1_B, 100);
 8000ce2:	2164      	movs	r1, #100	@ 0x64
 8000ce4:	2017      	movs	r0, #23
 8000ce6:	f7ff ff49 	bl	8000b7c <setVoltageAndCall>
        HAL_Delay(250);
 8000cea:	20fa      	movs	r0, #250	@ 0xfa
 8000cec:	f001 f940 	bl	8001f70 <HAL_Delay>
        setVoltageAndCall(NOTE_2_C, 100);
 8000cf0:	2164      	movs	r1, #100	@ 0x64
 8000cf2:	2018      	movs	r0, #24
 8000cf4:	f7ff ff42 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_C_SHARP, 100);
 8000cf8:	2164      	movs	r1, #100	@ 0x64
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f7ff ff3e 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_D, 100);
 8000d00:	2164      	movs	r1, #100	@ 0x64
 8000d02:	201a      	movs	r0, #26
 8000d04:	f7ff ff3a 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_D_SHARP, 100);
 8000d08:	2164      	movs	r1, #100	@ 0x64
 8000d0a:	201b      	movs	r0, #27
 8000d0c:	f7ff ff36 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_E, 100);
 8000d10:	2164      	movs	r1, #100	@ 0x64
 8000d12:	201c      	movs	r0, #28
 8000d14:	f7ff ff32 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_F, 100);
 8000d18:	2164      	movs	r1, #100	@ 0x64
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f7ff ff2e 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_F_SHARP, 100);
 8000d20:	2164      	movs	r1, #100	@ 0x64
 8000d22:	201e      	movs	r0, #30
 8000d24:	f7ff ff2a 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_G, 100);
 8000d28:	2164      	movs	r1, #100	@ 0x64
 8000d2a:	201f      	movs	r0, #31
 8000d2c:	f7ff ff26 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_G_SHARP, 100);
 8000d30:	2164      	movs	r1, #100	@ 0x64
 8000d32:	2020      	movs	r0, #32
 8000d34:	f7ff ff22 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_A, 100);
 8000d38:	2164      	movs	r1, #100	@ 0x64
 8000d3a:	2021      	movs	r0, #33	@ 0x21
 8000d3c:	f7ff ff1e 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_A_SHARP, 100);
 8000d40:	2164      	movs	r1, #100	@ 0x64
 8000d42:	2022      	movs	r0, #34	@ 0x22
 8000d44:	f7ff ff1a 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_2_B, 100);
 8000d48:	2164      	movs	r1, #100	@ 0x64
 8000d4a:	2023      	movs	r0, #35	@ 0x23
 8000d4c:	f7ff ff16 	bl	8000b7c <setVoltageAndCall>
        HAL_Delay(250);
 8000d50:	20fa      	movs	r0, #250	@ 0xfa
 8000d52:	f001 f90d 	bl	8001f70 <HAL_Delay>
        setVoltageAndCall(NOTE_3_C, 100);
 8000d56:	2164      	movs	r1, #100	@ 0x64
 8000d58:	2024      	movs	r0, #36	@ 0x24
 8000d5a:	f7ff ff0f 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_C_SHARP, 100);
 8000d5e:	2164      	movs	r1, #100	@ 0x64
 8000d60:	2025      	movs	r0, #37	@ 0x25
 8000d62:	f7ff ff0b 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_D, 100);
 8000d66:	2164      	movs	r1, #100	@ 0x64
 8000d68:	2026      	movs	r0, #38	@ 0x26
 8000d6a:	f7ff ff07 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_D_SHARP, 100);
 8000d6e:	2164      	movs	r1, #100	@ 0x64
 8000d70:	2027      	movs	r0, #39	@ 0x27
 8000d72:	f7ff ff03 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_E, 100);
 8000d76:	2164      	movs	r1, #100	@ 0x64
 8000d78:	2028      	movs	r0, #40	@ 0x28
 8000d7a:	f7ff feff 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_F, 100);
 8000d7e:	2164      	movs	r1, #100	@ 0x64
 8000d80:	2029      	movs	r0, #41	@ 0x29
 8000d82:	f7ff fefb 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_F_SHARP, 100);
 8000d86:	2164      	movs	r1, #100	@ 0x64
 8000d88:	202a      	movs	r0, #42	@ 0x2a
 8000d8a:	f7ff fef7 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_G, 100);
 8000d8e:	2164      	movs	r1, #100	@ 0x64
 8000d90:	202b      	movs	r0, #43	@ 0x2b
 8000d92:	f7ff fef3 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_G_SHARP, 100);
 8000d96:	2164      	movs	r1, #100	@ 0x64
 8000d98:	202c      	movs	r0, #44	@ 0x2c
 8000d9a:	f7ff feef 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_A, 100);
 8000d9e:	2164      	movs	r1, #100	@ 0x64
 8000da0:	202d      	movs	r0, #45	@ 0x2d
 8000da2:	f7ff feeb 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_A_SHARP, 100);
 8000da6:	2164      	movs	r1, #100	@ 0x64
 8000da8:	202e      	movs	r0, #46	@ 0x2e
 8000daa:	f7ff fee7 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_3_B, 100);
 8000dae:	2164      	movs	r1, #100	@ 0x64
 8000db0:	202f      	movs	r0, #47	@ 0x2f
 8000db2:	f7ff fee3 	bl	8000b7c <setVoltageAndCall>
        HAL_Delay(1000);
 8000db6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dba:	f001 f8d9 	bl	8001f70 <HAL_Delay>


//        C – C – G – G – A – A – G – F – F – E – E – D – D – C – G – G – F – F – E – E – D – G – G – F – F – E – E – D – C – G – G – A – G – F – F – E – E – D – C.
        setVoltageAndCall(NOTE_0_C, 200);
 8000dbe:	21c8      	movs	r1, #200	@ 0xc8
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fedb 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_C, 100);
 8000dc6:	2164      	movs	r1, #100	@ 0x64
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fed7 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G, 200);
 8000dce:	21c8      	movs	r1, #200	@ 0xc8
 8000dd0:	2007      	movs	r0, #7
 8000dd2:	f7ff fed3 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G, 100);
 8000dd6:	2164      	movs	r1, #100	@ 0x64
 8000dd8:	2007      	movs	r0, #7
 8000dda:	f7ff fecf 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_A, 200);
 8000dde:	21c8      	movs	r1, #200	@ 0xc8
 8000de0:	2009      	movs	r0, #9
 8000de2:	f7ff fecb 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_A, 200);
 8000de6:	21c8      	movs	r1, #200	@ 0xc8
 8000de8:	2009      	movs	r0, #9
 8000dea:	f7ff fec7 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G, 100);
 8000dee:	2164      	movs	r1, #100	@ 0x64
 8000df0:	2007      	movs	r0, #7
 8000df2:	f7ff fec3 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_F, 200);
 8000df6:	21c8      	movs	r1, #200	@ 0xc8
 8000df8:	2005      	movs	r0, #5
 8000dfa:	f7ff febf 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_F, 200);
 8000dfe:	21c8      	movs	r1, #200	@ 0xc8
 8000e00:	2005      	movs	r0, #5
 8000e02:	f7ff febb 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_E, 200);
 8000e06:	21c8      	movs	r1, #200	@ 0xc8
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f7ff feb7 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_E, 200);
 8000e0e:	21c8      	movs	r1, #200	@ 0xc8
 8000e10:	2004      	movs	r0, #4
 8000e12:	f7ff feb3 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_D, 200);
 8000e16:	21c8      	movs	r1, #200	@ 0xc8
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff feaf 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_D, 200);
 8000e1e:	21c8      	movs	r1, #200	@ 0xc8
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff feab 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_C, 400);
 8000e26:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fea6 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G, 200);
 8000e30:	21c8      	movs	r1, #200	@ 0xc8
 8000e32:	2007      	movs	r0, #7
 8000e34:	f7ff fea2 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_G, 200);
 8000e38:	21c8      	movs	r1, #200	@ 0xc8
 8000e3a:	2007      	movs	r0, #7
 8000e3c:	f7ff fe9e 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_F, 100);
 8000e40:	2164      	movs	r1, #100	@ 0x64
 8000e42:	2005      	movs	r0, #5
 8000e44:	f7ff fe9a 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_F, 200);
 8000e48:	21c8      	movs	r1, #200	@ 0xc8
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f7ff fe96 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_E, 150);
 8000e50:	2196      	movs	r1, #150	@ 0x96
 8000e52:	2004      	movs	r0, #4
 8000e54:	f7ff fe92 	bl	8000b7c <setVoltageAndCall>
        setVoltageAndCall(NOTE_0_E, 200);
 8000e58:	21c8      	movs	r1, #200	@ 0xc8
 8000e5a:	2004      	movs	r0, #4
 8000e5c:	f7ff fe8e 	bl	8000b7c <setVoltageAndCall>

        HAL_Delay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e64:	f001 f884 	bl	8001f70 <HAL_Delay>
        setVoltageAndCall(NOTE_0_C, 100);
 8000e68:	bf00      	nop
 8000e6a:	e6db      	b.n	8000c24 <main+0x48>
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	2000013c 	.word	0x2000013c

08000e74 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	@ 0x50
 8000e78:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2230      	movs	r2, #48	@ 0x30
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fa4a 	bl	800431c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <SystemClock_Config+0xb8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	4a22      	ldr	r2, [pc, #136]	@ (8000f2c <SystemClock_Config+0xb8>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea8:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <SystemClock_Config+0xb8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <SystemClock_Config+0xbc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <SystemClock_Config+0xbc>)
 8000ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <SystemClock_Config+0xbc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2310      	movs	r3, #16
 8000ede:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fcff 	bl	80038ec <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x84>
        Error_Handler();
 8000ef4:	f000 f910 	bl	8001118 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 ff62 	bl	8003ddc <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xae>
        Error_Handler();
 8000f1e:	f000 f8fb 	bl	8001118 <Error_Handler>
    }
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	@ 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f48:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <MX_ADC1_Init+0x9c>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f52:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f76:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <MX_ADC1_Init+0xa0>)
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f94:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000f96:	f001 f80f 	bl	8001fb8 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x70>
        Error_Handler();
 8000fa0:	f000 f8ba 	bl	8001118 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_ADC1_Init+0x98>)
 8000fb6:	f001 f843 	bl	8002040 <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x90>
        Error_Handler();
 8000fc0:	f000 f8aa 	bl	8001118 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000094 	.word	0x20000094
 8000fd0:	40012000 	.word	0x40012000
 8000fd4:	0f000001 	.word	0x0f000001

08000fd8 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	@ (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 ffcb 	bl	8002fb0 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001020:	f000 f87a 	bl	8001118 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000013c 	.word	0x2000013c
 800102c:	40005400 	.word	0x40005400
 8001030:	000186a0 	.word	0x000186a0

08001034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_DMA_Init+0x3c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <MX_DMA_Init+0x3c>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_DMA_Init+0x3c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2038      	movs	r0, #56	@ 0x38
 800105c:	f001 fae9 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001060:	2038      	movs	r0, #56	@ 0x38
 8001062:	f001 fb02 	bl	800266a <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <MX_GPIO_Init+0x9c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a1f      	ldr	r2, [pc, #124]	@ (8001110 <MX_GPIO_Init+0x9c>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <MX_GPIO_Init+0x9c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_GPIO_Init+0x9c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <MX_GPIO_Init+0x9c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_GPIO_Init+0x9c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_GPIO_Init+0x9c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <MX_GPIO_Init+0x9c>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_GPIO_Init+0x9c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e4:	480b      	ldr	r0, [pc, #44]	@ (8001114 <MX_GPIO_Init+0xa0>)
 80010e6:	f001 ff49 	bl	8002f7c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : INTERNAL_LED_Pin */
    GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 80010ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	4804      	ldr	r0, [pc, #16]	@ (8001114 <MX_GPIO_Init+0xa0>)
 8001104:	f001 fdb6 	bl	8002c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40020800 	.word	0x40020800

08001118 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <Error_Handler+0x8>

08001124 <MCP4728_Write_GeneralCall>:
/*
 * Calls the I2CHandler with a command
 */


void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Master_Transmit(I2CHandler, 0x00, &command, 1, HAL_MAX_DELAY);
 8001130:	1cfa      	adds	r2, r7, #3
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f002 f87b 	bl	8003238 <HAL_I2C_Master_Transmit>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <MCP4728_Write_EXT_Voltage>:
}




void MCP4728_Write_EXT_Voltage(I2C_HandleTypeDef *I2CHandler, uint16_t channel, uint8_t output) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af02      	add	r7, sp, #8
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
 8001156:	4613      	mov	r3, r2
 8001158:	707b      	strb	r3, [r7, #1]
    uint8_t buf[3];
    // MASK only the 8 LSB
    uint8_t lowByte = output & 0xff;
 800115a:	787b      	ldrb	r3, [r7, #1]
 800115c:	73fb      	strb	r3, [r7, #15]
    // SHIFT RIGHT (12 bit shift --> 4 MSB)
    uint8_t highByte = (output >> 8);
 800115e:	787b      	ldrb	r3, [r7, #1]
 8001160:	121b      	asrs	r3, r3, #8
 8001162:	73bb      	strb	r3, [r7, #14]

    buf[0] = (MCP4728_CMD_DACWRITE_SINGLE) | (channel << 1);
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	723b      	strb	r3, [r7, #8]
    // 0 = VDD
    // 1 = Internal voltage reference (2.048V)
    buf[1] = (0 << 7) | (channel << 5) | highByte;
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	b25a      	sxtb	r2, r3
 800117a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800117e:	4313      	orrs	r3, r2
 8001180:	b25b      	sxtb	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	727b      	strb	r3, [r7, #9]
    buf[2] = lowByte;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	72bb      	strb	r3, [r7, #10]

    HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASE_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2303      	movs	r3, #3
 8001196:	21c0      	movs	r1, #192	@ 0xc0
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f002 f84d 	bl	8003238 <HAL_I2C_Master_Transmit>

    MCP4728_Write_GeneralCall(I2CHandler, MCP4728_GENERAL_SWUPDATE);
 800119e:	2108      	movs	r1, #8
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ffbf 	bl	8001124 <MCP4728_Write_GeneralCall>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MCP4728_Init>:
/*
 * Initialize the MCP4728
 * Resets & wakes up the I2C handler
 */

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]
    printf("write");
 80011b8:	481d      	ldr	r0, [pc, #116]	@ (8001230 <MCP4728_Init+0x80>)
 80011ba:	f003 f89d 	bl	80042f8 <iprintf>

    MCP4728_Write_GeneralCall(I2CHandler, MCP4728_GENERAL_RESET);
 80011be:	2106      	movs	r1, #6
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffaf 	bl	8001124 <MCP4728_Write_GeneralCall>
    MCP4728_Write_GeneralCall(I2CHandler, MCP4728_GENERAL_WAKEUP);
 80011c6:	2109      	movs	r1, #9
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffab 	bl	8001124 <MCP4728_Write_GeneralCall>

    uint8_t buf[9];

    buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 80011ce:	2350      	movs	r3, #80	@ 0x50
 80011d0:	733b      	strb	r3, [r7, #12]

    for (uint8_t i = 1; i <= 4; i++) {
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
 80011d6:	e015      	b.n	8001204 <MCP4728_Init+0x54>
        buf[(i * 2) + 1] = 0x00;
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	3301      	adds	r3, #1
 80011de:	3318      	adds	r3, #24
 80011e0:	443b      	add	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        buf[(i * 2)] = (0 << 7) | ((i - 1) << 4) | 0x0;
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	3318      	adds	r3, #24
 80011f8:	443b      	add	r3, r7
 80011fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 1; i <= 4; i++) {
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	3301      	adds	r3, #1
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d9e6      	bls.n	80011d8 <MCP4728_Init+0x28>
    }

    HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASE_ADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2309      	movs	r3, #9
 8001216:	21c0      	movs	r1, #192	@ 0xc0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f002 f80d 	bl	8003238 <HAL_I2C_Master_Transmit>
    MCP4728_Write_GeneralCall(I2CHandler, MCP4728_GENERAL_SWUPDATE);
 800121e:	2108      	movs	r1, #8
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff7f 	bl	8001124 <MCP4728_Write_GeneralCall>
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	08004fe8 	.word	0x08004fe8

08001234 <NOTES_init>:
#include "notes.h"

struct notes piano;
double set_voltage_divider = 0.08333333333;

int32_t NOTES_init() {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    memset(&piano, 0, sizeof(piano));
 8001238:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800123c:	2100      	movs	r1, #0
 800123e:	48af      	ldr	r0, [pc, #700]	@ (80014fc <NOTES_init+0x2c8>)
 8001240:	f003 f86c 	bl	800431c <memset>

    piano.keys[NOTE_0_C].voltage = 0;
 8001244:	49ad      	ldr	r1, [pc, #692]	@ (80014fc <NOTES_init+0x2c8>)
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	e9c1 2300 	strd	r2, r3, [r1]
    piano.keys[NOTE_0_C].offset = 0;
 8001252:	4baa      	ldr	r3, [pc, #680]	@ (80014fc <NOTES_init+0x2c8>)
 8001254:	2200      	movs	r2, #0
 8001256:	811a      	strh	r2, [r3, #8]
    piano.keys[NOTE_0_C].note_name = NOTE_0_C;
 8001258:	4ba8      	ldr	r3, [pc, #672]	@ (80014fc <NOTES_init+0x2c8>)
 800125a:	2200      	movs	r2, #0
 800125c:	729a      	strb	r2, [r3, #10]

    piano.keys[NOTE_0_C_SHARP].voltage = set_voltage_divider * 1;
 800125e:	4ba8      	ldr	r3, [pc, #672]	@ (8001500 <NOTES_init+0x2cc>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	49a5      	ldr	r1, [pc, #660]	@ (80014fc <NOTES_init+0x2c8>)
 8001266:	e9c1 2304 	strd	r2, r3, [r1, #16]
    piano.keys[NOTE_0_C_SHARP].offset = 0;
 800126a:	4ba4      	ldr	r3, [pc, #656]	@ (80014fc <NOTES_init+0x2c8>)
 800126c:	2200      	movs	r2, #0
 800126e:	831a      	strh	r2, [r3, #24]
    piano.keys[NOTE_0_C_SHARP].note_name = NOTE_0_C_SHARP;
 8001270:	4ba2      	ldr	r3, [pc, #648]	@ (80014fc <NOTES_init+0x2c8>)
 8001272:	2201      	movs	r2, #1
 8001274:	769a      	strb	r2, [r3, #26]

    piano.keys[NOTE_0_D].voltage = set_voltage_divider * 2;
 8001276:	4ba2      	ldr	r3, [pc, #648]	@ (8001500 <NOTES_init+0x2cc>)
 8001278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	f7ff f92e 	bl	80004e0 <__adddf3>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	499c      	ldr	r1, [pc, #624]	@ (80014fc <NOTES_init+0x2c8>)
 800128a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    piano.keys[NOTE_0_D].offset = 0;
 800128e:	4b9b      	ldr	r3, [pc, #620]	@ (80014fc <NOTES_init+0x2c8>)
 8001290:	2200      	movs	r2, #0
 8001292:	851a      	strh	r2, [r3, #40]	@ 0x28
    piano.keys[NOTE_0_D].note_name = NOTE_0_D;
 8001294:	4b99      	ldr	r3, [pc, #612]	@ (80014fc <NOTES_init+0x2c8>)
 8001296:	2202      	movs	r2, #2
 8001298:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    piano.keys[NOTE_0_D_SHARP].voltage = set_voltage_divider * 3;
 800129c:	4b98      	ldr	r3, [pc, #608]	@ (8001500 <NOTES_init+0x2cc>)
 800129e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b97      	ldr	r3, [pc, #604]	@ (8001504 <NOTES_init+0x2d0>)
 80012a8:	f7fe ffea 	bl	8000280 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4992      	ldr	r1, [pc, #584]	@ (80014fc <NOTES_init+0x2c8>)
 80012b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    piano.keys[NOTE_0_D_SHARP].offset = 0;
 80012b6:	4b91      	ldr	r3, [pc, #580]	@ (80014fc <NOTES_init+0x2c8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	871a      	strh	r2, [r3, #56]	@ 0x38
    piano.keys[NOTE_0_D_SHARP].note_name = NOTE_0_D_SHARP;
 80012bc:	4b8f      	ldr	r3, [pc, #572]	@ (80014fc <NOTES_init+0x2c8>)
 80012be:	2203      	movs	r2, #3
 80012c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    piano.keys[NOTE_0_E].voltage = set_voltage_divider * 4;
 80012c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001500 <NOTES_init+0x2cc>)
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001508 <NOTES_init+0x2d4>)
 80012d0:	f7fe ffd6 	bl	8000280 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4988      	ldr	r1, [pc, #544]	@ (80014fc <NOTES_init+0x2c8>)
 80012da:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    piano.keys[NOTE_0_E].offset = 0;
 80012de:	4b87      	ldr	r3, [pc, #540]	@ (80014fc <NOTES_init+0x2c8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    piano.keys[NOTE_0_E].note_name = NOTE_0_E;
 80012e6:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <NOTES_init+0x2c8>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    piano.keys[NOTE_0_F].voltage = set_voltage_divider * 5;
 80012ee:	4b84      	ldr	r3, [pc, #528]	@ (8001500 <NOTES_init+0x2cc>)
 80012f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b84      	ldr	r3, [pc, #528]	@ (800150c <NOTES_init+0x2d8>)
 80012fa:	f7fe ffc1 	bl	8000280 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	497e      	ldr	r1, [pc, #504]	@ (80014fc <NOTES_init+0x2c8>)
 8001304:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    piano.keys[NOTE_0_F].offset = 0;
 8001308:	4b7c      	ldr	r3, [pc, #496]	@ (80014fc <NOTES_init+0x2c8>)
 800130a:	2200      	movs	r2, #0
 800130c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    piano.keys[NOTE_0_F].note_name = NOTE_0_F;
 8001310:	4b7a      	ldr	r3, [pc, #488]	@ (80014fc <NOTES_init+0x2c8>)
 8001312:	2205      	movs	r2, #5
 8001314:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a

    piano.keys[NOTE_0_F_SHARP].voltage = set_voltage_divider * 6;
 8001318:	4b79      	ldr	r3, [pc, #484]	@ (8001500 <NOTES_init+0x2cc>)
 800131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b7b      	ldr	r3, [pc, #492]	@ (8001510 <NOTES_init+0x2dc>)
 8001324:	f7fe ffac 	bl	8000280 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4973      	ldr	r1, [pc, #460]	@ (80014fc <NOTES_init+0x2c8>)
 800132e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    piano.keys[NOTE_0_F_SHARP].offset = 0;
 8001332:	4b72      	ldr	r3, [pc, #456]	@ (80014fc <NOTES_init+0x2c8>)
 8001334:	2200      	movs	r2, #0
 8001336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    piano.keys[NOTE_0_F_SHARP].note_name = NOTE_0_F_SHARP;
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <NOTES_init+0x2c8>)
 800133c:	2206      	movs	r2, #6
 800133e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    piano.keys[NOTE_0_G].voltage = set_voltage_divider * 7;
 8001342:	4b6f      	ldr	r3, [pc, #444]	@ (8001500 <NOTES_init+0x2cc>)
 8001344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b71      	ldr	r3, [pc, #452]	@ (8001514 <NOTES_init+0x2e0>)
 800134e:	f7fe ff97 	bl	8000280 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4969      	ldr	r1, [pc, #420]	@ (80014fc <NOTES_init+0x2c8>)
 8001358:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    piano.keys[NOTE_0_G].offset = 0;
 800135c:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <NOTES_init+0x2c8>)
 800135e:	2200      	movs	r2, #0
 8001360:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
    piano.keys[NOTE_0_G].note_name = NOTE_0_G;
 8001364:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <NOTES_init+0x2c8>)
 8001366:	2207      	movs	r2, #7
 8001368:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a

    piano.keys[NOTE_0_G_SHARP].voltage = set_voltage_divider * 8;
 800136c:	4b64      	ldr	r3, [pc, #400]	@ (8001500 <NOTES_init+0x2cc>)
 800136e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b68      	ldr	r3, [pc, #416]	@ (8001518 <NOTES_init+0x2e4>)
 8001378:	f7fe ff82 	bl	8000280 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	495e      	ldr	r1, [pc, #376]	@ (80014fc <NOTES_init+0x2c8>)
 8001382:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    piano.keys[NOTE_0_G_SHARP].offset = 0;
 8001386:	4b5d      	ldr	r3, [pc, #372]	@ (80014fc <NOTES_init+0x2c8>)
 8001388:	2200      	movs	r2, #0
 800138a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    piano.keys[NOTE_0_G_SHARP].note_name = NOTE_0_G_SHARP;
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <NOTES_init+0x2c8>)
 8001390:	2208      	movs	r2, #8
 8001392:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

    piano.keys[NOTE_0_A].voltage = set_voltage_divider * 9;
 8001396:	4b5a      	ldr	r3, [pc, #360]	@ (8001500 <NOTES_init+0x2cc>)
 8001398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b5e      	ldr	r3, [pc, #376]	@ (800151c <NOTES_init+0x2e8>)
 80013a2:	f7fe ff6d 	bl	8000280 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4954      	ldr	r1, [pc, #336]	@ (80014fc <NOTES_init+0x2c8>)
 80013ac:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    piano.keys[NOTE_0_A].offset = 0;
 80013b0:	4b52      	ldr	r3, [pc, #328]	@ (80014fc <NOTES_init+0x2c8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
    piano.keys[NOTE_0_A].note_name = NOTE_0_A;
 80013b8:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <NOTES_init+0x2c8>)
 80013ba:	2209      	movs	r2, #9
 80013bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

    piano.keys[NOTE_0_A_SHARP].voltage = set_voltage_divider * 10;
 80013c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001500 <NOTES_init+0x2cc>)
 80013c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <NOTES_init+0x2ec>)
 80013cc:	f7fe ff58 	bl	8000280 <__aeabi_dmul>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4949      	ldr	r1, [pc, #292]	@ (80014fc <NOTES_init+0x2c8>)
 80013d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    piano.keys[NOTE_0_A_SHARP].offset = 0;
 80013da:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <NOTES_init+0x2c8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
    piano.keys[NOTE_0_A_SHARP].note_name = NOTE_0_A_SHARP;
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <NOTES_init+0x2c8>)
 80013e4:	220a      	movs	r2, #10
 80013e6:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa

    piano.keys[NOTE_0_B].voltage = set_voltage_divider * 11;
 80013ea:	4b45      	ldr	r3, [pc, #276]	@ (8001500 <NOTES_init+0x2cc>)
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <NOTES_init+0x2f0>)
 80013f6:	f7fe ff43 	bl	8000280 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	493f      	ldr	r1, [pc, #252]	@ (80014fc <NOTES_init+0x2c8>)
 8001400:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    piano.keys[NOTE_0_B].offset = 0;
 8001404:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <NOTES_init+0x2c8>)
 8001406:	2200      	movs	r2, #0
 8001408:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    piano.keys[NOTE_0_B].note_name = NOTE_0_B;
 800140c:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <NOTES_init+0x2c8>)
 800140e:	220b      	movs	r2, #11
 8001410:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba

    // --------- 2d octave

    piano.keys[NOTE_1_C].voltage = 0;
 8001414:	4939      	ldr	r1, [pc, #228]	@ (80014fc <NOTES_init+0x2c8>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    piano.keys[NOTE_1_C].offset = 1;
 8001422:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <NOTES_init+0x2c8>)
 8001424:	2201      	movs	r2, #1
 8001426:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
    piano.keys[NOTE_1_C].note_name = NOTE_1_C;
 800142a:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <NOTES_init+0x2c8>)
 800142c:	220c      	movs	r2, #12
 800142e:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca

    piano.keys[NOTE_1_C_SHARP].voltage = set_voltage_divider * 1;
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <NOTES_init+0x2cc>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	4930      	ldr	r1, [pc, #192]	@ (80014fc <NOTES_init+0x2c8>)
 800143a:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    piano.keys[NOTE_1_C_SHARP].offset = 1;
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <NOTES_init+0x2c8>)
 8001440:	2201      	movs	r2, #1
 8001442:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
    piano.keys[NOTE_1_C_SHARP].note_name = NOTE_1_C_SHARP;
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <NOTES_init+0x2c8>)
 8001448:	220d      	movs	r2, #13
 800144a:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda

    piano.keys[NOTE_1_D].voltage = set_voltage_divider * 2;
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <NOTES_init+0x2cc>)
 8001450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	f7ff f842 	bl	80004e0 <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4926      	ldr	r1, [pc, #152]	@ (80014fc <NOTES_init+0x2c8>)
 8001462:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
    piano.keys[NOTE_1_D].offset = 1;
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <NOTES_init+0x2c8>)
 8001468:	2201      	movs	r2, #1
 800146a:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
    piano.keys[NOTE_1_D].note_name = NOTE_1_D;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <NOTES_init+0x2c8>)
 8001470:	220e      	movs	r2, #14
 8001472:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea

    piano.keys[NOTE_1_D_SHARP].voltage = set_voltage_divider * 3;
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <NOTES_init+0x2cc>)
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <NOTES_init+0x2d0>)
 8001482:	f7fe fefd 	bl	8000280 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	491c      	ldr	r1, [pc, #112]	@ (80014fc <NOTES_init+0x2c8>)
 800148c:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
    piano.keys[NOTE_1_D_SHARP].offset = 1;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <NOTES_init+0x2c8>)
 8001492:	2201      	movs	r2, #1
 8001494:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
    piano.keys[NOTE_1_D_SHARP].note_name = NOTE_1_D_SHARP;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <NOTES_init+0x2c8>)
 800149a:	220f      	movs	r2, #15
 800149c:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa

    piano.keys[NOTE_1_E].voltage = set_voltage_divider * 4;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <NOTES_init+0x2cc>)
 80014a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <NOTES_init+0x2d4>)
 80014ac:	f7fe fee8 	bl	8000280 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4911      	ldr	r1, [pc, #68]	@ (80014fc <NOTES_init+0x2c8>)
 80014b6:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
    piano.keys[NOTE_1_E].offset = 1;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <NOTES_init+0x2c8>)
 80014bc:	2201      	movs	r2, #1
 80014be:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    piano.keys[NOTE_1_E].note_name = NOTE_1_E;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <NOTES_init+0x2c8>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a

    piano.keys[NOTE_1_F].voltage = set_voltage_divider * 5;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <NOTES_init+0x2cc>)
 80014cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <NOTES_init+0x2d8>)
 80014d6:	f7fe fed3 	bl	8000280 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4907      	ldr	r1, [pc, #28]	@ (80014fc <NOTES_init+0x2c8>)
 80014e0:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
    piano.keys[NOTE_1_F].offset = 1;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <NOTES_init+0x2c8>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
    piano.keys[NOTE_1_F].note_name = NOTE_1_F;
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <NOTES_init+0x2c8>)
 80014ee:	2211      	movs	r2, #17
 80014f0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

    piano.keys[NOTE_1_F_SHARP].voltage = set_voltage_divider * 6;
 80014f4:	4b02      	ldr	r3, [pc, #8]	@ (8001500 <NOTES_init+0x2cc>)
 80014f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fa:	e015      	b.n	8001528 <NOTES_init+0x2f4>
 80014fc:	20000190 	.word	0x20000190
 8001500:	20000008 	.word	0x20000008
 8001504:	40080000 	.word	0x40080000
 8001508:	40100000 	.word	0x40100000
 800150c:	40140000 	.word	0x40140000
 8001510:	40180000 	.word	0x40180000
 8001514:	401c0000 	.word	0x401c0000
 8001518:	40200000 	.word	0x40200000
 800151c:	40220000 	.word	0x40220000
 8001520:	40240000 	.word	0x40240000
 8001524:	40260000 	.word	0x40260000
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4bb1      	ldr	r3, [pc, #708]	@ (80017f4 <NOTES_init+0x5c0>)
 800152e:	f7fe fea7 	bl	8000280 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	49b0      	ldr	r1, [pc, #704]	@ (80017f8 <NOTES_init+0x5c4>)
 8001538:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
    piano.keys[NOTE_1_F_SHARP].offset = 1;
 800153c:	4bae      	ldr	r3, [pc, #696]	@ (80017f8 <NOTES_init+0x5c4>)
 800153e:	2201      	movs	r2, #1
 8001540:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
    piano.keys[NOTE_1_F_SHARP].note_name = NOTE_1_F_SHARP;
 8001544:	4bac      	ldr	r3, [pc, #688]	@ (80017f8 <NOTES_init+0x5c4>)
 8001546:	2212      	movs	r2, #18
 8001548:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a

    piano.keys[NOTE_1_G].voltage = set_voltage_divider * 7;
 800154c:	4bab      	ldr	r3, [pc, #684]	@ (80017fc <NOTES_init+0x5c8>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4baa      	ldr	r3, [pc, #680]	@ (8001800 <NOTES_init+0x5cc>)
 8001558:	f7fe fe92 	bl	8000280 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	49a5      	ldr	r1, [pc, #660]	@ (80017f8 <NOTES_init+0x5c4>)
 8001562:	e9c1 234c 	strd	r2, r3, [r1, #304]	@ 0x130
    piano.keys[NOTE_1_G].offset = 1;
 8001566:	4ba4      	ldr	r3, [pc, #656]	@ (80017f8 <NOTES_init+0x5c4>)
 8001568:	2201      	movs	r2, #1
 800156a:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
    piano.keys[NOTE_1_G].note_name = NOTE_1_G;
 800156e:	4ba2      	ldr	r3, [pc, #648]	@ (80017f8 <NOTES_init+0x5c4>)
 8001570:	2213      	movs	r2, #19
 8001572:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a

    piano.keys[NOTE_1_G_SHARP].voltage = set_voltage_divider * 8;
 8001576:	4ba1      	ldr	r3, [pc, #644]	@ (80017fc <NOTES_init+0x5c8>)
 8001578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4ba0      	ldr	r3, [pc, #640]	@ (8001804 <NOTES_init+0x5d0>)
 8001582:	f7fe fe7d 	bl	8000280 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	499b      	ldr	r1, [pc, #620]	@ (80017f8 <NOTES_init+0x5c4>)
 800158c:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
    piano.keys[NOTE_1_G_SHARP].offset = 1;
 8001590:	4b99      	ldr	r3, [pc, #612]	@ (80017f8 <NOTES_init+0x5c4>)
 8001592:	2201      	movs	r2, #1
 8001594:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
    piano.keys[NOTE_1_G_SHARP].note_name = NOTE_1_G_SHARP;
 8001598:	4b97      	ldr	r3, [pc, #604]	@ (80017f8 <NOTES_init+0x5c4>)
 800159a:	2214      	movs	r2, #20
 800159c:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

    piano.keys[NOTE_1_A].voltage = set_voltage_divider * 9;
 80015a0:	4b96      	ldr	r3, [pc, #600]	@ (80017fc <NOTES_init+0x5c8>)
 80015a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b97      	ldr	r3, [pc, #604]	@ (8001808 <NOTES_init+0x5d4>)
 80015ac:	f7fe fe68 	bl	8000280 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4990      	ldr	r1, [pc, #576]	@ (80017f8 <NOTES_init+0x5c4>)
 80015b6:	e9c1 2354 	strd	r2, r3, [r1, #336]	@ 0x150
    piano.keys[NOTE_1_A].offset = 1;
 80015ba:	4b8f      	ldr	r3, [pc, #572]	@ (80017f8 <NOTES_init+0x5c4>)
 80015bc:	2201      	movs	r2, #1
 80015be:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
    piano.keys[NOTE_1_A].note_name = NOTE_1_A;
 80015c2:	4b8d      	ldr	r3, [pc, #564]	@ (80017f8 <NOTES_init+0x5c4>)
 80015c4:	2215      	movs	r2, #21
 80015c6:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a

    piano.keys[NOTE_1_A_SHARP].voltage = set_voltage_divider * 10;
 80015ca:	4b8c      	ldr	r3, [pc, #560]	@ (80017fc <NOTES_init+0x5c8>)
 80015cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b8d      	ldr	r3, [pc, #564]	@ (800180c <NOTES_init+0x5d8>)
 80015d6:	f7fe fe53 	bl	8000280 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4986      	ldr	r1, [pc, #536]	@ (80017f8 <NOTES_init+0x5c4>)
 80015e0:	e9c1 2358 	strd	r2, r3, [r1, #352]	@ 0x160
    piano.keys[NOTE_1_A_SHARP].offset = 1;
 80015e4:	4b84      	ldr	r3, [pc, #528]	@ (80017f8 <NOTES_init+0x5c4>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
    piano.keys[NOTE_1_A_SHARP].note_name = NOTE_1_A_SHARP;
 80015ec:	4b82      	ldr	r3, [pc, #520]	@ (80017f8 <NOTES_init+0x5c4>)
 80015ee:	2216      	movs	r2, #22
 80015f0:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a

    piano.keys[NOTE_1_B].voltage = set_voltage_divider * 11;
 80015f4:	4b81      	ldr	r3, [pc, #516]	@ (80017fc <NOTES_init+0x5c8>)
 80015f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b84      	ldr	r3, [pc, #528]	@ (8001810 <NOTES_init+0x5dc>)
 8001600:	f7fe fe3e 	bl	8000280 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	497b      	ldr	r1, [pc, #492]	@ (80017f8 <NOTES_init+0x5c4>)
 800160a:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
    piano.keys[NOTE_1_B].offset = 1;
 800160e:	4b7a      	ldr	r3, [pc, #488]	@ (80017f8 <NOTES_init+0x5c4>)
 8001610:	2201      	movs	r2, #1
 8001612:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    piano.keys[NOTE_1_B].note_name = NOTE_1_B;
 8001616:	4b78      	ldr	r3, [pc, #480]	@ (80017f8 <NOTES_init+0x5c4>)
 8001618:	2217      	movs	r2, #23
 800161a:	f883 217a 	strb.w	r2, [r3, #378]	@ 0x17a

    // --------- 3rd octave

    piano.keys[NOTE_2_C].voltage = 0;
 800161e:	4976      	ldr	r1, [pc, #472]	@ (80017f8 <NOTES_init+0x5c4>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
    piano.keys[NOTE_2_C].offset = 2;
 800162c:	4b72      	ldr	r3, [pc, #456]	@ (80017f8 <NOTES_init+0x5c4>)
 800162e:	2202      	movs	r2, #2
 8001630:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188
    piano.keys[NOTE_2_C].note_name = NOTE_2_C;
 8001634:	4b70      	ldr	r3, [pc, #448]	@ (80017f8 <NOTES_init+0x5c4>)
 8001636:	2218      	movs	r2, #24
 8001638:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    piano.keys[NOTE_2_C_SHARP].voltage = set_voltage_divider * 1;
 800163c:	4b6f      	ldr	r3, [pc, #444]	@ (80017fc <NOTES_init+0x5c8>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	496d      	ldr	r1, [pc, #436]	@ (80017f8 <NOTES_init+0x5c4>)
 8001644:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
    piano.keys[NOTE_2_C_SHARP].offset = 2;
 8001648:	4b6b      	ldr	r3, [pc, #428]	@ (80017f8 <NOTES_init+0x5c4>)
 800164a:	2202      	movs	r2, #2
 800164c:	f8a3 2198 	strh.w	r2, [r3, #408]	@ 0x198
    piano.keys[NOTE_2_C_SHARP].note_name = NOTE_2_C_SHARP;
 8001650:	4b69      	ldr	r3, [pc, #420]	@ (80017f8 <NOTES_init+0x5c4>)
 8001652:	2219      	movs	r2, #25
 8001654:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a

    piano.keys[NOTE_2_D].voltage = set_voltage_divider * 2;
 8001658:	4b68      	ldr	r3, [pc, #416]	@ (80017fc <NOTES_init+0x5c8>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	f7fe ff3d 	bl	80004e0 <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4963      	ldr	r1, [pc, #396]	@ (80017f8 <NOTES_init+0x5c4>)
 800166c:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
    piano.keys[NOTE_2_D].offset = 2;
 8001670:	4b61      	ldr	r3, [pc, #388]	@ (80017f8 <NOTES_init+0x5c4>)
 8001672:	2202      	movs	r2, #2
 8001674:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
    piano.keys[NOTE_2_D].note_name = NOTE_2_D;
 8001678:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <NOTES_init+0x5c4>)
 800167a:	221a      	movs	r2, #26
 800167c:	f883 21aa 	strb.w	r2, [r3, #426]	@ 0x1aa

    piano.keys[NOTE_2_D_SHARP].voltage = set_voltage_divider * 3;
 8001680:	4b5e      	ldr	r3, [pc, #376]	@ (80017fc <NOTES_init+0x5c8>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b62      	ldr	r3, [pc, #392]	@ (8001814 <NOTES_init+0x5e0>)
 800168c:	f7fe fdf8 	bl	8000280 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4958      	ldr	r1, [pc, #352]	@ (80017f8 <NOTES_init+0x5c4>)
 8001696:	e9c1 236c 	strd	r2, r3, [r1, #432]	@ 0x1b0
    piano.keys[NOTE_2_D_SHARP].offset = 2;
 800169a:	4b57      	ldr	r3, [pc, #348]	@ (80017f8 <NOTES_init+0x5c4>)
 800169c:	2202      	movs	r2, #2
 800169e:	f8a3 21b8 	strh.w	r2, [r3, #440]	@ 0x1b8
    piano.keys[NOTE_2_D_SHARP].note_name = NOTE_2_D_SHARP;
 80016a2:	4b55      	ldr	r3, [pc, #340]	@ (80017f8 <NOTES_init+0x5c4>)
 80016a4:	221b      	movs	r2, #27
 80016a6:	f883 21ba 	strb.w	r2, [r3, #442]	@ 0x1ba

    piano.keys[NOTE_2_E].voltage = set_voltage_divider * 4;
 80016aa:	4b54      	ldr	r3, [pc, #336]	@ (80017fc <NOTES_init+0x5c8>)
 80016ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b58      	ldr	r3, [pc, #352]	@ (8001818 <NOTES_init+0x5e4>)
 80016b6:	f7fe fde3 	bl	8000280 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	494e      	ldr	r1, [pc, #312]	@ (80017f8 <NOTES_init+0x5c4>)
 80016c0:	e9c1 2370 	strd	r2, r3, [r1, #448]	@ 0x1c0
    piano.keys[NOTE_2_E].offset = 2;
 80016c4:	4b4c      	ldr	r3, [pc, #304]	@ (80017f8 <NOTES_init+0x5c4>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	f8a3 21c8 	strh.w	r2, [r3, #456]	@ 0x1c8
    piano.keys[NOTE_2_E].note_name = NOTE_2_E;
 80016cc:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <NOTES_init+0x5c4>)
 80016ce:	221c      	movs	r2, #28
 80016d0:	f883 21ca 	strb.w	r2, [r3, #458]	@ 0x1ca

    piano.keys[NOTE_2_F].voltage = set_voltage_divider * 5;
 80016d4:	4b49      	ldr	r3, [pc, #292]	@ (80017fc <NOTES_init+0x5c8>)
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b4f      	ldr	r3, [pc, #316]	@ (800181c <NOTES_init+0x5e8>)
 80016e0:	f7fe fdce 	bl	8000280 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4943      	ldr	r1, [pc, #268]	@ (80017f8 <NOTES_init+0x5c4>)
 80016ea:	e9c1 2374 	strd	r2, r3, [r1, #464]	@ 0x1d0
    piano.keys[NOTE_2_F].offset = 2;
 80016ee:	4b42      	ldr	r3, [pc, #264]	@ (80017f8 <NOTES_init+0x5c4>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	f8a3 21d8 	strh.w	r2, [r3, #472]	@ 0x1d8
    piano.keys[NOTE_2_F].note_name = NOTE_2_F;
 80016f6:	4b40      	ldr	r3, [pc, #256]	@ (80017f8 <NOTES_init+0x5c4>)
 80016f8:	221d      	movs	r2, #29
 80016fa:	f883 21da 	strb.w	r2, [r3, #474]	@ 0x1da

    piano.keys[NOTE_2_F_SHARP].voltage = set_voltage_divider * 6;
 80016fe:	4b3f      	ldr	r3, [pc, #252]	@ (80017fc <NOTES_init+0x5c8>)
 8001700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <NOTES_init+0x5c0>)
 800170a:	f7fe fdb9 	bl	8000280 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4939      	ldr	r1, [pc, #228]	@ (80017f8 <NOTES_init+0x5c4>)
 8001714:	e9c1 2378 	strd	r2, r3, [r1, #480]	@ 0x1e0
    piano.keys[NOTE_2_F_SHARP].offset = 2;
 8001718:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <NOTES_init+0x5c4>)
 800171a:	2202      	movs	r2, #2
 800171c:	f8a3 21e8 	strh.w	r2, [r3, #488]	@ 0x1e8
    piano.keys[NOTE_2_F_SHARP].note_name = NOTE_2_F_SHARP;
 8001720:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <NOTES_init+0x5c4>)
 8001722:	221e      	movs	r2, #30
 8001724:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea

    piano.keys[NOTE_2_G].voltage = set_voltage_divider * 7;
 8001728:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <NOTES_init+0x5c8>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <NOTES_init+0x5cc>)
 8001734:	f7fe fda4 	bl	8000280 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	492e      	ldr	r1, [pc, #184]	@ (80017f8 <NOTES_init+0x5c4>)
 800173e:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
    piano.keys[NOTE_2_G].offset = 2;
 8001742:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <NOTES_init+0x5c4>)
 8001744:	2202      	movs	r2, #2
 8001746:	f8a3 21f8 	strh.w	r2, [r3, #504]	@ 0x1f8
    piano.keys[NOTE_2_G].note_name = NOTE_2_G;
 800174a:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <NOTES_init+0x5c4>)
 800174c:	221f      	movs	r2, #31
 800174e:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa

    piano.keys[NOTE_2_G_SHARP].voltage = set_voltage_divider * 8;
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <NOTES_init+0x5c8>)
 8001754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <NOTES_init+0x5d0>)
 800175e:	f7fe fd8f 	bl	8000280 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4924      	ldr	r1, [pc, #144]	@ (80017f8 <NOTES_init+0x5c4>)
 8001768:	e9c1 2380 	strd	r2, r3, [r1, #512]	@ 0x200
    piano.keys[NOTE_2_G_SHARP].offset = 2;
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <NOTES_init+0x5c4>)
 800176e:	2202      	movs	r2, #2
 8001770:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
    piano.keys[NOTE_2_G_SHARP].note_name = NOTE_2_G_SHARP;
 8001774:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <NOTES_init+0x5c4>)
 8001776:	2220      	movs	r2, #32
 8001778:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a

    piano.keys[NOTE_2_A].voltage = set_voltage_divider * 9;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <NOTES_init+0x5c8>)
 800177e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <NOTES_init+0x5d4>)
 8001788:	f7fe fd7a 	bl	8000280 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4919      	ldr	r1, [pc, #100]	@ (80017f8 <NOTES_init+0x5c4>)
 8001792:	e9c1 2384 	strd	r2, r3, [r1, #528]	@ 0x210
    piano.keys[NOTE_2_A].offset = 2;
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <NOTES_init+0x5c4>)
 8001798:	2202      	movs	r2, #2
 800179a:	f8a3 2218 	strh.w	r2, [r3, #536]	@ 0x218
    piano.keys[NOTE_2_A].note_name = NOTE_2_A;
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <NOTES_init+0x5c4>)
 80017a0:	2221      	movs	r2, #33	@ 0x21
 80017a2:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a

    piano.keys[NOTE_2_A_SHARP].voltage = set_voltage_divider * 10;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <NOTES_init+0x5c8>)
 80017a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <NOTES_init+0x5d8>)
 80017b2:	f7fe fd65 	bl	8000280 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	490f      	ldr	r1, [pc, #60]	@ (80017f8 <NOTES_init+0x5c4>)
 80017bc:	e9c1 2388 	strd	r2, r3, [r1, #544]	@ 0x220
    piano.keys[NOTE_2_A_SHARP].offset = 2;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <NOTES_init+0x5c4>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228
    piano.keys[NOTE_2_A_SHARP].note_name = NOTE_2_A_SHARP;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <NOTES_init+0x5c4>)
 80017ca:	2222      	movs	r2, #34	@ 0x22
 80017cc:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    piano.keys[NOTE_2_B].voltage = set_voltage_divider * 11;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <NOTES_init+0x5c8>)
 80017d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <NOTES_init+0x5dc>)
 80017dc:	f7fe fd50 	bl	8000280 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4904      	ldr	r1, [pc, #16]	@ (80017f8 <NOTES_init+0x5c4>)
 80017e6:	e9c1 238c 	strd	r2, r3, [r1, #560]	@ 0x230
    piano.keys[NOTE_2_B].offset = 2;
 80017ea:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <NOTES_init+0x5c4>)
 80017ec:	2202      	movs	r2, #2
 80017ee:	f8a3 2238 	strh.w	r2, [r3, #568]	@ 0x238
 80017f2:	e015      	b.n	8001820 <NOTES_init+0x5ec>
 80017f4:	40180000 	.word	0x40180000
 80017f8:	20000190 	.word	0x20000190
 80017fc:	20000008 	.word	0x20000008
 8001800:	401c0000 	.word	0x401c0000
 8001804:	40200000 	.word	0x40200000
 8001808:	40220000 	.word	0x40220000
 800180c:	40240000 	.word	0x40240000
 8001810:	40260000 	.word	0x40260000
 8001814:	40080000 	.word	0x40080000
 8001818:	40100000 	.word	0x40100000
 800181c:	40140000 	.word	0x40140000
    piano.keys[NOTE_2_B].note_name = NOTE_2_B;
 8001820:	4b7a      	ldr	r3, [pc, #488]	@ (8001a0c <NOTES_init+0x7d8>)
 8001822:	2223      	movs	r2, #35	@ 0x23
 8001824:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a

    // --------- 4th octave

    piano.keys[NOTE_3_C].voltage = 0;
 8001828:	4978      	ldr	r1, [pc, #480]	@ (8001a0c <NOTES_init+0x7d8>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9c1 2390 	strd	r2, r3, [r1, #576]	@ 0x240
    piano.keys[NOTE_3_C].offset = 3;
 8001836:	4b75      	ldr	r3, [pc, #468]	@ (8001a0c <NOTES_init+0x7d8>)
 8001838:	2203      	movs	r2, #3
 800183a:	f8a3 2248 	strh.w	r2, [r3, #584]	@ 0x248
    piano.keys[NOTE_3_C].note_name = NOTE_3_C;
 800183e:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <NOTES_init+0x7d8>)
 8001840:	2224      	movs	r2, #36	@ 0x24
 8001842:	f883 224a 	strb.w	r2, [r3, #586]	@ 0x24a

    piano.keys[NOTE_3_C_SHARP].voltage = set_voltage_divider * 1;
 8001846:	4b72      	ldr	r3, [pc, #456]	@ (8001a10 <NOTES_init+0x7dc>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	496f      	ldr	r1, [pc, #444]	@ (8001a0c <NOTES_init+0x7d8>)
 800184e:	e9c1 2394 	strd	r2, r3, [r1, #592]	@ 0x250
    piano.keys[NOTE_3_C_SHARP].offset = 3;
 8001852:	4b6e      	ldr	r3, [pc, #440]	@ (8001a0c <NOTES_init+0x7d8>)
 8001854:	2203      	movs	r2, #3
 8001856:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
    piano.keys[NOTE_3_C_SHARP].note_name = NOTE_3_C_SHARP;
 800185a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a0c <NOTES_init+0x7d8>)
 800185c:	2225      	movs	r2, #37	@ 0x25
 800185e:	f883 225a 	strb.w	r2, [r3, #602]	@ 0x25a

    piano.keys[NOTE_3_D].voltage = set_voltage_divider * 2;
 8001862:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <NOTES_init+0x7dc>)
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	f7fe fe38 	bl	80004e0 <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4965      	ldr	r1, [pc, #404]	@ (8001a0c <NOTES_init+0x7d8>)
 8001876:	e9c1 2398 	strd	r2, r3, [r1, #608]	@ 0x260
    piano.keys[NOTE_3_D].offset = 3;
 800187a:	4b64      	ldr	r3, [pc, #400]	@ (8001a0c <NOTES_init+0x7d8>)
 800187c:	2203      	movs	r2, #3
 800187e:	f8a3 2268 	strh.w	r2, [r3, #616]	@ 0x268
    piano.keys[NOTE_3_D].note_name = NOTE_3_D;
 8001882:	4b62      	ldr	r3, [pc, #392]	@ (8001a0c <NOTES_init+0x7d8>)
 8001884:	2226      	movs	r2, #38	@ 0x26
 8001886:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a

    piano.keys[NOTE_3_D_SHARP].voltage = set_voltage_divider * 3;
 800188a:	4b61      	ldr	r3, [pc, #388]	@ (8001a10 <NOTES_init+0x7dc>)
 800188c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b5f      	ldr	r3, [pc, #380]	@ (8001a14 <NOTES_init+0x7e0>)
 8001896:	f7fe fcf3 	bl	8000280 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	495b      	ldr	r1, [pc, #364]	@ (8001a0c <NOTES_init+0x7d8>)
 80018a0:	e9c1 239c 	strd	r2, r3, [r1, #624]	@ 0x270
    piano.keys[NOTE_3_D_SHARP].offset = 3;
 80018a4:	4b59      	ldr	r3, [pc, #356]	@ (8001a0c <NOTES_init+0x7d8>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	f8a3 2278 	strh.w	r2, [r3, #632]	@ 0x278
    piano.keys[NOTE_3_D_SHARP].note_name = NOTE_3_D_SHARP;
 80018ac:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <NOTES_init+0x7d8>)
 80018ae:	2227      	movs	r2, #39	@ 0x27
 80018b0:	f883 227a 	strb.w	r2, [r3, #634]	@ 0x27a

    piano.keys[NOTE_3_E].voltage = set_voltage_divider * 4;
 80018b4:	4b56      	ldr	r3, [pc, #344]	@ (8001a10 <NOTES_init+0x7dc>)
 80018b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b56      	ldr	r3, [pc, #344]	@ (8001a18 <NOTES_init+0x7e4>)
 80018c0:	f7fe fcde 	bl	8000280 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4950      	ldr	r1, [pc, #320]	@ (8001a0c <NOTES_init+0x7d8>)
 80018ca:	e9c1 23a0 	strd	r2, r3, [r1, #640]	@ 0x280
    piano.keys[NOTE_3_E].offset = 3;
 80018ce:	4b4f      	ldr	r3, [pc, #316]	@ (8001a0c <NOTES_init+0x7d8>)
 80018d0:	2203      	movs	r2, #3
 80018d2:	f8a3 2288 	strh.w	r2, [r3, #648]	@ 0x288
    piano.keys[NOTE_3_E].note_name = NOTE_3_E;
 80018d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001a0c <NOTES_init+0x7d8>)
 80018d8:	2228      	movs	r2, #40	@ 0x28
 80018da:	f883 228a 	strb.w	r2, [r3, #650]	@ 0x28a

    piano.keys[NOTE_3_F].voltage = set_voltage_divider * 5;
 80018de:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <NOTES_init+0x7dc>)
 80018e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <NOTES_init+0x7e8>)
 80018ea:	f7fe fcc9 	bl	8000280 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4946      	ldr	r1, [pc, #280]	@ (8001a0c <NOTES_init+0x7d8>)
 80018f4:	e9c1 23a4 	strd	r2, r3, [r1, #656]	@ 0x290
    piano.keys[NOTE_3_F].offset = 3;
 80018f8:	4b44      	ldr	r3, [pc, #272]	@ (8001a0c <NOTES_init+0x7d8>)
 80018fa:	2203      	movs	r2, #3
 80018fc:	f8a3 2298 	strh.w	r2, [r3, #664]	@ 0x298
    piano.keys[NOTE_3_F].note_name = NOTE_3_F;
 8001900:	4b42      	ldr	r3, [pc, #264]	@ (8001a0c <NOTES_init+0x7d8>)
 8001902:	2229      	movs	r2, #41	@ 0x29
 8001904:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a

    piano.keys[NOTE_3_F_SHARP].voltage = set_voltage_divider * 6;
 8001908:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <NOTES_init+0x7dc>)
 800190a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <NOTES_init+0x7ec>)
 8001914:	f7fe fcb4 	bl	8000280 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	493b      	ldr	r1, [pc, #236]	@ (8001a0c <NOTES_init+0x7d8>)
 800191e:	e9c1 23a8 	strd	r2, r3, [r1, #672]	@ 0x2a0
    piano.keys[NOTE_3_F_SHARP].offset = 3;
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <NOTES_init+0x7d8>)
 8001924:	2203      	movs	r2, #3
 8001926:	f8a3 22a8 	strh.w	r2, [r3, #680]	@ 0x2a8
    piano.keys[NOTE_3_F_SHARP].note_name = NOTE_3_F_SHARP;
 800192a:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <NOTES_init+0x7d8>)
 800192c:	222a      	movs	r2, #42	@ 0x2a
 800192e:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa

    piano.keys[NOTE_3_G].voltage = set_voltage_divider * 7;
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <NOTES_init+0x7dc>)
 8001934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <NOTES_init+0x7f0>)
 800193e:	f7fe fc9f 	bl	8000280 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4931      	ldr	r1, [pc, #196]	@ (8001a0c <NOTES_init+0x7d8>)
 8001948:	e9c1 23ac 	strd	r2, r3, [r1, #688]	@ 0x2b0
    piano.keys[NOTE_3_G].offset = 3;
 800194c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <NOTES_init+0x7d8>)
 800194e:	2203      	movs	r2, #3
 8001950:	f8a3 22b8 	strh.w	r2, [r3, #696]	@ 0x2b8
    piano.keys[NOTE_3_G].note_name = NOTE_3_G;
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <NOTES_init+0x7d8>)
 8001956:	222b      	movs	r2, #43	@ 0x2b
 8001958:	f883 22ba 	strb.w	r2, [r3, #698]	@ 0x2ba

    piano.keys[NOTE_3_G_SHARP].voltage = set_voltage_divider * 8;
 800195c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a10 <NOTES_init+0x7dc>)
 800195e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <NOTES_init+0x7f4>)
 8001968:	f7fe fc8a 	bl	8000280 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4926      	ldr	r1, [pc, #152]	@ (8001a0c <NOTES_init+0x7d8>)
 8001972:	e9c1 23b0 	strd	r2, r3, [r1, #704]	@ 0x2c0
    piano.keys[NOTE_3_G_SHARP].offset = 3;
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <NOTES_init+0x7d8>)
 8001978:	2203      	movs	r2, #3
 800197a:	f8a3 22c8 	strh.w	r2, [r3, #712]	@ 0x2c8
    piano.keys[NOTE_3_G_SHARP].note_name = NOTE_3_G_SHARP;
 800197e:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <NOTES_init+0x7d8>)
 8001980:	222c      	movs	r2, #44	@ 0x2c
 8001982:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca

    piano.keys[NOTE_3_A].voltage = set_voltage_divider * 9;
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <NOTES_init+0x7dc>)
 8001988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <NOTES_init+0x7f8>)
 8001992:	f7fe fc75 	bl	8000280 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	491c      	ldr	r1, [pc, #112]	@ (8001a0c <NOTES_init+0x7d8>)
 800199c:	e9c1 23b4 	strd	r2, r3, [r1, #720]	@ 0x2d0
    piano.keys[NOTE_3_A].offset = 3;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <NOTES_init+0x7d8>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	f8a3 22d8 	strh.w	r2, [r3, #728]	@ 0x2d8
    piano.keys[NOTE_3_A].note_name = NOTE_3_A;
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <NOTES_init+0x7d8>)
 80019aa:	222d      	movs	r2, #45	@ 0x2d
 80019ac:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da

    piano.keys[NOTE_3_A_SHARP].voltage = set_voltage_divider * 10;
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <NOTES_init+0x7dc>)
 80019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <NOTES_init+0x7fc>)
 80019bc:	f7fe fc60 	bl	8000280 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4911      	ldr	r1, [pc, #68]	@ (8001a0c <NOTES_init+0x7d8>)
 80019c6:	e9c1 23b8 	strd	r2, r3, [r1, #736]	@ 0x2e0
    piano.keys[NOTE_3_A_SHARP].offset = 3;
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <NOTES_init+0x7d8>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	f8a3 22e8 	strh.w	r2, [r3, #744]	@ 0x2e8
    piano.keys[NOTE_3_A_SHARP].note_name = NOTE_3_A_SHARP;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <NOTES_init+0x7d8>)
 80019d4:	222e      	movs	r2, #46	@ 0x2e
 80019d6:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea

    piano.keys[NOTE_3_B].voltage = set_voltage_divider * 11;
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <NOTES_init+0x7dc>)
 80019dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <NOTES_init+0x800>)
 80019e6:	f7fe fc4b 	bl	8000280 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4907      	ldr	r1, [pc, #28]	@ (8001a0c <NOTES_init+0x7d8>)
 80019f0:	e9c1 23bc 	strd	r2, r3, [r1, #752]	@ 0x2f0
    piano.keys[NOTE_3_B].offset = 3;
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <NOTES_init+0x7d8>)
 80019f6:	2203      	movs	r2, #3
 80019f8:	f8a3 22f8 	strh.w	r2, [r3, #760]	@ 0x2f8
    piano.keys[NOTE_3_B].note_name = NOTE_3_B;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <NOTES_init+0x7d8>)
 80019fe:	222f      	movs	r2, #47	@ 0x2f
 8001a00:	f883 22fa 	strb.w	r2, [r3, #762]	@ 0x2fa

    return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000190 	.word	0x20000190
 8001a10:	20000008 	.word	0x20000008
 8001a14:	40080000 	.word	0x40080000
 8001a18:	40100000 	.word	0x40100000
 8001a1c:	40140000 	.word	0x40140000
 8001a20:	40180000 	.word	0x40180000
 8001a24:	401c0000 	.word	0x401c0000
 8001a28:	40200000 	.word	0x40200000
 8001a2c:	40220000 	.word	0x40220000
 8001a30:	40240000 	.word	0x40240000
 8001a34:	40260000 	.word	0x40260000

08001a38 <NOTES_GetVoltage>:

void NOTES_GetNote(enum note_name noteName, struct note *note) {
    *note = piano.keys[noteName];
}

double NOTES_GetVoltage(enum note_name noteName) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    double volt_value;
    volt_value = piano.keys[noteName].offset + piano.keys[noteName].voltage;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	@ (8001a84 <NOTES_GetVoltage+0x4c>)
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fe92 	bl	8000778 <__aeabi_i2d>
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <NOTES_GetVoltage+0x4c>)
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fd3e 	bl	80004e0 <__adddf3>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return volt_value;
 8001a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a70:	ec43 2b17 	vmov	d7, r2, r3
 8001a74:	eeb0 0a47 	vmov.f32	s0, s14
 8001a78:	eef0 0a67 	vmov.f32	s1, s15
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000190 	.word	0x20000190

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d157      	bne.n	8001baa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	481d      	ldr	r0, [pc, #116]	@ (8001bbc <HAL_ADC_MspInit+0xe4>)
 8001b46:	f001 f895 	bl	8002c74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc4 <HAL_ADC_MspInit+0xec>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b8e:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001b90:	f000 fd86 	bl	80026a0 <HAL_DMA_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b9a:	f7ff fabd 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_ADC_MspInit+0xe8>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	200000dc 	.word	0x200000dc
 8001bc4:	40026410 	.word	0x40026410

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_I2C_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12b      	bne.n	8001c42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23c0      	movs	r3, #192	@ 0xc0
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c16:	2304      	movs	r3, #4
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <HAL_I2C_MspInit+0x8c>)
 8001c22:	f001 f827 	bl	8002c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <MemManage_Handler+0x4>

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cae:	f000 f93f 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <DMA2_Stream0_IRQHandler+0x10>)
 8001cbe:	f000 fd9d 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000dc 	.word	0x200000dc

08001ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e00a      	b.n	8001cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cde:	f3af 8000 	nop.w
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbf0      	blt.n	8001cde <_read+0x12>
  }

  return len;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e009      	b.n	8001d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf1      	blt.n	8001d18 <_write+0x12>
  }
  return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_close>:

int _close(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d66:	605a      	str	r2, [r3, #4]
  return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_isatty>:

int _isatty(int file)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f002 faa8 	bl	800432c <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20010000 	.word	0x20010000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	20000710 	.word	0x20000710
 8001e10:	20000868 	.word	0x20000868

08001e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e3c:	f7ff ffea 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	@ (8001e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	@ (8001e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f002 fa67 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7fe feb7 	bl	8000bdc <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e7c:	08005054 	.word	0x08005054
  ldr r2, =_sbss
 8001e80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e84:	20000864 	.word	0x20000864

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <HAL_Init+0x40>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_Init+0x40>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_Init+0x40>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 fbb1 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fde2 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fbc9 	bl	8002686 <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f0c:	f000 fb91 	bl	8002632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000010 	.word	0x20000010
 8001f28:	20000018 	.word	0x20000018
 8001f2c:	20000014 	.word	0x20000014

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000018 	.word	0x20000018
 8001f54:	20000714 	.word	0x20000714

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000714 	.word	0x20000714

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000018 	.word	0x20000018

08001fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e033      	b.n	8002036 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fd7e 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ffe:	f023 0302 	bic.w	r3, r3, #2
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f93a 	bl	8002284 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
 8002026:	e001      	b.n	800202c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1c>
 8002058:	2302      	movs	r3, #2
 800205a:	e105      	b.n	8002268 <HAL_ADC_ConfigChannel+0x228>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b09      	cmp	r3, #9
 800206a:	d925      	bls.n	80020b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	3b1e      	subs	r3, #30
 8002082:	2207      	movs	r2, #7
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43da      	mvns	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	400a      	ands	r2, r1
 8002090:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68d9      	ldr	r1, [r3, #12]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4403      	add	r3, r0
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	409a      	lsls	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	e022      	b.n	80020fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	2207      	movs	r2, #7
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4403      	add	r3, r0
 80020f4:	409a      	lsls	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d824      	bhi.n	8002150 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	3b05      	subs	r3, #5
 8002118:	221f      	movs	r2, #31
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	4618      	mov	r0, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3b05      	subs	r3, #5
 8002142:	fa00 f203 	lsl.w	r2, r0, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34
 800214e:	e04c      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d824      	bhi.n	80021a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b23      	subs	r3, #35	@ 0x23
 800216a:	221f      	movs	r2, #31
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b23      	subs	r3, #35	@ 0x23
 8002194:	fa00 f203 	lsl.w	r2, r0, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a0:	e023      	b.n	80021ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	3b41      	subs	r3, #65	@ 0x41
 80021b4:	221f      	movs	r2, #31
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b41      	subs	r3, #65	@ 0x41
 80021de:	fa00 f203 	lsl.w	r2, r0, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_ADC_ConfigChannel+0x234>)
 80021ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a21      	ldr	r2, [pc, #132]	@ (8002278 <HAL_ADC_ConfigChannel+0x238>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1cc>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d105      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	@ (8002278 <HAL_ADC_ConfigChannel+0x238>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d123      	bne.n	800225e <HAL_ADC_ConfigChannel+0x21e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b10      	cmp	r3, #16
 800221c:	d003      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x1e6>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b11      	cmp	r3, #17
 8002224:	d11b      	bne.n	800225e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d111      	bne.n	800225e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <HAL_ADC_ConfigChannel+0x23c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <HAL_ADC_ConfigChannel+0x240>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0c9a      	lsrs	r2, r3, #18
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002250:	e002      	b.n	8002258 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3b01      	subs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f9      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40012300 	.word	0x40012300
 8002278:	40012000 	.word	0x40012000
 800227c:	20000010 	.word	0x20000010
 8002280:	431bde83 	.word	0x431bde83

08002284 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228c:	4b79      	ldr	r3, [pc, #484]	@ (8002474 <ADC_Init+0x1f0>)
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	021a      	lsls	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	4a58      	ldr	r2, [pc, #352]	@ (8002478 <ADC_Init+0x1f4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800232a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800234c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e00f      	b.n	8002382 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002380:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0202 	bic.w	r2, r2, #2
 8002390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e1b      	ldrb	r3, [r3, #24]
 800239c:	005a      	lsls	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01b      	beq.n	80023e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	035a      	lsls	r2, r3, #13
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e007      	b.n	80023f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	3b01      	subs	r3, #1
 8002414:	051a      	lsls	r2, r3, #20
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800242c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800243a:	025a      	lsls	r2, r3, #9
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	029a      	lsls	r2, r3, #10
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40012300 	.word	0x40012300
 8002478:	0f000001 	.word	0x0f000001

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4907      	ldr	r1, [pc, #28]	@ (8002518 <__NVIC_EnableIRQ+0x38>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	@ (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	@ (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e8:	d301      	bcc.n	80025ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00f      	b.n	800260e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002618 <SysTick_Config+0x40>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f6:	210f      	movs	r1, #15
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025fc:	f7ff ff8e 	bl	800251c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <SysTick_Config+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <SysTick_Config+0x40>)
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000e010 	.word	0xe000e010

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff29 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff3e 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff8e 	bl	8002570 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5d 	bl	800251c <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff31 	bl	80024e0 <__NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ffa2 	bl	80025d8 <SysTick_Config>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff fc54 	bl	8001f58 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e099      	b.n	80027f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026dc:	e00f      	b.n	80026fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026de:	f7ff fc3b 	bl	8001f58 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d908      	bls.n	80026fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2203      	movs	r2, #3
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e078      	b.n	80027f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e8      	bne.n	80026de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <HAL_DMA_Init+0x158>)
 8002718:	4013      	ands	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800272a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	2b04      	cmp	r3, #4
 8002756:	d107      	bne.n	8002768 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	4313      	orrs	r3, r2
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f023 0307 	bic.w	r3, r3, #7
 800277e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	2b04      	cmp	r3, #4
 8002790:	d117      	bne.n	80027c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f9e9 	bl	8002b7c <DMA_CheckFifoParam>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2240      	movs	r2, #64	@ 0x40
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027be:	2301      	movs	r3, #1
 80027c0:	e016      	b.n	80027f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9a0 	bl	8002b10 <DMA_CalcBaseAndBitshift>
 80027d0:	4603      	mov	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	223f      	movs	r2, #63	@ 0x3f
 80027da:	409a      	lsls	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	f010803f 	.word	0xf010803f

080027fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002808:	4b8e      	ldr	r3, [pc, #568]	@ (8002a44 <HAL_DMA_IRQHandler+0x248>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a8e      	ldr	r2, [pc, #568]	@ (8002a48 <HAL_DMA_IRQHandler+0x24c>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	2208      	movs	r2, #8
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01a      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	f043 0202 	orr.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a2:	2204      	movs	r2, #4
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2204      	movs	r2, #4
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2210      	movs	r2, #16
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d043      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03c      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2210      	movs	r2, #16
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d018      	beq.n	800293e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e01f      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e016      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0208 	bic.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	2220      	movs	r2, #32
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 808f 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8087 	beq.w	8002a9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	2220      	movs	r2, #32
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d136      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0216 	bic.w	r2, r2, #22
 80029b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x1da>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0208 	bic.w	r2, r2, #8
 80029e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	223f      	movs	r2, #63	@ 0x3f
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d07e      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
        }
        return;
 8002a12:	e079      	b.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e02c      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
 8002a42:	bf00      	nop
 8002a44:	20000010 	.word	0x20000010
 8002a48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e01e      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0210 	bic.w	r2, r2, #16
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d032      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d307      	bcc.n	8002ae4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f2      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0x2cc>
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ae4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
 8002b06:	e000      	b.n	8002b0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b08:	bf00      	nop
    }
  }
}
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3b10      	subs	r3, #16
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <DMA_CalcBaseAndBitshift+0x64>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2a:	4a13      	ldr	r2, [pc, #76]	@ (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d909      	bls.n	8002b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	1d1a      	adds	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b50:	e007      	b.n	8002b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	aaaaaaab 	.word	0xaaaaaaab
 8002b78:	08005008 	.word	0x08005008

08002b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11f      	bne.n	8002bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d856      	bhi.n	8002c4a <DMA_CheckFifoParam+0xce>
 8002b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <DMA_CheckFifoParam+0x28>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc7 	.word	0x08002bc7
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002c4b 	.word	0x08002c4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d046      	beq.n	8002c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e043      	b.n	8002c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bce:	d140      	bne.n	8002c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e03d      	b.n	8002c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bde:	d121      	bne.n	8002c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d837      	bhi.n	8002c56 <DMA_CheckFifoParam+0xda>
 8002be6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <DMA_CheckFifoParam+0x70>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c03 	.word	0x08002c03
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c15 	.word	0x08002c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e030      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d025      	beq.n	8002c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e022      	b.n	8002c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c1c:	d11f      	bne.n	8002c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c22:	e01c      	b.n	8002c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d903      	bls.n	8002c32 <DMA_CheckFifoParam+0xb6>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c30:	e018      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      break;
 8002c36:	e015      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e00b      	b.n	8002c62 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e00a      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e008      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e006      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
    }
  } 
  
  return status; 
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e159      	b.n	8002f44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c90:	2201      	movs	r2, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	f040 8148 	bne.w	8002f3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d005      	beq.n	8002cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d130      	bne.n	8002d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 0201 	and.w	r2, r3, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d017      	beq.n	8002d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d123      	bne.n	8002db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	08da      	lsrs	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3208      	adds	r2, #8
 8002d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	08da      	lsrs	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a2 	beq.w	8002f3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b57      	ldr	r3, [pc, #348]	@ (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	4a56      	ldr	r2, [pc, #344]	@ (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0a:	4b54      	ldr	r3, [pc, #336]	@ (8002f5c <HAL_GPIO_Init+0x2e8>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e16:	4a52      	ldr	r2, [pc, #328]	@ (8002f60 <HAL_GPIO_Init+0x2ec>)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a49      	ldr	r2, [pc, #292]	@ (8002f64 <HAL_GPIO_Init+0x2f0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d019      	beq.n	8002e76 <HAL_GPIO_Init+0x202>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a48      	ldr	r2, [pc, #288]	@ (8002f68 <HAL_GPIO_Init+0x2f4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0x1fe>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a47      	ldr	r2, [pc, #284]	@ (8002f6c <HAL_GPIO_Init+0x2f8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00d      	beq.n	8002e6e <HAL_GPIO_Init+0x1fa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a46      	ldr	r2, [pc, #280]	@ (8002f70 <HAL_GPIO_Init+0x2fc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x1f6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a45      	ldr	r2, [pc, #276]	@ (8002f74 <HAL_GPIO_Init+0x300>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_GPIO_Init+0x1f2>
 8002e62:	2304      	movs	r3, #4
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x204>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	@ (8002f60 <HAL_GPIO_Init+0x2ec>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e96:	4b38      	ldr	r3, [pc, #224]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eba:	4a2f      	ldr	r2, [pc, #188]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee4:	4a24      	ldr	r2, [pc, #144]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f14:	4b18      	ldr	r3, [pc, #96]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f38:	4a0f      	ldr	r2, [pc, #60]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f aea2 	bls.w	8002c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	@ 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e12b      	b.n	800321a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fdf6 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	@ 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 f89a 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a81      	ldr	r2, [pc, #516]	@ (8003224 <HAL_I2C_Init+0x274>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a80      	ldr	r2, [pc, #512]	@ (8003228 <HAL_I2C_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a7d      	ldr	r2, [pc, #500]	@ (800322c <HAL_I2C_Init+0x27c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e7      	b.n	800321a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a78      	ldr	r2, [pc, #480]	@ (8003230 <HAL_I2C_Init+0x280>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a6a      	ldr	r2, [pc, #424]	@ (8003224 <HAL_I2C_Init+0x274>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a69      	ldr	r2, [pc, #420]	@ (8003234 <HAL_I2C_Init+0x284>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	495c      	ldr	r1, [pc, #368]	@ (8003224 <HAL_I2C_Init+0x274>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d819      	bhi.n	80030ec <HAL_I2C_Init+0x13c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030cc:	400b      	ands	r3, r1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_I2C_Init+0x138>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e59      	subs	r1, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	e051      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e04f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_I2C_Init+0x168>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e012      	b.n	800313e <HAL_I2C_Init+0x18e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x196>
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_I2C_Init+0x1dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <HAL_I2C_Init+0x1bc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e58      	subs	r0, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	440b      	add	r3, r1
 800315c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800316a:	e00f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	6809      	ldr	r1, [r1, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6911      	ldr	r1, [r2, #16]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	003d08ff 	.word	0x003d08ff
 8003230:	431bde83 	.word	0x431bde83
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7fe fe84 	bl	8001f58 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 80e0 	bne.w	8003420 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	4970      	ldr	r1, [pc, #448]	@ (800342c <HAL_I2C_Master_Transmit+0x1f4>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f964 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	e0d3      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Transmit+0x50>
 8003284:	2302      	movs	r3, #2
 8003286:	e0cc      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d007      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	@ 0x21
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2210      	movs	r2, #16
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	893a      	ldrh	r2, [r7, #8]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a50      	ldr	r2, [pc, #320]	@ (8003430 <HAL_I2C_Master_Transmit+0x1f8>)
 80032ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f89c 	bl	8003434 <I2C_MasterRequestWrite>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e08d      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800331c:	e066      	b.n	80033ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fa22 	bl	800376c <I2C_WaitOnTXEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06b      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d11b      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x188>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa19 	bl	80037fc <I2C_WaitOnBTFFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01a      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d194      	bne.n	800331e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	00100002 	.word	0x00100002
 8003430:	ffff0000 	.word	0xffff0000

08003434 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	460b      	mov	r3, r1
 8003442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d006      	beq.n	800345e <I2C_MasterRequestWrite+0x2a>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d003      	beq.n	800345e <I2C_MasterRequestWrite+0x2a>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800345c:	d108      	bne.n	8003470 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e00b      	b.n	8003488 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	2b12      	cmp	r3, #18
 8003476:	d107      	bne.n	8003488 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003486:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f84f 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00d      	beq.n	80034bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ae:	d103      	bne.n	80034b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e035      	b.n	8003528 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c4:	d108      	bne.n	80034d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	e01b      	b.n	8003510 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	11db      	asrs	r3, r3, #7
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f063 030f 	orn	r3, r3, #15
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	490e      	ldr	r1, [pc, #56]	@ (8003530 <I2C_MasterRequestWrite+0xfc>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f898 	bl	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e010      	b.n	8003528 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4907      	ldr	r1, [pc, #28]	@ (8003534 <I2C_MasterRequestWrite+0x100>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f888 	bl	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	00010008 	.word	0x00010008
 8003534:	00010002 	.word	0x00010002

08003538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	e048      	b.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003550:	d044      	beq.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fd01 	bl	8001f58 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d139      	bne.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10d      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	e00c      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	43da      	mvns	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d116      	bne.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e023      	b.n	8003624 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10d      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	e00c      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	429a      	cmp	r2, r3
 8003620:	d093      	beq.n	800354a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363a:	e071      	b.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364a:	d123      	bne.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f043 0204 	orr.w	r2, r3, #4
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e067      	b.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800369a:	d041      	beq.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe fc5c 	bl	8001f58 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d136      	bne.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10c      	bne.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e00b      	b.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e021      	b.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10c      	bne.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	43da      	mvns	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e00b      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	f47f af6d 	bne.w	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003778:	e034      	b.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f886 	bl	800388c <I2C_IsAcknowledgeFailed>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003790:	d028      	beq.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fbe1 	bl	8001f58 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	2b80      	cmp	r3, #128	@ 0x80
 80037b4:	d016      	beq.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b80      	cmp	r3, #128	@ 0x80
 80037f0:	d1c3      	bne.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003808:	e034      	b.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f83e 	bl	800388c <I2C_IsAcknowledgeFailed>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e034      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003820:	d028      	beq.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fb99 	bl	8001f58 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11d      	bne.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d016      	beq.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d1c3      	bne.n	800380a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a2:	d11b      	bne.n	80038dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e267      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d075      	beq.n	80039f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390a:	4b88      	ldr	r3, [pc, #544]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00c      	beq.n	8003930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b85      	ldr	r3, [pc, #532]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	2b08      	cmp	r3, #8
 8003920:	d112      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b82      	ldr	r3, [pc, #520]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b7e      	ldr	r3, [pc, #504]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d05b      	beq.n	80039f4 <HAL_RCC_OscConfig+0x108>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d157      	bne.n	80039f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e242      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003950:	d106      	bne.n	8003960 <HAL_RCC_OscConfig+0x74>
 8003952:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x98>
 800396a:	4b70      	ldr	r3, [pc, #448]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6d      	ldr	r3, [pc, #436]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003984:	4b69      	ldr	r3, [pc, #420]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a68      	ldr	r2, [pc, #416]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b66      	ldr	r3, [pc, #408]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fad8 	bl	8001f58 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe fad4 	bl	8001f58 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e207      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5b      	ldr	r3, [pc, #364]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xc0>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fac4 	bl	8001f58 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe fac0 	bl	8001f58 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1f3      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b51      	ldr	r3, [pc, #324]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0xe8>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a02:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b44      	ldr	r3, [pc, #272]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1c7      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4937      	ldr	r1, [pc, #220]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe fa79 	bl	8001f58 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fa75 	bl	8001f58 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1a8      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b28      	ldr	r3, [pc, #160]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4925      	ldr	r1, [pc, #148]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fa58 	bl	8001f58 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fe fa54 	bl	8001f58 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e187      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fe fa38 	bl	8001f58 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fe fa34 	bl	8001f58 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e167      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x200>
 8003b0a:	e01b      	b.n	8003b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fe fa21 	bl	8001f58 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	e00e      	b.n	8003b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fa1d 	bl	8001f58 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d907      	bls.n	8003b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e150      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470000 	.word	0x42470000
 8003b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ea      	bne.n	8003b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8097 	beq.w	8003c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b81      	ldr	r3, [pc, #516]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b7d      	ldr	r3, [pc, #500]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b72:	4b7a      	ldr	r3, [pc, #488]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b77      	ldr	r3, [pc, #476]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a73      	ldr	r2, [pc, #460]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe f9dd 	bl	8001f58 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe f9d9 	bl	8001f58 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e10c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x2ea>
 8003bc8:	4b64      	ldr	r3, [pc, #400]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bcc:	4a63      	ldr	r2, [pc, #396]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x30c>
 8003bde:	4b5f      	ldr	r3, [pc, #380]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bea:	4b5c      	ldr	r3, [pc, #368]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	4a5b      	ldr	r2, [pc, #364]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bf8:	4b58      	ldr	r3, [pc, #352]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfc:	4a57      	ldr	r2, [pc, #348]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c04:	4b55      	ldr	r3, [pc, #340]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	4a54      	ldr	r2, [pc, #336]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fe f99e 	bl	8001f58 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fe f99a 	bl	8001f58 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0cb      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	4b49      	ldr	r3, [pc, #292]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ee      	beq.n	8003c20 <HAL_RCC_OscConfig+0x334>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fe f988 	bl	8001f58 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe f984 	bl	8001f58 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0b5      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	4b3e      	ldr	r3, [pc, #248]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a1 	beq.w	8003dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8a:	4b34      	ldr	r3, [pc, #208]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d05c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d141      	bne.n	8003d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe f958 	bl	8001f58 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe f954 	bl	8001f58 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e087      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	491b      	ldr	r1, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe f92d 	bl	8001f58 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fe f929 	bl	8001f58 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e05c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x416>
 8003d20:	e054      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe f916 	bl	8001f58 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe f912 	bl	8001f58 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e045      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x444>
 8003d4e:	e03d      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e038      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ec>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d121      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11a      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	3b01      	subs	r3, #1
 8003db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0cc      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d90c      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b65      	ldr	r3, [pc, #404]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d044      	beq.n	8003efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d119      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e067      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4934      	ldr	r1, [pc, #208]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7fe f844 	bl	8001f58 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fe f840 	bl	8001f58 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e04f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d20c      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b22      	ldr	r3, [pc, #136]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd ffa4 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	08004ff0 	.word	0x08004ff0
 8003fa0:	20000010 	.word	0x20000010
 8003fa4:	20000014 	.word	0x20000014

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b090      	sub	sp, #64	@ 0x40
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	f200 80a1 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fda:	e09b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b53      	ldr	r3, [pc, #332]	@ (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fde:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003fe0:	e09b      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe2:	4b53      	ldr	r3, [pc, #332]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fe6:	e098      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	627a      	str	r2, [r7, #36]	@ 0x24
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004010:	2100      	movs	r1, #0
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004014:	fb03 f201 	mul.w	r2, r3, r1
 8004018:	2300      	movs	r3, #0
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	4413      	add	r3, r2
 8004020:	4a43      	ldr	r2, [pc, #268]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004022:	fba0 1202 	umull	r1, r2, r0, r2
 8004026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004028:	460a      	mov	r2, r1
 800402a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800402c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402e:	4413      	add	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004034:	2200      	movs	r2, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004042:	f7fc fc23 	bl	800088c <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404e:	e053      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b35      	ldr	r3, [pc, #212]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	617a      	str	r2, [r7, #20]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	4652      	mov	r2, sl
 8004068:	465b      	mov	r3, fp
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	ebb2 080a 	subs.w	r8, r2, sl
 8004082:	eb63 090b 	sbc.w	r9, r3, fp
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004092:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004096:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409a:	ebb2 0408 	subs.w	r4, r2, r8
 800409e:	eb63 0509 	sbc.w	r5, r3, r9
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	00eb      	lsls	r3, r5, #3
 80040ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b0:	00e2      	lsls	r2, r4, #3
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	eb14 030a 	adds.w	r3, r4, sl
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	eb45 030b 	adc.w	r3, r5, fp
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ce:	4629      	mov	r1, r5
 80040d0:	028b      	lsls	r3, r1, #10
 80040d2:	4621      	mov	r1, r4
 80040d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d8:	4621      	mov	r1, r4
 80040da:	028a      	lsls	r2, r1, #10
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	f7fc fbce 	bl	800088c <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004108:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800411c:	4618      	mov	r0, r3
 800411e:	3740      	adds	r7, #64	@ 0x40
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	00f42400 	.word	0x00f42400
 8004130:	017d7840 	.word	0x017d7840

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000010 	.word	0x20000010

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004150:	f7ff fff0 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	08005000 	.word	0x08005000

08004174 <std>:
 8004174:	2300      	movs	r3, #0
 8004176:	b510      	push	{r4, lr}
 8004178:	4604      	mov	r4, r0
 800417a:	e9c0 3300 	strd	r3, r3, [r0]
 800417e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004182:	6083      	str	r3, [r0, #8]
 8004184:	8181      	strh	r1, [r0, #12]
 8004186:	6643      	str	r3, [r0, #100]	@ 0x64
 8004188:	81c2      	strh	r2, [r0, #14]
 800418a:	6183      	str	r3, [r0, #24]
 800418c:	4619      	mov	r1, r3
 800418e:	2208      	movs	r2, #8
 8004190:	305c      	adds	r0, #92	@ 0x5c
 8004192:	f000 f8c3 	bl	800431c <memset>
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <std+0x58>)
 8004198:	6263      	str	r3, [r4, #36]	@ 0x24
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <std+0x5c>)
 800419c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <std+0x60>)
 80041a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <std+0x64>)
 80041a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <std+0x68>)
 80041a8:	6224      	str	r4, [r4, #32]
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d006      	beq.n	80041bc <std+0x48>
 80041ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041b2:	4294      	cmp	r4, r2
 80041b4:	d002      	beq.n	80041bc <std+0x48>
 80041b6:	33d0      	adds	r3, #208	@ 0xd0
 80041b8:	429c      	cmp	r4, r3
 80041ba:	d105      	bne.n	80041c8 <std+0x54>
 80041bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c4:	f000 b8dc 	b.w	8004380 <__retarget_lock_init_recursive>
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	bf00      	nop
 80041cc:	08004bd9 	.word	0x08004bd9
 80041d0:	08004bfb 	.word	0x08004bfb
 80041d4:	08004c33 	.word	0x08004c33
 80041d8:	08004c57 	.word	0x08004c57
 80041dc:	20000718 	.word	0x20000718

080041e0 <stdio_exit_handler>:
 80041e0:	4a02      	ldr	r2, [pc, #8]	@ (80041ec <stdio_exit_handler+0xc>)
 80041e2:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <stdio_exit_handler+0x10>)
 80041e4:	4803      	ldr	r0, [pc, #12]	@ (80041f4 <stdio_exit_handler+0x14>)
 80041e6:	f000 b869 	b.w	80042bc <_fwalk_sglue>
 80041ea:	bf00      	nop
 80041ec:	2000001c 	.word	0x2000001c
 80041f0:	08004b71 	.word	0x08004b71
 80041f4:	2000002c 	.word	0x2000002c

080041f8 <cleanup_stdio>:
 80041f8:	6841      	ldr	r1, [r0, #4]
 80041fa:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <cleanup_stdio+0x34>)
 80041fc:	4299      	cmp	r1, r3
 80041fe:	b510      	push	{r4, lr}
 8004200:	4604      	mov	r4, r0
 8004202:	d001      	beq.n	8004208 <cleanup_stdio+0x10>
 8004204:	f000 fcb4 	bl	8004b70 <_fflush_r>
 8004208:	68a1      	ldr	r1, [r4, #8]
 800420a:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <cleanup_stdio+0x38>)
 800420c:	4299      	cmp	r1, r3
 800420e:	d002      	beq.n	8004216 <cleanup_stdio+0x1e>
 8004210:	4620      	mov	r0, r4
 8004212:	f000 fcad 	bl	8004b70 <_fflush_r>
 8004216:	68e1      	ldr	r1, [r4, #12]
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <cleanup_stdio+0x3c>)
 800421a:	4299      	cmp	r1, r3
 800421c:	d004      	beq.n	8004228 <cleanup_stdio+0x30>
 800421e:	4620      	mov	r0, r4
 8004220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004224:	f000 bca4 	b.w	8004b70 <_fflush_r>
 8004228:	bd10      	pop	{r4, pc}
 800422a:	bf00      	nop
 800422c:	20000718 	.word	0x20000718
 8004230:	20000780 	.word	0x20000780
 8004234:	200007e8 	.word	0x200007e8

08004238 <global_stdio_init.part.0>:
 8004238:	b510      	push	{r4, lr}
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <global_stdio_init.part.0+0x30>)
 800423c:	4c0b      	ldr	r4, [pc, #44]	@ (800426c <global_stdio_init.part.0+0x34>)
 800423e:	4a0c      	ldr	r2, [pc, #48]	@ (8004270 <global_stdio_init.part.0+0x38>)
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	4620      	mov	r0, r4
 8004244:	2200      	movs	r2, #0
 8004246:	2104      	movs	r1, #4
 8004248:	f7ff ff94 	bl	8004174 <std>
 800424c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004250:	2201      	movs	r2, #1
 8004252:	2109      	movs	r1, #9
 8004254:	f7ff ff8e 	bl	8004174 <std>
 8004258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800425c:	2202      	movs	r2, #2
 800425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004262:	2112      	movs	r1, #18
 8004264:	f7ff bf86 	b.w	8004174 <std>
 8004268:	20000850 	.word	0x20000850
 800426c:	20000718 	.word	0x20000718
 8004270:	080041e1 	.word	0x080041e1

08004274 <__sfp_lock_acquire>:
 8004274:	4801      	ldr	r0, [pc, #4]	@ (800427c <__sfp_lock_acquire+0x8>)
 8004276:	f000 b884 	b.w	8004382 <__retarget_lock_acquire_recursive>
 800427a:	bf00      	nop
 800427c:	20000855 	.word	0x20000855

08004280 <__sfp_lock_release>:
 8004280:	4801      	ldr	r0, [pc, #4]	@ (8004288 <__sfp_lock_release+0x8>)
 8004282:	f000 b87f 	b.w	8004384 <__retarget_lock_release_recursive>
 8004286:	bf00      	nop
 8004288:	20000855 	.word	0x20000855

0800428c <__sinit>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4604      	mov	r4, r0
 8004290:	f7ff fff0 	bl	8004274 <__sfp_lock_acquire>
 8004294:	6a23      	ldr	r3, [r4, #32]
 8004296:	b11b      	cbz	r3, 80042a0 <__sinit+0x14>
 8004298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800429c:	f7ff bff0 	b.w	8004280 <__sfp_lock_release>
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <__sinit+0x28>)
 80042a2:	6223      	str	r3, [r4, #32]
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <__sinit+0x2c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f5      	bne.n	8004298 <__sinit+0xc>
 80042ac:	f7ff ffc4 	bl	8004238 <global_stdio_init.part.0>
 80042b0:	e7f2      	b.n	8004298 <__sinit+0xc>
 80042b2:	bf00      	nop
 80042b4:	080041f9 	.word	0x080041f9
 80042b8:	20000850 	.word	0x20000850

080042bc <_fwalk_sglue>:
 80042bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c0:	4607      	mov	r7, r0
 80042c2:	4688      	mov	r8, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	2600      	movs	r6, #0
 80042c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042cc:	f1b9 0901 	subs.w	r9, r9, #1
 80042d0:	d505      	bpl.n	80042de <_fwalk_sglue+0x22>
 80042d2:	6824      	ldr	r4, [r4, #0]
 80042d4:	2c00      	cmp	r4, #0
 80042d6:	d1f7      	bne.n	80042c8 <_fwalk_sglue+0xc>
 80042d8:	4630      	mov	r0, r6
 80042da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d907      	bls.n	80042f4 <_fwalk_sglue+0x38>
 80042e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042e8:	3301      	adds	r3, #1
 80042ea:	d003      	beq.n	80042f4 <_fwalk_sglue+0x38>
 80042ec:	4629      	mov	r1, r5
 80042ee:	4638      	mov	r0, r7
 80042f0:	47c0      	blx	r8
 80042f2:	4306      	orrs	r6, r0
 80042f4:	3568      	adds	r5, #104	@ 0x68
 80042f6:	e7e9      	b.n	80042cc <_fwalk_sglue+0x10>

080042f8 <iprintf>:
 80042f8:	b40f      	push	{r0, r1, r2, r3}
 80042fa:	b507      	push	{r0, r1, r2, lr}
 80042fc:	4906      	ldr	r1, [pc, #24]	@ (8004318 <iprintf+0x20>)
 80042fe:	ab04      	add	r3, sp, #16
 8004300:	6808      	ldr	r0, [r1, #0]
 8004302:	f853 2b04 	ldr.w	r2, [r3], #4
 8004306:	6881      	ldr	r1, [r0, #8]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	f000 f865 	bl	80043d8 <_vfiprintf_r>
 800430e:	b003      	add	sp, #12
 8004310:	f85d eb04 	ldr.w	lr, [sp], #4
 8004314:	b004      	add	sp, #16
 8004316:	4770      	bx	lr
 8004318:	20000028 	.word	0x20000028

0800431c <memset>:
 800431c:	4402      	add	r2, r0
 800431e:	4603      	mov	r3, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	d100      	bne.n	8004326 <memset+0xa>
 8004324:	4770      	bx	lr
 8004326:	f803 1b01 	strb.w	r1, [r3], #1
 800432a:	e7f9      	b.n	8004320 <memset+0x4>

0800432c <__errno>:
 800432c:	4b01      	ldr	r3, [pc, #4]	@ (8004334 <__errno+0x8>)
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000028 	.word	0x20000028

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	4d0d      	ldr	r5, [pc, #52]	@ (8004370 <__libc_init_array+0x38>)
 800433c:	4c0d      	ldr	r4, [pc, #52]	@ (8004374 <__libc_init_array+0x3c>)
 800433e:	1b64      	subs	r4, r4, r5
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	2600      	movs	r6, #0
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	4d0b      	ldr	r5, [pc, #44]	@ (8004378 <__libc_init_array+0x40>)
 800434a:	4c0c      	ldr	r4, [pc, #48]	@ (800437c <__libc_init_array+0x44>)
 800434c:	f000 fe40 	bl	8004fd0 <_init>
 8004350:	1b64      	subs	r4, r4, r5
 8004352:	10a4      	asrs	r4, r4, #2
 8004354:	2600      	movs	r6, #0
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	f855 3b04 	ldr.w	r3, [r5], #4
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	0800504c 	.word	0x0800504c
 8004374:	0800504c 	.word	0x0800504c
 8004378:	0800504c 	.word	0x0800504c
 800437c:	08005050 	.word	0x08005050

08004380 <__retarget_lock_init_recursive>:
 8004380:	4770      	bx	lr

08004382 <__retarget_lock_acquire_recursive>:
 8004382:	4770      	bx	lr

08004384 <__retarget_lock_release_recursive>:
 8004384:	4770      	bx	lr

08004386 <__sfputc_r>:
 8004386:	6893      	ldr	r3, [r2, #8]
 8004388:	3b01      	subs	r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	b410      	push	{r4}
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	da08      	bge.n	80043a4 <__sfputc_r+0x1e>
 8004392:	6994      	ldr	r4, [r2, #24]
 8004394:	42a3      	cmp	r3, r4
 8004396:	db01      	blt.n	800439c <__sfputc_r+0x16>
 8004398:	290a      	cmp	r1, #10
 800439a:	d103      	bne.n	80043a4 <__sfputc_r+0x1e>
 800439c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a0:	f000 bc5d 	b.w	8004c5e <__swbuf_r>
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	1c58      	adds	r0, r3, #1
 80043a8:	6010      	str	r0, [r2, #0]
 80043aa:	7019      	strb	r1, [r3, #0]
 80043ac:	4608      	mov	r0, r1
 80043ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <__sfputs_r>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	4606      	mov	r6, r0
 80043b8:	460f      	mov	r7, r1
 80043ba:	4614      	mov	r4, r2
 80043bc:	18d5      	adds	r5, r2, r3
 80043be:	42ac      	cmp	r4, r5
 80043c0:	d101      	bne.n	80043c6 <__sfputs_r+0x12>
 80043c2:	2000      	movs	r0, #0
 80043c4:	e007      	b.n	80043d6 <__sfputs_r+0x22>
 80043c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ca:	463a      	mov	r2, r7
 80043cc:	4630      	mov	r0, r6
 80043ce:	f7ff ffda 	bl	8004386 <__sfputc_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	d1f3      	bne.n	80043be <__sfputs_r+0xa>
 80043d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080043d8 <_vfiprintf_r>:
 80043d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043dc:	460d      	mov	r5, r1
 80043de:	b09d      	sub	sp, #116	@ 0x74
 80043e0:	4614      	mov	r4, r2
 80043e2:	4698      	mov	r8, r3
 80043e4:	4606      	mov	r6, r0
 80043e6:	b118      	cbz	r0, 80043f0 <_vfiprintf_r+0x18>
 80043e8:	6a03      	ldr	r3, [r0, #32]
 80043ea:	b90b      	cbnz	r3, 80043f0 <_vfiprintf_r+0x18>
 80043ec:	f7ff ff4e 	bl	800428c <__sinit>
 80043f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043f2:	07d9      	lsls	r1, r3, #31
 80043f4:	d405      	bmi.n	8004402 <_vfiprintf_r+0x2a>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	059a      	lsls	r2, r3, #22
 80043fa:	d402      	bmi.n	8004402 <_vfiprintf_r+0x2a>
 80043fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043fe:	f7ff ffc0 	bl	8004382 <__retarget_lock_acquire_recursive>
 8004402:	89ab      	ldrh	r3, [r5, #12]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	d501      	bpl.n	800440c <_vfiprintf_r+0x34>
 8004408:	692b      	ldr	r3, [r5, #16]
 800440a:	b99b      	cbnz	r3, 8004434 <_vfiprintf_r+0x5c>
 800440c:	4629      	mov	r1, r5
 800440e:	4630      	mov	r0, r6
 8004410:	f000 fc64 	bl	8004cdc <__swsetup_r>
 8004414:	b170      	cbz	r0, 8004434 <_vfiprintf_r+0x5c>
 8004416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004418:	07dc      	lsls	r4, r3, #31
 800441a:	d504      	bpl.n	8004426 <_vfiprintf_r+0x4e>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004420:	b01d      	add	sp, #116	@ 0x74
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	0598      	lsls	r0, r3, #22
 800442a:	d4f7      	bmi.n	800441c <_vfiprintf_r+0x44>
 800442c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800442e:	f7ff ffa9 	bl	8004384 <__retarget_lock_release_recursive>
 8004432:	e7f3      	b.n	800441c <_vfiprintf_r+0x44>
 8004434:	2300      	movs	r3, #0
 8004436:	9309      	str	r3, [sp, #36]	@ 0x24
 8004438:	2320      	movs	r3, #32
 800443a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800443e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004442:	2330      	movs	r3, #48	@ 0x30
 8004444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045f4 <_vfiprintf_r+0x21c>
 8004448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800444c:	f04f 0901 	mov.w	r9, #1
 8004450:	4623      	mov	r3, r4
 8004452:	469a      	mov	sl, r3
 8004454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004458:	b10a      	cbz	r2, 800445e <_vfiprintf_r+0x86>
 800445a:	2a25      	cmp	r2, #37	@ 0x25
 800445c:	d1f9      	bne.n	8004452 <_vfiprintf_r+0x7a>
 800445e:	ebba 0b04 	subs.w	fp, sl, r4
 8004462:	d00b      	beq.n	800447c <_vfiprintf_r+0xa4>
 8004464:	465b      	mov	r3, fp
 8004466:	4622      	mov	r2, r4
 8004468:	4629      	mov	r1, r5
 800446a:	4630      	mov	r0, r6
 800446c:	f7ff ffa2 	bl	80043b4 <__sfputs_r>
 8004470:	3001      	adds	r0, #1
 8004472:	f000 80a7 	beq.w	80045c4 <_vfiprintf_r+0x1ec>
 8004476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004478:	445a      	add	r2, fp
 800447a:	9209      	str	r2, [sp, #36]	@ 0x24
 800447c:	f89a 3000 	ldrb.w	r3, [sl]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 809f 	beq.w	80045c4 <_vfiprintf_r+0x1ec>
 8004486:	2300      	movs	r3, #0
 8004488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800448c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004490:	f10a 0a01 	add.w	sl, sl, #1
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	9307      	str	r3, [sp, #28]
 8004498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800449c:	931a      	str	r3, [sp, #104]	@ 0x68
 800449e:	4654      	mov	r4, sl
 80044a0:	2205      	movs	r2, #5
 80044a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a6:	4853      	ldr	r0, [pc, #332]	@ (80045f4 <_vfiprintf_r+0x21c>)
 80044a8:	f7fb fe9a 	bl	80001e0 <memchr>
 80044ac:	9a04      	ldr	r2, [sp, #16]
 80044ae:	b9d8      	cbnz	r0, 80044e8 <_vfiprintf_r+0x110>
 80044b0:	06d1      	lsls	r1, r2, #27
 80044b2:	bf44      	itt	mi
 80044b4:	2320      	movmi	r3, #32
 80044b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ba:	0713      	lsls	r3, r2, #28
 80044bc:	bf44      	itt	mi
 80044be:	232b      	movmi	r3, #43	@ 0x2b
 80044c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c4:	f89a 3000 	ldrb.w	r3, [sl]
 80044c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ca:	d015      	beq.n	80044f8 <_vfiprintf_r+0x120>
 80044cc:	9a07      	ldr	r2, [sp, #28]
 80044ce:	4654      	mov	r4, sl
 80044d0:	2000      	movs	r0, #0
 80044d2:	f04f 0c0a 	mov.w	ip, #10
 80044d6:	4621      	mov	r1, r4
 80044d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044dc:	3b30      	subs	r3, #48	@ 0x30
 80044de:	2b09      	cmp	r3, #9
 80044e0:	d94b      	bls.n	800457a <_vfiprintf_r+0x1a2>
 80044e2:	b1b0      	cbz	r0, 8004512 <_vfiprintf_r+0x13a>
 80044e4:	9207      	str	r2, [sp, #28]
 80044e6:	e014      	b.n	8004512 <_vfiprintf_r+0x13a>
 80044e8:	eba0 0308 	sub.w	r3, r0, r8
 80044ec:	fa09 f303 	lsl.w	r3, r9, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	46a2      	mov	sl, r4
 80044f6:	e7d2      	b.n	800449e <_vfiprintf_r+0xc6>
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	1d19      	adds	r1, r3, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	bfbb      	ittet	lt
 8004504:	425b      	neglt	r3, r3
 8004506:	f042 0202 	orrlt.w	r2, r2, #2
 800450a:	9307      	strge	r3, [sp, #28]
 800450c:	9307      	strlt	r3, [sp, #28]
 800450e:	bfb8      	it	lt
 8004510:	9204      	strlt	r2, [sp, #16]
 8004512:	7823      	ldrb	r3, [r4, #0]
 8004514:	2b2e      	cmp	r3, #46	@ 0x2e
 8004516:	d10a      	bne.n	800452e <_vfiprintf_r+0x156>
 8004518:	7863      	ldrb	r3, [r4, #1]
 800451a:	2b2a      	cmp	r3, #42	@ 0x2a
 800451c:	d132      	bne.n	8004584 <_vfiprintf_r+0x1ac>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	9203      	str	r2, [sp, #12]
 8004526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800452a:	3402      	adds	r4, #2
 800452c:	9305      	str	r3, [sp, #20]
 800452e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004604 <_vfiprintf_r+0x22c>
 8004532:	7821      	ldrb	r1, [r4, #0]
 8004534:	2203      	movs	r2, #3
 8004536:	4650      	mov	r0, sl
 8004538:	f7fb fe52 	bl	80001e0 <memchr>
 800453c:	b138      	cbz	r0, 800454e <_vfiprintf_r+0x176>
 800453e:	9b04      	ldr	r3, [sp, #16]
 8004540:	eba0 000a 	sub.w	r0, r0, sl
 8004544:	2240      	movs	r2, #64	@ 0x40
 8004546:	4082      	lsls	r2, r0
 8004548:	4313      	orrs	r3, r2
 800454a:	3401      	adds	r4, #1
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004552:	4829      	ldr	r0, [pc, #164]	@ (80045f8 <_vfiprintf_r+0x220>)
 8004554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004558:	2206      	movs	r2, #6
 800455a:	f7fb fe41 	bl	80001e0 <memchr>
 800455e:	2800      	cmp	r0, #0
 8004560:	d03f      	beq.n	80045e2 <_vfiprintf_r+0x20a>
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <_vfiprintf_r+0x224>)
 8004564:	bb1b      	cbnz	r3, 80045ae <_vfiprintf_r+0x1d6>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	3307      	adds	r3, #7
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	3308      	adds	r3, #8
 8004570:	9303      	str	r3, [sp, #12]
 8004572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004574:	443b      	add	r3, r7
 8004576:	9309      	str	r3, [sp, #36]	@ 0x24
 8004578:	e76a      	b.n	8004450 <_vfiprintf_r+0x78>
 800457a:	fb0c 3202 	mla	r2, ip, r2, r3
 800457e:	460c      	mov	r4, r1
 8004580:	2001      	movs	r0, #1
 8004582:	e7a8      	b.n	80044d6 <_vfiprintf_r+0xfe>
 8004584:	2300      	movs	r3, #0
 8004586:	3401      	adds	r4, #1
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	4619      	mov	r1, r3
 800458c:	f04f 0c0a 	mov.w	ip, #10
 8004590:	4620      	mov	r0, r4
 8004592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004596:	3a30      	subs	r2, #48	@ 0x30
 8004598:	2a09      	cmp	r2, #9
 800459a:	d903      	bls.n	80045a4 <_vfiprintf_r+0x1cc>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0c6      	beq.n	800452e <_vfiprintf_r+0x156>
 80045a0:	9105      	str	r1, [sp, #20]
 80045a2:	e7c4      	b.n	800452e <_vfiprintf_r+0x156>
 80045a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a8:	4604      	mov	r4, r0
 80045aa:	2301      	movs	r3, #1
 80045ac:	e7f0      	b.n	8004590 <_vfiprintf_r+0x1b8>
 80045ae:	ab03      	add	r3, sp, #12
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	462a      	mov	r2, r5
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <_vfiprintf_r+0x228>)
 80045b6:	a904      	add	r1, sp, #16
 80045b8:	4630      	mov	r0, r6
 80045ba:	f3af 8000 	nop.w
 80045be:	4607      	mov	r7, r0
 80045c0:	1c78      	adds	r0, r7, #1
 80045c2:	d1d6      	bne.n	8004572 <_vfiprintf_r+0x19a>
 80045c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045c6:	07d9      	lsls	r1, r3, #31
 80045c8:	d405      	bmi.n	80045d6 <_vfiprintf_r+0x1fe>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	059a      	lsls	r2, r3, #22
 80045ce:	d402      	bmi.n	80045d6 <_vfiprintf_r+0x1fe>
 80045d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045d2:	f7ff fed7 	bl	8004384 <__retarget_lock_release_recursive>
 80045d6:	89ab      	ldrh	r3, [r5, #12]
 80045d8:	065b      	lsls	r3, r3, #25
 80045da:	f53f af1f 	bmi.w	800441c <_vfiprintf_r+0x44>
 80045de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045e0:	e71e      	b.n	8004420 <_vfiprintf_r+0x48>
 80045e2:	ab03      	add	r3, sp, #12
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	462a      	mov	r2, r5
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <_vfiprintf_r+0x228>)
 80045ea:	a904      	add	r1, sp, #16
 80045ec:	4630      	mov	r0, r6
 80045ee:	f000 f91b 	bl	8004828 <_printf_i>
 80045f2:	e7e4      	b.n	80045be <_vfiprintf_r+0x1e6>
 80045f4:	08005010 	.word	0x08005010
 80045f8:	0800501a 	.word	0x0800501a
 80045fc:	00000000 	.word	0x00000000
 8004600:	080043b5 	.word	0x080043b5
 8004604:	08005016 	.word	0x08005016

08004608 <sbrk_aligned>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4e0f      	ldr	r6, [pc, #60]	@ (8004648 <sbrk_aligned+0x40>)
 800460c:	460c      	mov	r4, r1
 800460e:	6831      	ldr	r1, [r6, #0]
 8004610:	4605      	mov	r5, r0
 8004612:	b911      	cbnz	r1, 800461a <sbrk_aligned+0x12>
 8004614:	f000 fc70 	bl	8004ef8 <_sbrk_r>
 8004618:	6030      	str	r0, [r6, #0]
 800461a:	4621      	mov	r1, r4
 800461c:	4628      	mov	r0, r5
 800461e:	f000 fc6b 	bl	8004ef8 <_sbrk_r>
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	d103      	bne.n	800462e <sbrk_aligned+0x26>
 8004626:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800462a:	4620      	mov	r0, r4
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	1cc4      	adds	r4, r0, #3
 8004630:	f024 0403 	bic.w	r4, r4, #3
 8004634:	42a0      	cmp	r0, r4
 8004636:	d0f8      	beq.n	800462a <sbrk_aligned+0x22>
 8004638:	1a21      	subs	r1, r4, r0
 800463a:	4628      	mov	r0, r5
 800463c:	f000 fc5c 	bl	8004ef8 <_sbrk_r>
 8004640:	3001      	adds	r0, #1
 8004642:	d1f2      	bne.n	800462a <sbrk_aligned+0x22>
 8004644:	e7ef      	b.n	8004626 <sbrk_aligned+0x1e>
 8004646:	bf00      	nop
 8004648:	20000858 	.word	0x20000858

0800464c <_malloc_r>:
 800464c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004650:	1ccd      	adds	r5, r1, #3
 8004652:	f025 0503 	bic.w	r5, r5, #3
 8004656:	3508      	adds	r5, #8
 8004658:	2d0c      	cmp	r5, #12
 800465a:	bf38      	it	cc
 800465c:	250c      	movcc	r5, #12
 800465e:	2d00      	cmp	r5, #0
 8004660:	4606      	mov	r6, r0
 8004662:	db01      	blt.n	8004668 <_malloc_r+0x1c>
 8004664:	42a9      	cmp	r1, r5
 8004666:	d904      	bls.n	8004672 <_malloc_r+0x26>
 8004668:	230c      	movs	r3, #12
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	2000      	movs	r0, #0
 800466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004748 <_malloc_r+0xfc>
 8004676:	f000 faa3 	bl	8004bc0 <__malloc_lock>
 800467a:	f8d8 3000 	ldr.w	r3, [r8]
 800467e:	461c      	mov	r4, r3
 8004680:	bb44      	cbnz	r4, 80046d4 <_malloc_r+0x88>
 8004682:	4629      	mov	r1, r5
 8004684:	4630      	mov	r0, r6
 8004686:	f7ff ffbf 	bl	8004608 <sbrk_aligned>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	4604      	mov	r4, r0
 800468e:	d158      	bne.n	8004742 <_malloc_r+0xf6>
 8004690:	f8d8 4000 	ldr.w	r4, [r8]
 8004694:	4627      	mov	r7, r4
 8004696:	2f00      	cmp	r7, #0
 8004698:	d143      	bne.n	8004722 <_malloc_r+0xd6>
 800469a:	2c00      	cmp	r4, #0
 800469c:	d04b      	beq.n	8004736 <_malloc_r+0xea>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	4639      	mov	r1, r7
 80046a2:	4630      	mov	r0, r6
 80046a4:	eb04 0903 	add.w	r9, r4, r3
 80046a8:	f000 fc26 	bl	8004ef8 <_sbrk_r>
 80046ac:	4581      	cmp	r9, r0
 80046ae:	d142      	bne.n	8004736 <_malloc_r+0xea>
 80046b0:	6821      	ldr	r1, [r4, #0]
 80046b2:	1a6d      	subs	r5, r5, r1
 80046b4:	4629      	mov	r1, r5
 80046b6:	4630      	mov	r0, r6
 80046b8:	f7ff ffa6 	bl	8004608 <sbrk_aligned>
 80046bc:	3001      	adds	r0, #1
 80046be:	d03a      	beq.n	8004736 <_malloc_r+0xea>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	442b      	add	r3, r5
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	bb62      	cbnz	r2, 8004728 <_malloc_r+0xdc>
 80046ce:	f8c8 7000 	str.w	r7, [r8]
 80046d2:	e00f      	b.n	80046f4 <_malloc_r+0xa8>
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	1b52      	subs	r2, r2, r5
 80046d8:	d420      	bmi.n	800471c <_malloc_r+0xd0>
 80046da:	2a0b      	cmp	r2, #11
 80046dc:	d917      	bls.n	800470e <_malloc_r+0xc2>
 80046de:	1961      	adds	r1, r4, r5
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	6025      	str	r5, [r4, #0]
 80046e4:	bf18      	it	ne
 80046e6:	6059      	strne	r1, [r3, #4]
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	bf08      	it	eq
 80046ec:	f8c8 1000 	streq.w	r1, [r8]
 80046f0:	5162      	str	r2, [r4, r5]
 80046f2:	604b      	str	r3, [r1, #4]
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 fa69 	bl	8004bcc <__malloc_unlock>
 80046fa:	f104 000b 	add.w	r0, r4, #11
 80046fe:	1d23      	adds	r3, r4, #4
 8004700:	f020 0007 	bic.w	r0, r0, #7
 8004704:	1ac2      	subs	r2, r0, r3
 8004706:	bf1c      	itt	ne
 8004708:	1a1b      	subne	r3, r3, r0
 800470a:	50a3      	strne	r3, [r4, r2]
 800470c:	e7af      	b.n	800466e <_malloc_r+0x22>
 800470e:	6862      	ldr	r2, [r4, #4]
 8004710:	42a3      	cmp	r3, r4
 8004712:	bf0c      	ite	eq
 8004714:	f8c8 2000 	streq.w	r2, [r8]
 8004718:	605a      	strne	r2, [r3, #4]
 800471a:	e7eb      	b.n	80046f4 <_malloc_r+0xa8>
 800471c:	4623      	mov	r3, r4
 800471e:	6864      	ldr	r4, [r4, #4]
 8004720:	e7ae      	b.n	8004680 <_malloc_r+0x34>
 8004722:	463c      	mov	r4, r7
 8004724:	687f      	ldr	r7, [r7, #4]
 8004726:	e7b6      	b.n	8004696 <_malloc_r+0x4a>
 8004728:	461a      	mov	r2, r3
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	42a3      	cmp	r3, r4
 800472e:	d1fb      	bne.n	8004728 <_malloc_r+0xdc>
 8004730:	2300      	movs	r3, #0
 8004732:	6053      	str	r3, [r2, #4]
 8004734:	e7de      	b.n	80046f4 <_malloc_r+0xa8>
 8004736:	230c      	movs	r3, #12
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	4630      	mov	r0, r6
 800473c:	f000 fa46 	bl	8004bcc <__malloc_unlock>
 8004740:	e794      	b.n	800466c <_malloc_r+0x20>
 8004742:	6005      	str	r5, [r0, #0]
 8004744:	e7d6      	b.n	80046f4 <_malloc_r+0xa8>
 8004746:	bf00      	nop
 8004748:	2000085c 	.word	0x2000085c

0800474c <_printf_common>:
 800474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	4616      	mov	r6, r2
 8004752:	4698      	mov	r8, r3
 8004754:	688a      	ldr	r2, [r1, #8]
 8004756:	690b      	ldr	r3, [r1, #16]
 8004758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800475c:	4293      	cmp	r3, r2
 800475e:	bfb8      	it	lt
 8004760:	4613      	movlt	r3, r2
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004768:	4607      	mov	r7, r0
 800476a:	460c      	mov	r4, r1
 800476c:	b10a      	cbz	r2, 8004772 <_printf_common+0x26>
 800476e:	3301      	adds	r3, #1
 8004770:	6033      	str	r3, [r6, #0]
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	0699      	lsls	r1, r3, #26
 8004776:	bf42      	ittt	mi
 8004778:	6833      	ldrmi	r3, [r6, #0]
 800477a:	3302      	addmi	r3, #2
 800477c:	6033      	strmi	r3, [r6, #0]
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	f015 0506 	ands.w	r5, r5, #6
 8004784:	d106      	bne.n	8004794 <_printf_common+0x48>
 8004786:	f104 0a19 	add.w	sl, r4, #25
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	6832      	ldr	r2, [r6, #0]
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	42ab      	cmp	r3, r5
 8004792:	dc26      	bgt.n	80047e2 <_printf_common+0x96>
 8004794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	3b00      	subs	r3, #0
 800479c:	bf18      	it	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	0692      	lsls	r2, r2, #26
 80047a2:	d42b      	bmi.n	80047fc <_printf_common+0xb0>
 80047a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047a8:	4641      	mov	r1, r8
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c8      	blx	r9
 80047ae:	3001      	adds	r0, #1
 80047b0:	d01e      	beq.n	80047f0 <_printf_common+0xa4>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	f003 0306 	and.w	r3, r3, #6
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf02      	ittt	eq
 80047be:	68e5      	ldreq	r5, [r4, #12]
 80047c0:	6833      	ldreq	r3, [r6, #0]
 80047c2:	1aed      	subeq	r5, r5, r3
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	bf0c      	ite	eq
 80047c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047cc:	2500      	movne	r5, #0
 80047ce:	4293      	cmp	r3, r2
 80047d0:	bfc4      	itt	gt
 80047d2:	1a9b      	subgt	r3, r3, r2
 80047d4:	18ed      	addgt	r5, r5, r3
 80047d6:	2600      	movs	r6, #0
 80047d8:	341a      	adds	r4, #26
 80047da:	42b5      	cmp	r5, r6
 80047dc:	d11a      	bne.n	8004814 <_printf_common+0xc8>
 80047de:	2000      	movs	r0, #0
 80047e0:	e008      	b.n	80047f4 <_printf_common+0xa8>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4652      	mov	r2, sl
 80047e6:	4641      	mov	r1, r8
 80047e8:	4638      	mov	r0, r7
 80047ea:	47c8      	blx	r9
 80047ec:	3001      	adds	r0, #1
 80047ee:	d103      	bne.n	80047f8 <_printf_common+0xac>
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f8:	3501      	adds	r5, #1
 80047fa:	e7c6      	b.n	800478a <_printf_common+0x3e>
 80047fc:	18e1      	adds	r1, r4, r3
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	2030      	movs	r0, #48	@ 0x30
 8004802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004806:	4422      	add	r2, r4
 8004808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800480c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004810:	3302      	adds	r3, #2
 8004812:	e7c7      	b.n	80047a4 <_printf_common+0x58>
 8004814:	2301      	movs	r3, #1
 8004816:	4622      	mov	r2, r4
 8004818:	4641      	mov	r1, r8
 800481a:	4638      	mov	r0, r7
 800481c:	47c8      	blx	r9
 800481e:	3001      	adds	r0, #1
 8004820:	d0e6      	beq.n	80047f0 <_printf_common+0xa4>
 8004822:	3601      	adds	r6, #1
 8004824:	e7d9      	b.n	80047da <_printf_common+0x8e>
	...

08004828 <_printf_i>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	7e0f      	ldrb	r7, [r1, #24]
 800482e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004830:	2f78      	cmp	r7, #120	@ 0x78
 8004832:	4691      	mov	r9, r2
 8004834:	4680      	mov	r8, r0
 8004836:	460c      	mov	r4, r1
 8004838:	469a      	mov	sl, r3
 800483a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800483e:	d807      	bhi.n	8004850 <_printf_i+0x28>
 8004840:	2f62      	cmp	r7, #98	@ 0x62
 8004842:	d80a      	bhi.n	800485a <_printf_i+0x32>
 8004844:	2f00      	cmp	r7, #0
 8004846:	f000 80d2 	beq.w	80049ee <_printf_i+0x1c6>
 800484a:	2f58      	cmp	r7, #88	@ 0x58
 800484c:	f000 80b9 	beq.w	80049c2 <_printf_i+0x19a>
 8004850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004858:	e03a      	b.n	80048d0 <_printf_i+0xa8>
 800485a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800485e:	2b15      	cmp	r3, #21
 8004860:	d8f6      	bhi.n	8004850 <_printf_i+0x28>
 8004862:	a101      	add	r1, pc, #4	@ (adr r1, 8004868 <_printf_i+0x40>)
 8004864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048d5 	.word	0x080048d5
 8004870:	08004851 	.word	0x08004851
 8004874:	08004851 	.word	0x08004851
 8004878:	08004851 	.word	0x08004851
 800487c:	08004851 	.word	0x08004851
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004851 	.word	0x08004851
 8004888:	08004851 	.word	0x08004851
 800488c:	08004851 	.word	0x08004851
 8004890:	08004851 	.word	0x08004851
 8004894:	080049d5 	.word	0x080049d5
 8004898:	080048ff 	.word	0x080048ff
 800489c:	0800498f 	.word	0x0800498f
 80048a0:	08004851 	.word	0x08004851
 80048a4:	08004851 	.word	0x08004851
 80048a8:	080049f7 	.word	0x080049f7
 80048ac:	08004851 	.word	0x08004851
 80048b0:	080048ff 	.word	0x080048ff
 80048b4:	08004851 	.word	0x08004851
 80048b8:	08004851 	.word	0x08004851
 80048bc:	08004997 	.word	0x08004997
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048d0:	2301      	movs	r3, #1
 80048d2:	e09d      	b.n	8004a10 <_printf_i+0x1e8>
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	6031      	str	r1, [r6, #0]
 80048dc:	0606      	lsls	r6, r0, #24
 80048de:	d501      	bpl.n	80048e4 <_printf_i+0xbc>
 80048e0:	681d      	ldr	r5, [r3, #0]
 80048e2:	e003      	b.n	80048ec <_printf_i+0xc4>
 80048e4:	0645      	lsls	r5, r0, #25
 80048e6:	d5fb      	bpl.n	80048e0 <_printf_i+0xb8>
 80048e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xd0>
 80048f0:	232d      	movs	r3, #45	@ 0x2d
 80048f2:	426d      	negs	r5, r5
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f8:	4859      	ldr	r0, [pc, #356]	@ (8004a60 <_printf_i+0x238>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	e011      	b.n	8004922 <_printf_i+0xfa>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	0608      	lsls	r0, r1, #24
 8004904:	f853 5b04 	ldr.w	r5, [r3], #4
 8004908:	d402      	bmi.n	8004910 <_printf_i+0xe8>
 800490a:	0649      	lsls	r1, r1, #25
 800490c:	bf48      	it	mi
 800490e:	b2ad      	uxthmi	r5, r5
 8004910:	2f6f      	cmp	r7, #111	@ 0x6f
 8004912:	4853      	ldr	r0, [pc, #332]	@ (8004a60 <_printf_i+0x238>)
 8004914:	6033      	str	r3, [r6, #0]
 8004916:	bf14      	ite	ne
 8004918:	230a      	movne	r3, #10
 800491a:	2308      	moveq	r3, #8
 800491c:	2100      	movs	r1, #0
 800491e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004922:	6866      	ldr	r6, [r4, #4]
 8004924:	60a6      	str	r6, [r4, #8]
 8004926:	2e00      	cmp	r6, #0
 8004928:	bfa2      	ittt	ge
 800492a:	6821      	ldrge	r1, [r4, #0]
 800492c:	f021 0104 	bicge.w	r1, r1, #4
 8004930:	6021      	strge	r1, [r4, #0]
 8004932:	b90d      	cbnz	r5, 8004938 <_printf_i+0x110>
 8004934:	2e00      	cmp	r6, #0
 8004936:	d04b      	beq.n	80049d0 <_printf_i+0x1a8>
 8004938:	4616      	mov	r6, r2
 800493a:	fbb5 f1f3 	udiv	r1, r5, r3
 800493e:	fb03 5711 	mls	r7, r3, r1, r5
 8004942:	5dc7      	ldrb	r7, [r0, r7]
 8004944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004948:	462f      	mov	r7, r5
 800494a:	42bb      	cmp	r3, r7
 800494c:	460d      	mov	r5, r1
 800494e:	d9f4      	bls.n	800493a <_printf_i+0x112>
 8004950:	2b08      	cmp	r3, #8
 8004952:	d10b      	bne.n	800496c <_printf_i+0x144>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	07df      	lsls	r7, r3, #31
 8004958:	d508      	bpl.n	800496c <_printf_i+0x144>
 800495a:	6923      	ldr	r3, [r4, #16]
 800495c:	6861      	ldr	r1, [r4, #4]
 800495e:	4299      	cmp	r1, r3
 8004960:	bfde      	ittt	le
 8004962:	2330      	movle	r3, #48	@ 0x30
 8004964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004968:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800496c:	1b92      	subs	r2, r2, r6
 800496e:	6122      	str	r2, [r4, #16]
 8004970:	f8cd a000 	str.w	sl, [sp]
 8004974:	464b      	mov	r3, r9
 8004976:	aa03      	add	r2, sp, #12
 8004978:	4621      	mov	r1, r4
 800497a:	4640      	mov	r0, r8
 800497c:	f7ff fee6 	bl	800474c <_printf_common>
 8004980:	3001      	adds	r0, #1
 8004982:	d14a      	bne.n	8004a1a <_printf_i+0x1f2>
 8004984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004988:	b004      	add	sp, #16
 800498a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	f043 0320 	orr.w	r3, r3, #32
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	4833      	ldr	r0, [pc, #204]	@ (8004a64 <_printf_i+0x23c>)
 8004998:	2778      	movs	r7, #120	@ 0x78
 800499a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	6831      	ldr	r1, [r6, #0]
 80049a2:	061f      	lsls	r7, r3, #24
 80049a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80049a8:	d402      	bmi.n	80049b0 <_printf_i+0x188>
 80049aa:	065f      	lsls	r7, r3, #25
 80049ac:	bf48      	it	mi
 80049ae:	b2ad      	uxthmi	r5, r5
 80049b0:	6031      	str	r1, [r6, #0]
 80049b2:	07d9      	lsls	r1, r3, #31
 80049b4:	bf44      	itt	mi
 80049b6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ba:	6023      	strmi	r3, [r4, #0]
 80049bc:	b11d      	cbz	r5, 80049c6 <_printf_i+0x19e>
 80049be:	2310      	movs	r3, #16
 80049c0:	e7ac      	b.n	800491c <_printf_i+0xf4>
 80049c2:	4827      	ldr	r0, [pc, #156]	@ (8004a60 <_printf_i+0x238>)
 80049c4:	e7e9      	b.n	800499a <_printf_i+0x172>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f023 0320 	bic.w	r3, r3, #32
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	e7f6      	b.n	80049be <_printf_i+0x196>
 80049d0:	4616      	mov	r6, r2
 80049d2:	e7bd      	b.n	8004950 <_printf_i+0x128>
 80049d4:	6833      	ldr	r3, [r6, #0]
 80049d6:	6825      	ldr	r5, [r4, #0]
 80049d8:	6961      	ldr	r1, [r4, #20]
 80049da:	1d18      	adds	r0, r3, #4
 80049dc:	6030      	str	r0, [r6, #0]
 80049de:	062e      	lsls	r6, r5, #24
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	d501      	bpl.n	80049e8 <_printf_i+0x1c0>
 80049e4:	6019      	str	r1, [r3, #0]
 80049e6:	e002      	b.n	80049ee <_printf_i+0x1c6>
 80049e8:	0668      	lsls	r0, r5, #25
 80049ea:	d5fb      	bpl.n	80049e4 <_printf_i+0x1bc>
 80049ec:	8019      	strh	r1, [r3, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	4616      	mov	r6, r2
 80049f4:	e7bc      	b.n	8004970 <_printf_i+0x148>
 80049f6:	6833      	ldr	r3, [r6, #0]
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	6032      	str	r2, [r6, #0]
 80049fc:	681e      	ldr	r6, [r3, #0]
 80049fe:	6862      	ldr	r2, [r4, #4]
 8004a00:	2100      	movs	r1, #0
 8004a02:	4630      	mov	r0, r6
 8004a04:	f7fb fbec 	bl	80001e0 <memchr>
 8004a08:	b108      	cbz	r0, 8004a0e <_printf_i+0x1e6>
 8004a0a:	1b80      	subs	r0, r0, r6
 8004a0c:	6060      	str	r0, [r4, #4]
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	2300      	movs	r3, #0
 8004a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a18:	e7aa      	b.n	8004970 <_printf_i+0x148>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4640      	mov	r0, r8
 8004a22:	47d0      	blx	sl
 8004a24:	3001      	adds	r0, #1
 8004a26:	d0ad      	beq.n	8004984 <_printf_i+0x15c>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	079b      	lsls	r3, r3, #30
 8004a2c:	d413      	bmi.n	8004a56 <_printf_i+0x22e>
 8004a2e:	68e0      	ldr	r0, [r4, #12]
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	4298      	cmp	r0, r3
 8004a34:	bfb8      	it	lt
 8004a36:	4618      	movlt	r0, r3
 8004a38:	e7a6      	b.n	8004988 <_printf_i+0x160>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	4649      	mov	r1, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	47d0      	blx	sl
 8004a44:	3001      	adds	r0, #1
 8004a46:	d09d      	beq.n	8004984 <_printf_i+0x15c>
 8004a48:	3501      	adds	r5, #1
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	9903      	ldr	r1, [sp, #12]
 8004a4e:	1a5b      	subs	r3, r3, r1
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dcf2      	bgt.n	8004a3a <_printf_i+0x212>
 8004a54:	e7eb      	b.n	8004a2e <_printf_i+0x206>
 8004a56:	2500      	movs	r5, #0
 8004a58:	f104 0619 	add.w	r6, r4, #25
 8004a5c:	e7f5      	b.n	8004a4a <_printf_i+0x222>
 8004a5e:	bf00      	nop
 8004a60:	08005021 	.word	0x08005021
 8004a64:	08005032 	.word	0x08005032

08004a68 <__sflush_r>:
 8004a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a70:	0716      	lsls	r6, r2, #28
 8004a72:	4605      	mov	r5, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	d454      	bmi.n	8004b22 <__sflush_r+0xba>
 8004a78:	684b      	ldr	r3, [r1, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dc02      	bgt.n	8004a84 <__sflush_r+0x1c>
 8004a7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	dd48      	ble.n	8004b16 <__sflush_r+0xae>
 8004a84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d045      	beq.n	8004b16 <__sflush_r+0xae>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a90:	682f      	ldr	r7, [r5, #0]
 8004a92:	6a21      	ldr	r1, [r4, #32]
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	d030      	beq.n	8004afa <__sflush_r+0x92>
 8004a98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a9a:	89a3      	ldrh	r3, [r4, #12]
 8004a9c:	0759      	lsls	r1, r3, #29
 8004a9e:	d505      	bpl.n	8004aac <__sflush_r+0x44>
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004aa6:	b10b      	cbz	r3, 8004aac <__sflush_r+0x44>
 8004aa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004aaa:	1ad2      	subs	r2, r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ab0:	6a21      	ldr	r1, [r4, #32]
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	d106      	bne.n	8004aca <__sflush_r+0x62>
 8004abc:	6829      	ldr	r1, [r5, #0]
 8004abe:	291d      	cmp	r1, #29
 8004ac0:	d82b      	bhi.n	8004b1a <__sflush_r+0xb2>
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <__sflush_r+0x104>)
 8004ac4:	410a      	asrs	r2, r1
 8004ac6:	07d6      	lsls	r6, r2, #31
 8004ac8:	d427      	bmi.n	8004b1a <__sflush_r+0xb2>
 8004aca:	2200      	movs	r2, #0
 8004acc:	6062      	str	r2, [r4, #4]
 8004ace:	04d9      	lsls	r1, r3, #19
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	d504      	bpl.n	8004ae0 <__sflush_r+0x78>
 8004ad6:	1c42      	adds	r2, r0, #1
 8004ad8:	d101      	bne.n	8004ade <__sflush_r+0x76>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	b903      	cbnz	r3, 8004ae0 <__sflush_r+0x78>
 8004ade:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ae2:	602f      	str	r7, [r5, #0]
 8004ae4:	b1b9      	cbz	r1, 8004b16 <__sflush_r+0xae>
 8004ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aea:	4299      	cmp	r1, r3
 8004aec:	d002      	beq.n	8004af4 <__sflush_r+0x8c>
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 fa24 	bl	8004f3c <_free_r>
 8004af4:	2300      	movs	r3, #0
 8004af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004af8:	e00d      	b.n	8004b16 <__sflush_r+0xae>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b0      	blx	r6
 8004b00:	4602      	mov	r2, r0
 8004b02:	1c50      	adds	r0, r2, #1
 8004b04:	d1c9      	bne.n	8004a9a <__sflush_r+0x32>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0c6      	beq.n	8004a9a <__sflush_r+0x32>
 8004b0c:	2b1d      	cmp	r3, #29
 8004b0e:	d001      	beq.n	8004b14 <__sflush_r+0xac>
 8004b10:	2b16      	cmp	r3, #22
 8004b12:	d11e      	bne.n	8004b52 <__sflush_r+0xea>
 8004b14:	602f      	str	r7, [r5, #0]
 8004b16:	2000      	movs	r0, #0
 8004b18:	e022      	b.n	8004b60 <__sflush_r+0xf8>
 8004b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b1e:	b21b      	sxth	r3, r3
 8004b20:	e01b      	b.n	8004b5a <__sflush_r+0xf2>
 8004b22:	690f      	ldr	r7, [r1, #16]
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	d0f6      	beq.n	8004b16 <__sflush_r+0xae>
 8004b28:	0793      	lsls	r3, r2, #30
 8004b2a:	680e      	ldr	r6, [r1, #0]
 8004b2c:	bf08      	it	eq
 8004b2e:	694b      	ldreq	r3, [r1, #20]
 8004b30:	600f      	str	r7, [r1, #0]
 8004b32:	bf18      	it	ne
 8004b34:	2300      	movne	r3, #0
 8004b36:	eba6 0807 	sub.w	r8, r6, r7
 8004b3a:	608b      	str	r3, [r1, #8]
 8004b3c:	f1b8 0f00 	cmp.w	r8, #0
 8004b40:	dde9      	ble.n	8004b16 <__sflush_r+0xae>
 8004b42:	6a21      	ldr	r1, [r4, #32]
 8004b44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b46:	4643      	mov	r3, r8
 8004b48:	463a      	mov	r2, r7
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b0      	blx	r6
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	dc08      	bgt.n	8004b64 <__sflush_r+0xfc>
 8004b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b64:	4407      	add	r7, r0
 8004b66:	eba8 0800 	sub.w	r8, r8, r0
 8004b6a:	e7e7      	b.n	8004b3c <__sflush_r+0xd4>
 8004b6c:	dfbffffe 	.word	0xdfbffffe

08004b70 <_fflush_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	690b      	ldr	r3, [r1, #16]
 8004b74:	4605      	mov	r5, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	b913      	cbnz	r3, 8004b80 <_fflush_r+0x10>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	b118      	cbz	r0, 8004b8a <_fflush_r+0x1a>
 8004b82:	6a03      	ldr	r3, [r0, #32]
 8004b84:	b90b      	cbnz	r3, 8004b8a <_fflush_r+0x1a>
 8004b86:	f7ff fb81 	bl	800428c <__sinit>
 8004b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f3      	beq.n	8004b7a <_fflush_r+0xa>
 8004b92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b94:	07d0      	lsls	r0, r2, #31
 8004b96:	d404      	bmi.n	8004ba2 <_fflush_r+0x32>
 8004b98:	0599      	lsls	r1, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_fflush_r+0x32>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b9e:	f7ff fbf0 	bl	8004382 <__retarget_lock_acquire_recursive>
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	f7ff ff5f 	bl	8004a68 <__sflush_r>
 8004baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bac:	07da      	lsls	r2, r3, #31
 8004bae:	4605      	mov	r5, r0
 8004bb0:	d4e4      	bmi.n	8004b7c <_fflush_r+0xc>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	059b      	lsls	r3, r3, #22
 8004bb6:	d4e1      	bmi.n	8004b7c <_fflush_r+0xc>
 8004bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bba:	f7ff fbe3 	bl	8004384 <__retarget_lock_release_recursive>
 8004bbe:	e7dd      	b.n	8004b7c <_fflush_r+0xc>

08004bc0 <__malloc_lock>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	@ (8004bc8 <__malloc_lock+0x8>)
 8004bc2:	f7ff bbde 	b.w	8004382 <__retarget_lock_acquire_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20000854 	.word	0x20000854

08004bcc <__malloc_unlock>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	@ (8004bd4 <__malloc_unlock+0x8>)
 8004bce:	f7ff bbd9 	b.w	8004384 <__retarget_lock_release_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	20000854 	.word	0x20000854

08004bd8 <__sread>:
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	460c      	mov	r4, r1
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f978 	bl	8004ed4 <_read_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	bfab      	itete	ge
 8004be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bea:	89a3      	ldrhlt	r3, [r4, #12]
 8004bec:	181b      	addge	r3, r3, r0
 8004bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bf2:	bfac      	ite	ge
 8004bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bf6:	81a3      	strhlt	r3, [r4, #12]
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <__swrite>:
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	461f      	mov	r7, r3
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	05db      	lsls	r3, r3, #23
 8004c04:	4605      	mov	r5, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	4616      	mov	r6, r2
 8004c0a:	d505      	bpl.n	8004c18 <__swrite+0x1e>
 8004c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c10:	2302      	movs	r3, #2
 8004c12:	2200      	movs	r2, #0
 8004c14:	f000 f94c 	bl	8004eb0 <_lseek_r>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	4632      	mov	r2, r6
 8004c26:	463b      	mov	r3, r7
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	f000 b973 	b.w	8004f18 <_write_r>

08004c32 <__sseek>:
 8004c32:	b510      	push	{r4, lr}
 8004c34:	460c      	mov	r4, r1
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 f939 	bl	8004eb0 <_lseek_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	bf15      	itete	ne
 8004c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c4e:	81a3      	strheq	r3, [r4, #12]
 8004c50:	bf18      	it	ne
 8004c52:	81a3      	strhne	r3, [r4, #12]
 8004c54:	bd10      	pop	{r4, pc}

08004c56 <__sclose>:
 8004c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5a:	f000 b8f7 	b.w	8004e4c <_close_r>

08004c5e <__swbuf_r>:
 8004c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c60:	460e      	mov	r6, r1
 8004c62:	4614      	mov	r4, r2
 8004c64:	4605      	mov	r5, r0
 8004c66:	b118      	cbz	r0, 8004c70 <__swbuf_r+0x12>
 8004c68:	6a03      	ldr	r3, [r0, #32]
 8004c6a:	b90b      	cbnz	r3, 8004c70 <__swbuf_r+0x12>
 8004c6c:	f7ff fb0e 	bl	800428c <__sinit>
 8004c70:	69a3      	ldr	r3, [r4, #24]
 8004c72:	60a3      	str	r3, [r4, #8]
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	071a      	lsls	r2, r3, #28
 8004c78:	d501      	bpl.n	8004c7e <__swbuf_r+0x20>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	b943      	cbnz	r3, 8004c90 <__swbuf_r+0x32>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f82b 	bl	8004cdc <__swsetup_r>
 8004c86:	b118      	cbz	r0, 8004c90 <__swbuf_r+0x32>
 8004c88:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	6922      	ldr	r2, [r4, #16]
 8004c94:	1a98      	subs	r0, r3, r2
 8004c96:	6963      	ldr	r3, [r4, #20]
 8004c98:	b2f6      	uxtb	r6, r6
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	4637      	mov	r7, r6
 8004c9e:	dc05      	bgt.n	8004cac <__swbuf_r+0x4e>
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f7ff ff64 	bl	8004b70 <_fflush_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d1ed      	bne.n	8004c88 <__swbuf_r+0x2a>
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	60a3      	str	r3, [r4, #8]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	6022      	str	r2, [r4, #0]
 8004cb8:	701e      	strb	r6, [r3, #0]
 8004cba:	6962      	ldr	r2, [r4, #20]
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d004      	beq.n	8004ccc <__swbuf_r+0x6e>
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	07db      	lsls	r3, r3, #31
 8004cc6:	d5e1      	bpl.n	8004c8c <__swbuf_r+0x2e>
 8004cc8:	2e0a      	cmp	r6, #10
 8004cca:	d1df      	bne.n	8004c8c <__swbuf_r+0x2e>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f7ff ff4e 	bl	8004b70 <_fflush_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d0d9      	beq.n	8004c8c <__swbuf_r+0x2e>
 8004cd8:	e7d6      	b.n	8004c88 <__swbuf_r+0x2a>
	...

08004cdc <__swsetup_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <__swsetup_r+0xa8>)
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b118      	cbz	r0, 8004cf0 <__swsetup_r+0x14>
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	b90b      	cbnz	r3, 8004cf0 <__swsetup_r+0x14>
 8004cec:	f7ff face 	bl	800428c <__sinit>
 8004cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cf4:	0719      	lsls	r1, r3, #28
 8004cf6:	d422      	bmi.n	8004d3e <__swsetup_r+0x62>
 8004cf8:	06da      	lsls	r2, r3, #27
 8004cfa:	d407      	bmi.n	8004d0c <__swsetup_r+0x30>
 8004cfc:	2209      	movs	r2, #9
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d0a:	e033      	b.n	8004d74 <__swsetup_r+0x98>
 8004d0c:	0758      	lsls	r0, r3, #29
 8004d0e:	d512      	bpl.n	8004d36 <__swsetup_r+0x5a>
 8004d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d12:	b141      	cbz	r1, 8004d26 <__swsetup_r+0x4a>
 8004d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	d002      	beq.n	8004d22 <__swsetup_r+0x46>
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 f90d 	bl	8004f3c <_free_r>
 8004d22:	2300      	movs	r3, #0
 8004d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	f043 0308 	orr.w	r3, r3, #8
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	b94b      	cbnz	r3, 8004d56 <__swsetup_r+0x7a>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d4c:	d003      	beq.n	8004d56 <__swsetup_r+0x7a>
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 f83f 	bl	8004dd4 <__smakebuf_r>
 8004d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5a:	f013 0201 	ands.w	r2, r3, #1
 8004d5e:	d00a      	beq.n	8004d76 <__swsetup_r+0x9a>
 8004d60:	2200      	movs	r2, #0
 8004d62:	60a2      	str	r2, [r4, #8]
 8004d64:	6962      	ldr	r2, [r4, #20]
 8004d66:	4252      	negs	r2, r2
 8004d68:	61a2      	str	r2, [r4, #24]
 8004d6a:	6922      	ldr	r2, [r4, #16]
 8004d6c:	b942      	cbnz	r2, 8004d80 <__swsetup_r+0xa4>
 8004d6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d72:	d1c5      	bne.n	8004d00 <__swsetup_r+0x24>
 8004d74:	bd38      	pop	{r3, r4, r5, pc}
 8004d76:	0799      	lsls	r1, r3, #30
 8004d78:	bf58      	it	pl
 8004d7a:	6962      	ldrpl	r2, [r4, #20]
 8004d7c:	60a2      	str	r2, [r4, #8]
 8004d7e:	e7f4      	b.n	8004d6a <__swsetup_r+0x8e>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e7f7      	b.n	8004d74 <__swsetup_r+0x98>
 8004d84:	20000028 	.word	0x20000028

08004d88 <__swhatbuf_r>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	2900      	cmp	r1, #0
 8004d92:	b096      	sub	sp, #88	@ 0x58
 8004d94:	4615      	mov	r5, r2
 8004d96:	461e      	mov	r6, r3
 8004d98:	da0d      	bge.n	8004db6 <__swhatbuf_r+0x2e>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2340      	movne	r3, #64	@ 0x40
 8004da8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004dac:	2000      	movs	r0, #0
 8004dae:	6031      	str	r1, [r6, #0]
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	b016      	add	sp, #88	@ 0x58
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	466a      	mov	r2, sp
 8004db8:	f000 f858 	bl	8004e6c <_fstat_r>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	dbec      	blt.n	8004d9a <__swhatbuf_r+0x12>
 8004dc0:	9901      	ldr	r1, [sp, #4]
 8004dc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004dc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004dca:	4259      	negs	r1, r3
 8004dcc:	4159      	adcs	r1, r3
 8004dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dd2:	e7eb      	b.n	8004dac <__swhatbuf_r+0x24>

08004dd4 <__smakebuf_r>:
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd8:	079d      	lsls	r5, r3, #30
 8004dda:	4606      	mov	r6, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	d507      	bpl.n	8004df0 <__smakebuf_r+0x1c>
 8004de0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	6123      	str	r3, [r4, #16]
 8004de8:	2301      	movs	r3, #1
 8004dea:	6163      	str	r3, [r4, #20]
 8004dec:	b003      	add	sp, #12
 8004dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df0:	ab01      	add	r3, sp, #4
 8004df2:	466a      	mov	r2, sp
 8004df4:	f7ff ffc8 	bl	8004d88 <__swhatbuf_r>
 8004df8:	9f00      	ldr	r7, [sp, #0]
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff fc24 	bl	800464c <_malloc_r>
 8004e04:	b948      	cbnz	r0, 8004e1a <__smakebuf_r+0x46>
 8004e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0a:	059a      	lsls	r2, r3, #22
 8004e0c:	d4ee      	bmi.n	8004dec <__smakebuf_r+0x18>
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	f043 0302 	orr.w	r3, r3, #2
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	e7e2      	b.n	8004de0 <__smakebuf_r+0xc>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	6020      	str	r0, [r4, #0]
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e2a:	b15b      	cbz	r3, 8004e44 <__smakebuf_r+0x70>
 8004e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f82d 	bl	8004e90 <_isatty_r>
 8004e36:	b128      	cbz	r0, 8004e44 <__smakebuf_r+0x70>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	431d      	orrs	r5, r3
 8004e48:	81a5      	strh	r5, [r4, #12]
 8004e4a:	e7cf      	b.n	8004dec <__smakebuf_r+0x18>

08004e4c <_close_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d06      	ldr	r5, [pc, #24]	@ (8004e68 <_close_r+0x1c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc ff71 	bl	8001d3e <_close>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_close_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_close_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000860 	.word	0x20000860

08004e6c <_fstat_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4d07      	ldr	r5, [pc, #28]	@ (8004e8c <_fstat_r+0x20>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	4604      	mov	r4, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	f7fc ff6c 	bl	8001d56 <_fstat>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d102      	bne.n	8004e88 <_fstat_r+0x1c>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	b103      	cbz	r3, 8004e88 <_fstat_r+0x1c>
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000860 	.word	0x20000860

08004e90 <_isatty_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d06      	ldr	r5, [pc, #24]	@ (8004eac <_isatty_r+0x1c>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fc ff6b 	bl	8001d76 <_isatty>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_isatty_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_isatty_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	20000860 	.word	0x20000860

08004eb0 <_lseek_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d07      	ldr	r5, [pc, #28]	@ (8004ed0 <_lseek_r+0x20>)
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	4611      	mov	r1, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	602a      	str	r2, [r5, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7fc ff64 	bl	8001d8c <_lseek>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_lseek_r+0x1e>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_lseek_r+0x1e>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20000860 	.word	0x20000860

08004ed4 <_read_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	@ (8004ef4 <_read_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fc fef2 	bl	8001ccc <_read>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_read_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_read_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000860 	.word	0x20000860

08004ef8 <_sbrk_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d06      	ldr	r5, [pc, #24]	@ (8004f14 <_sbrk_r+0x1c>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	f7fc ff50 	bl	8001da8 <_sbrk>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_sbrk_r+0x1a>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_sbrk_r+0x1a>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000860 	.word	0x20000860

08004f18 <_write_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d07      	ldr	r5, [pc, #28]	@ (8004f38 <_write_r+0x20>)
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	4608      	mov	r0, r1
 8004f20:	4611      	mov	r1, r2
 8004f22:	2200      	movs	r2, #0
 8004f24:	602a      	str	r2, [r5, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f7fc feed 	bl	8001d06 <_write>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_write_r+0x1e>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_write_r+0x1e>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000860 	.word	0x20000860

08004f3c <_free_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4605      	mov	r5, r0
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d041      	beq.n	8004fc8 <_free_r+0x8c>
 8004f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f48:	1f0c      	subs	r4, r1, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfb8      	it	lt
 8004f4e:	18e4      	addlt	r4, r4, r3
 8004f50:	f7ff fe36 	bl	8004bc0 <__malloc_lock>
 8004f54:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <_free_r+0x90>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	b933      	cbnz	r3, 8004f68 <_free_r+0x2c>
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6014      	str	r4, [r2, #0]
 8004f5e:	4628      	mov	r0, r5
 8004f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f64:	f7ff be32 	b.w	8004bcc <__malloc_unlock>
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d908      	bls.n	8004f7e <_free_r+0x42>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf01      	itttt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	1809      	addeq	r1, r1, r0
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	e7ed      	b.n	8004f5a <_free_r+0x1e>
 8004f7e:	461a      	mov	r2, r3
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b10b      	cbz	r3, 8004f88 <_free_r+0x4c>
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d9fa      	bls.n	8004f7e <_free_r+0x42>
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	1850      	adds	r0, r2, r1
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d10b      	bne.n	8004fa8 <_free_r+0x6c>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	4401      	add	r1, r0
 8004f94:	1850      	adds	r0, r2, r1
 8004f96:	4283      	cmp	r3, r0
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	d1e0      	bne.n	8004f5e <_free_r+0x22>
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	6053      	str	r3, [r2, #4]
 8004fa2:	4408      	add	r0, r1
 8004fa4:	6010      	str	r0, [r2, #0]
 8004fa6:	e7da      	b.n	8004f5e <_free_r+0x22>
 8004fa8:	d902      	bls.n	8004fb0 <_free_r+0x74>
 8004faa:	230c      	movs	r3, #12
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	e7d6      	b.n	8004f5e <_free_r+0x22>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	1821      	adds	r1, r4, r0
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	bf04      	itt	eq
 8004fb8:	6819      	ldreq	r1, [r3, #0]
 8004fba:	685b      	ldreq	r3, [r3, #4]
 8004fbc:	6063      	str	r3, [r4, #4]
 8004fbe:	bf04      	itt	eq
 8004fc0:	1809      	addeq	r1, r1, r0
 8004fc2:	6021      	streq	r1, [r4, #0]
 8004fc4:	6054      	str	r4, [r2, #4]
 8004fc6:	e7ca      	b.n	8004f5e <_free_r+0x22>
 8004fc8:	bd38      	pop	{r3, r4, r5, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000085c 	.word	0x2000085c

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
