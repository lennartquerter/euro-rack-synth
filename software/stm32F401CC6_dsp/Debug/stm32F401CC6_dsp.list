
stm32F401CC6_dsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002740  08002740  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002740  08002740  00003740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002748  08002748  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800274c  0800274c  0000374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002750  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  0800275c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800275c  00004128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008671  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ca  00000000  00000000  0000c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066c  00000000  00000000  0000e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ccf  00000000  00000000  0000ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af7a  00000000  00000000  00024a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0c2  00000000  00000000  0002f985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bca47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002218  00000000  00000000  000bca8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000beca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002708 	.word	0x08002708

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002708 	.word	0x08002708

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fad8 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f820 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f91e 	bl	8000710 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f8fc 	bl	80006d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004d8:	f000 f87a 	bl	80005d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8ca 	bl	8000674 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e6:	4809      	ldr	r0, [pc, #36]	@ (800050c <main+0x48>)
 80004e8:	f001 fb40 	bl	8001b6c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f0:	f000 fb36 	bl	8000b60 <HAL_Delay>

	  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fa:	4804      	ldr	r0, [pc, #16]	@ (800050c <main+0x48>)
 80004fc:	f001 fb36 	bl	8001b6c <HAL_GPIO_WritePin>

	  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000504:	f000 fb2c 	bl	8000b60 <HAL_Delay>
	  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 8000508:	bf00      	nop
 800050a:	e7e9      	b.n	80004e0 <main+0x1c>
 800050c:	40020800 	.word	0x40020800

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f8c6 	bl	80026b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <SystemClock_Config+0xb8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a22      	ldr	r2, [pc, #136]	@ (80005c8 <SystemClock_Config+0xb8>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <SystemClock_Config+0xb8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <SystemClock_Config+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800055c:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <SystemClock_Config+0xbc>)
 800055e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <SystemClock_Config+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fc4f 	bl	8001e28 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000590:	f000 f910 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 feb2 	bl	8002318 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ba:	f000 f8fb 	bl	80007b4 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005fe:	2201      	movs	r2, #1
 8000600:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <MX_ADC1_Init+0xa0>)
 8000614:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x98>)
 800061e:	2201      	movs	r2, #1
 8000620:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_ADC1_Init+0x98>)
 800062c:	2201      	movs	r2, #1
 800062e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000632:	f000 fab9 	bl	8000ba8 <HAL_ADC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800063c:	f000 f8ba 	bl	80007b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000652:	f000 faed 	bl	8000c30 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800065c:	f000 f8aa 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f001 fa75 	bl	8001ba0 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f87a 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000d0 	.word	0x200000d0
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_DMA_Init+0x3c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <MX_DMA_Init+0x3c>)
 80006e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_DMA_Init+0x3c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2038      	movs	r0, #56	@ 0x38
 80006f8:	f000 fd93 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006fc:	2038      	movs	r0, #56	@ 0x38
 80006fe:	f000 fdac 	bl	800125a <HAL_NVIC_EnableIRQ>

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <MX_GPIO_Init+0x9c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <MX_GPIO_Init+0x9c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a11      	ldr	r2, [pc, #68]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 8000782:	f001 f9f3 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERNAL_LED_Pin */
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_GPIO_Init+0xa0>)
 80007a0:	f001 f860 	bl	8001864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <HAL_MspInit+0x4c>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <HAL_ADC_MspInit+0xdc>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d157      	bne.n	80008e2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <HAL_ADC_MspInit+0xe0>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <HAL_ADC_MspInit+0xe0>)
 800083c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <HAL_ADC_MspInit+0xe0>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <HAL_ADC_MspInit+0xe0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <HAL_ADC_MspInit+0xe0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_ADC_MspInit+0xe0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	481d      	ldr	r0, [pc, #116]	@ (80008f4 <HAL_ADC_MspInit+0xe4>)
 800087e:	f000 fff1 	bl	8001864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 8000884:	4a1d      	ldr	r2, [pc, #116]	@ (80008fc <HAL_ADC_MspInit+0xec>)
 8000886:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 800089c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008c8:	f000 fce2 	bl	8001290 <HAL_DMA_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80008d2:	f7ff ff6f 	bl	80007b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008da:	639a      	str	r2, [r3, #56]	@ 0x38
 80008dc:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <HAL_ADC_MspInit+0xe8>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	@ 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40012000 	.word	0x40012000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	20000070 	.word	0x20000070
 80008fc:	40026410 	.word	0x40026410

08000900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	@ (8000984 <HAL_I2C_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_I2C_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <HAL_I2C_MspInit+0x88>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_I2C_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23c0      	movs	r3, #192	@ 0xc0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094e:	2304      	movs	r3, #4
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <HAL_I2C_MspInit+0x8c>)
 800095a:	f000 ff83 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_I2C_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <HAL_I2C_MspInit+0x88>)
 8000968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_I2C_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 f89b 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <DMA2_Stream0_IRQHandler+0x10>)
 80009f6:	f000 fcf9 	bl	80013ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000070 	.word	0x20000070

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a2c:	f7ff ffea 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f001 fe33 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd33 	bl	80004c4 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	08002750 	.word	0x08002750
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	20000128 	.word	0x20000128

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 fbb1 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fe86 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fbc9 	bl	8001276 <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000afc:	f000 fb91 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	@ (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000124 	.word	0x20000124

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	@ (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000124 	.word	0x20000124

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e033      	b.n	8000c26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d109      	bne.n	8000bda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe22 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d118      	bne.n	8000c18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bee:	f023 0302 	bic.w	r3, r3, #2
 8000bf2:	f043 0202 	orr.w	r2, r3, #2
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f93a 	bl	8000e74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f023 0303 	bic.w	r3, r3, #3
 8000c0e:	f043 0201 	orr.w	r2, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c16:	e001      	b.n	8000c1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_ADC_ConfigChannel+0x1c>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e105      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x228>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	d925      	bls.n	8000ca8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68d9      	ldr	r1, [r3, #12]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	3b1e      	subs	r3, #30
 8000c72:	2207      	movs	r2, #7
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	400a      	ands	r2, r1
 8000c80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68d9      	ldr	r1, [r3, #12]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	4603      	mov	r3, r0
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4403      	add	r3, r0
 8000c9a:	3b1e      	subs	r3, #30
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	e022      	b.n	8000cee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6919      	ldr	r1, [r3, #16]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	400a      	ands	r2, r1
 8000cca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6919      	ldr	r1, [r3, #16]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	4603      	mov	r3, r0
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4403      	add	r3, r0
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d824      	bhi.n	8000d40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	3b05      	subs	r3, #5
 8000d08:	221f      	movs	r2, #31
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	400a      	ands	r2, r1
 8000d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	3b05      	subs	r3, #5
 8000d32:	fa00 f203 	lsl.w	r2, r0, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d3e:	e04c      	b.n	8000dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b0c      	cmp	r3, #12
 8000d46:	d824      	bhi.n	8000d92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3b23      	subs	r3, #35	@ 0x23
 8000d5a:	221f      	movs	r2, #31
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43da      	mvns	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	400a      	ands	r2, r1
 8000d68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	3b23      	subs	r3, #35	@ 0x23
 8000d84:	fa00 f203 	lsl.w	r2, r0, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d90:	e023      	b.n	8000dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	3b41      	subs	r3, #65	@ 0x41
 8000da4:	221f      	movs	r2, #31
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	400a      	ands	r2, r1
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b41      	subs	r3, #65	@ 0x41
 8000dce:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dda:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <HAL_ADC_ConfigChannel+0x234>)
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <HAL_ADC_ConfigChannel+0x238>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d109      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1cc>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	d105      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <HAL_ADC_ConfigChannel+0x238>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d123      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x21e>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b10      	cmp	r3, #16
 8000e0c:	d003      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x1e6>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b11      	cmp	r3, #17
 8000e14:	d11b      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d111      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_ADC_ConfigChannel+0x23c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <HAL_ADC_ConfigChannel+0x240>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9a      	lsrs	r2, r3, #18
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000e40:	e002      	b.n	8000e48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f9      	bne.n	8000e42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40012300 	.word	0x40012300
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	431bde83 	.word	0x431bde83

08000e74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e7c:	4b79      	ldr	r3, [pc, #484]	@ (8001064 <ADC_Init+0x1f0>)
 8000e7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	021a      	lsls	r2, r3, #8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6899      	ldr	r1, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f06:	4a58      	ldr	r2, [pc, #352]	@ (8001068 <ADC_Init+0x1f4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d022      	beq.n	8000f52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6899      	ldr	r1, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6899      	ldr	r1, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	e00f      	b.n	8000f72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0202 	bic.w	r2, r2, #2
 8000f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7e1b      	ldrb	r3, [r3, #24]
 8000f8c:	005a      	lsls	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d01b      	beq.n	8000fd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	035a      	lsls	r2, r3, #13
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	e007      	b.n	8000fe8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fe6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	3b01      	subs	r3, #1
 8001004:	051a      	lsls	r2, r3, #20
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800101c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6899      	ldr	r1, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800102a:	025a      	lsls	r2, r3, #9
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6899      	ldr	r1, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	029a      	lsls	r2, r3, #10
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40012300 	.word	0x40012300
 8001068:	0f000001 	.word	0x0f000001

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	@ (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fc54 	bl	8000b48 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e099      	b.n	80013e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012cc:	e00f      	b.n	80012ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ce:	f7ff fc3b 	bl	8000b48 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d908      	bls.n	80012ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2220      	movs	r2, #32
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e078      	b.n	80013e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e8      	bne.n	80012ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <HAL_DMA_Init+0x158>)
 8001308:	4013      	ands	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	2b04      	cmp	r3, #4
 8001346:	d107      	bne.n	8001358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4313      	orrs	r3, r2
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4313      	orrs	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137e:	2b04      	cmp	r3, #4
 8001380:	d117      	bne.n	80013b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00e      	beq.n	80013b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f9e9 	bl	800176c <DMA_CheckFifoParam>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2240      	movs	r2, #64	@ 0x40
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013ae:	2301      	movs	r3, #1
 80013b0:	e016      	b.n	80013e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f9a0 	bl	8001700 <DMA_CalcBaseAndBitshift>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c8:	223f      	movs	r2, #63	@ 0x3f
 80013ca:	409a      	lsls	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	f010803f 	.word	0xf010803f

080013ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001634 <HAL_DMA_IRQHandler+0x248>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a8e      	ldr	r2, [pc, #568]	@ (8001638 <HAL_DMA_IRQHandler+0x24c>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0a9b      	lsrs	r3, r3, #10
 8001404:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001416:	2208      	movs	r2, #8
 8001418:	409a      	lsls	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01a      	beq.n	8001458 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001444:	2208      	movs	r2, #8
 8001446:	409a      	lsls	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	2201      	movs	r2, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d012      	beq.n	800148e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147a:	2201      	movs	r2, #1
 800147c:	409a      	lsls	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001486:	f043 0202 	orr.w	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	2204      	movs	r2, #4
 8001494:	409a      	lsls	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d012      	beq.n	80014c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b0:	2204      	movs	r2, #4
 80014b2:	409a      	lsls	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c8:	2210      	movs	r2, #16
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d043      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03c      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e6:	2210      	movs	r2, #16
 80014e8:	409a      	lsls	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d018      	beq.n	800152e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d108      	bne.n	800151c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d024      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	4798      	blx	r3
 800151a:	e01f      	b.n	800155c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01b      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
 800152c:	e016      	b.n	800155c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0208 	bic.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001560:	2220      	movs	r2, #32
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 808f 	beq.w	800168c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8087 	beq.w	800168c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001582:	2220      	movs	r2, #32
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b05      	cmp	r3, #5
 8001594:	d136      	bne.n	8001604 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0216 	bic.w	r2, r2, #22
 80015a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d103      	bne.n	80015c6 <HAL_DMA_IRQHandler+0x1da>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0208 	bic.w	r2, r2, #8
 80015d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015da:	223f      	movs	r2, #63	@ 0x3f
 80015dc:	409a      	lsls	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d07e      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
        }
        return;
 8001602:	e079      	b.n	80016f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d01d      	beq.n	800164e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	2b00      	cmp	r3, #0
 8001626:	d031      	beq.n	800168c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e02c      	b.n	800168c <HAL_DMA_IRQHandler+0x2a0>
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000
 8001638:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
 800164c:	e01e      	b.n	800168c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10f      	bne.n	800167c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0210 	bic.w	r2, r2, #16
 800166a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001690:	2b00      	cmp	r3, #0
 8001692:	d032      	beq.n	80016fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d022      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2205      	movs	r2, #5
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d307      	bcc.n	80016d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f2      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x2cc>
 80016d2:	e000      	b.n	80016d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
 80016f6:	e000      	b.n	80016fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80016f8:	bf00      	nop
    }
  }
}
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3b10      	subs	r3, #16
 8001710:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <DMA_CalcBaseAndBitshift+0x64>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171a:	4a13      	ldr	r2, [pc, #76]	@ (8001768 <DMA_CalcBaseAndBitshift+0x68>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d909      	bls.n	8001742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001740:	e007      	b.n	8001752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	08002738 	.word	0x08002738

0800176c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11f      	bne.n	80017c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d856      	bhi.n	800183a <DMA_CheckFifoParam+0xce>
 800178c:	a201      	add	r2, pc, #4	@ (adr r2, 8001794 <DMA_CheckFifoParam+0x28>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b7 	.word	0x080017b7
 800179c:	080017a5 	.word	0x080017a5
 80017a0:	0800183b 	.word	0x0800183b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d046      	beq.n	800183e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b4:	e043      	b.n	800183e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017be:	d140      	bne.n	8001842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c4:	e03d      	b.n	8001842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017ce:	d121      	bne.n	8001814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d837      	bhi.n	8001846 <DMA_CheckFifoParam+0xda>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <DMA_CheckFifoParam+0x70>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f3 	.word	0x080017f3
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001805 	.word	0x08001805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      break;
 80017f0:	e030      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d025      	beq.n	800184a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001802:	e022      	b.n	800184a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800180c:	d11f      	bne.n	800184e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001812:	e01c      	b.n	800184e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d903      	bls.n	8001822 <DMA_CheckFifoParam+0xb6>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d003      	beq.n	8001828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001820:	e018      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      break;
 8001826:	e015      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00e      	beq.n	8001852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      break;
 8001838:	e00b      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 800183a:	bf00      	nop
 800183c:	e00a      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
 8001840:	e008      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e006      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e004      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e002      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;   
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
    }
  } 
  
  return status; 
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e159      	b.n	8001b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8148 	bne.w	8001b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a2 	beq.w	8001b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b57      	ldr	r3, [pc, #348]	@ (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fa:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <HAL_GPIO_Init+0x2e8>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a52      	ldr	r2, [pc, #328]	@ (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_Init+0x202>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a48      	ldr	r2, [pc, #288]	@ (8001b58 <HAL_GPIO_Init+0x2f4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x1fe>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a47      	ldr	r2, [pc, #284]	@ (8001b5c <HAL_GPIO_Init+0x2f8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x1fa>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a46      	ldr	r2, [pc, #280]	@ (8001b60 <HAL_GPIO_Init+0x2fc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x1f6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a45      	ldr	r2, [pc, #276]	@ (8001b64 <HAL_GPIO_Init+0x300>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x1f2>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a56:	2307      	movs	r3, #7
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x204>
 8001a66:	2300      	movs	r3, #0
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a78:	4935      	ldr	r1, [pc, #212]	@ (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a24      	ldr	r2, [pc, #144]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ada:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afe:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b04:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b28:	4a0f      	ldr	r2, [pc, #60]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	f67f aea2 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e12b      	b.n	8001e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fe9a 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	@ 0x24
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c04:	f000 fd40 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4a81      	ldr	r2, [pc, #516]	@ (8001e14 <HAL_I2C_Init+0x274>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d807      	bhi.n	8001c24 <HAL_I2C_Init+0x84>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a80      	ldr	r2, [pc, #512]	@ (8001e18 <HAL_I2C_Init+0x278>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e006      	b.n	8001c32 <HAL_I2C_Init+0x92>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a7d      	ldr	r2, [pc, #500]	@ (8001e1c <HAL_I2C_Init+0x27c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0e7      	b.n	8001e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4a78      	ldr	r2, [pc, #480]	@ (8001e20 <HAL_I2C_Init+0x280>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9b      	lsrs	r3, r3, #18
 8001c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	@ (8001e14 <HAL_I2C_Init+0x274>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d802      	bhi.n	8001c74 <HAL_I2C_Init+0xd4>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	e009      	b.n	8001c88 <HAL_I2C_Init+0xe8>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a69      	ldr	r2, [pc, #420]	@ (8001e24 <HAL_I2C_Init+0x284>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	3301      	adds	r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	495c      	ldr	r1, [pc, #368]	@ (8001e14 <HAL_I2C_Init+0x274>)
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	d819      	bhi.n	8001cdc <HAL_I2C_Init+0x13c>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e59      	subs	r1, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_I2C_Init+0x138>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e59      	subs	r1, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	e051      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e04f      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d111      	bne.n	8001d08 <HAL_I2C_Init+0x168>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e012      	b.n	8001d2e <HAL_I2C_Init+0x18e>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	0099      	lsls	r1, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Init+0x196>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e022      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10e      	bne.n	8001d5c <HAL_I2C_Init+0x1bc>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1e58      	subs	r0, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6859      	ldr	r1, [r3, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	440b      	add	r3, r1
 8001d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d5a:	e00f      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	0099      	lsls	r1, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	6809      	ldr	r1, [r1, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001daa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6911      	ldr	r1, [r2, #16]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68d2      	ldr	r2, [r2, #12]
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	000186a0 	.word	0x000186a0
 8001e18:	001e847f 	.word	0x001e847f
 8001e1c:	003d08ff 	.word	0x003d08ff
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	10624dd3 	.word	0x10624dd3

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e267      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e46:	4b88      	ldr	r3, [pc, #544]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d00c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b85      	ldr	r3, [pc, #532]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d112      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5e:	4b82      	ldr	r3, [pc, #520]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d05b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d157      	bne.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e242      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCC_OscConfig+0x74>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a75      	ldr	r2, [pc, #468]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b70      	ldr	r3, [pc, #448]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6f      	ldr	r2, [pc, #444]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6c      	ldr	r2, [pc, #432]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001ec0:	4b69      	ldr	r3, [pc, #420]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a65      	ldr	r2, [pc, #404]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe32 	bl	8000b48 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fe2e 	bl	8000b48 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	@ 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e207      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b5b      	ldr	r3, [pc, #364]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fe1e 	bl	8000b48 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fe1a 	bl	8000b48 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1f3      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b51      	ldr	r3, [pc, #324]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b47      	ldr	r3, [pc, #284]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b41      	ldr	r3, [pc, #260]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1c7      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4937      	ldr	r1, [pc, #220]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e03a      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	@ (800206c <HAL_RCC_OscConfig+0x244>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fdd3 	bl	8000b48 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7fe fdcf 	bl	8000b48 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1a8      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4925      	ldr	r1, [pc, #148]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b24      	ldr	r3, [pc, #144]	@ (800206c <HAL_RCC_OscConfig+0x244>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fdb2 	bl	8000b48 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fdae 	bl	8000b48 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e187      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d036      	beq.n	8002080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_RCC_OscConfig+0x248>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe fd92 	bl	8000b48 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe fd8e 	bl	8000b48 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e167      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_OscConfig+0x240>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x200>
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_RCC_OscConfig+0x248>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204e:	f7fe fd7b 	bl	8000b48 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	e00e      	b.n	8002074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe fd77 	bl	8000b48 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d907      	bls.n	8002074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e150      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
 8002070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ea      	bne.n	8002056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8097 	beq.w	80021bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b81      	ldr	r3, [pc, #516]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b77      	ldr	r3, [pc, #476]	@ (800229c <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b74      	ldr	r3, [pc, #464]	@ (800229c <HAL_RCC_OscConfig+0x474>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a73      	ldr	r2, [pc, #460]	@ (800229c <HAL_RCC_OscConfig+0x474>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe fd37 	bl	8000b48 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe fd33 	bl	8000b48 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e10c      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <HAL_RCC_OscConfig+0x474>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x2ea>
 8002104:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002108:	4a63      	ldr	r2, [pc, #396]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x324>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x30c>
 800211a:	4b5f      	ldr	r3, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	4a5e      	ldr	r2, [pc, #376]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	@ 0x70
 8002126:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	4a5b      	ldr	r2, [pc, #364]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	@ 0x70
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0x324>
 8002134:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	4a57      	ldr	r2, [pc, #348]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002140:	4b55      	ldr	r3, [pc, #340]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002144:	4a54      	ldr	r2, [pc, #336]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fcf8 	bl	8000b48 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe fcf4 	bl	8000b48 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0cb      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	4b49      	ldr	r3, [pc, #292]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ee      	beq.n	800215c <HAL_RCC_OscConfig+0x334>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe fce2 	bl	8000b48 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe fcde 	bl	8000b48 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0b5      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ee      	bne.n	8002188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	4a38      	ldr	r2, [pc, #224]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a1 	beq.w	8002308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d05c      	beq.n	800228c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d141      	bne.n	800225e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_RCC_OscConfig+0x478>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fcb2 	bl	8000b48 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fcae 	bl	8000b48 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e087      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	491b      	ldr	r1, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x478>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fc87 	bl	8000b48 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe fc83 	bl	8000b48 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e05c      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x416>
 800225c:	e054      	b.n	8002308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <HAL_RCC_OscConfig+0x478>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fc70 	bl	8000b48 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fc6c 	bl	8000b48 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e045      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_RCC_OscConfig+0x470>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x444>
 800228a:	e03d      	b.n	8002308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e038      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_RCC_OscConfig+0x4ec>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d028      	beq.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d121      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11a      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	4293      	cmp	r3, r2
 80022de:	d111      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cc      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b68      	ldr	r3, [pc, #416]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d90c      	bls.n	8002354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b65      	ldr	r3, [pc, #404]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d044      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3f      	ldr	r3, [pc, #252]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3b      	ldr	r3, [pc, #236]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e067      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4934      	ldr	r1, [pc, #208]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fb9e 	bl	8000b48 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fb9a 	bl	8000b48 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e04f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490a      	ldr	r1, [pc, #40]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fafe 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08002720 	.word	0x08002720
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b090      	sub	sp, #64	@ 0x40
 80024ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80024f0:	2300      	movs	r3, #0
 80024f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fc:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d00d      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x40>
 8002508:	2b08      	cmp	r3, #8
 800250a:	f200 80a1 	bhi.w	8002650 <HAL_RCC_GetSysClockFreq+0x16c>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x34>
 8002512:	2b04      	cmp	r3, #4
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x3a>
 8002516:	e09b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x184>)
 800251a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800251c:	e09b      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251e:	4b53      	ldr	r3, [pc, #332]	@ (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 8002520:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002522:	e098      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002524:	4b4f      	ldr	r3, [pc, #316]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	2200      	movs	r2, #0
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	627a      	str	r2, [r7, #36]	@ 0x24
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800254c:	2100      	movs	r1, #0
 800254e:	4b47      	ldr	r3, [pc, #284]	@ (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 8002550:	fb03 f201 	mul.w	r2, r3, r1
 8002554:	2300      	movs	r3, #0
 8002556:	fb00 f303 	mul.w	r3, r0, r3
 800255a:	4413      	add	r3, r2
 800255c:	4a43      	ldr	r2, [pc, #268]	@ (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 800255e:	fba0 1202 	umull	r1, r2, r0, r2
 8002562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002564:	460a      	mov	r2, r1
 8002566:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800256a:	4413      	add	r3, r2
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002570:	2200      	movs	r2, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	61fa      	str	r2, [r7, #28]
 8002576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800257e:	f7fd fe29 	bl	80001d4 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4613      	mov	r3, r2
 8002588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258a:	e053      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258c:	4b35      	ldr	r3, [pc, #212]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	2200      	movs	r2, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	617a      	str	r2, [r7, #20]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800259e:	f04f 0b00 	mov.w	fp, #0
 80025a2:	4652      	mov	r2, sl
 80025a4:	465b      	mov	r3, fp
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ebb2 080a 	subs.w	r8, r2, sl
 80025be:	eb63 090b 	sbc.w	r9, r3, fp
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025d6:	ebb2 0408 	subs.w	r4, r2, r8
 80025da:	eb63 0509 	sbc.w	r5, r3, r9
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	00eb      	lsls	r3, r5, #3
 80025e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ec:	00e2      	lsls	r2, r4, #3
 80025ee:	4614      	mov	r4, r2
 80025f0:	461d      	mov	r5, r3
 80025f2:	eb14 030a 	adds.w	r3, r4, sl
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	eb45 030b 	adc.w	r3, r5, fp
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800260a:	4629      	mov	r1, r5
 800260c:	028b      	lsls	r3, r1, #10
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002614:	4621      	mov	r1, r4
 8002616:	028a      	lsls	r2, r1, #10
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261e:	2200      	movs	r2, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002628:	f7fd fdd4 	bl	80001d4 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4613      	mov	r3, r2
 8002632:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002644:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800264e:	e002      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x184>)
 8002652:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002658:	4618      	mov	r0, r3
 800265a:	3740      	adds	r7, #64	@ 0x40
 800265c:	46bd      	mov	sp, r7
 800265e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	00f42400 	.word	0x00f42400
 800266c:	017d7840 	.word	0x017d7840

08002670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_RCC_GetHCLKFreq+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800268c:	f7ff fff0 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0a9b      	lsrs	r3, r3, #10
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08002730 	.word	0x08002730

080026b0 <memset>:
 80026b0:	4402      	add	r2, r0
 80026b2:	4603      	mov	r3, r0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d100      	bne.n	80026ba <memset+0xa>
 80026b8:	4770      	bx	lr
 80026ba:	f803 1b01 	strb.w	r1, [r3], #1
 80026be:	e7f9      	b.n	80026b4 <memset+0x4>

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4d0d      	ldr	r5, [pc, #52]	@ (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	@ (80026fc <__libc_init_array+0x3c>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2600      	movs	r6, #0
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 f818 	bl	8002708 <_init>
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2600      	movs	r6, #0
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002748 	.word	0x08002748
 80026fc:	08002748 	.word	0x08002748
 8002700:	08002748 	.word	0x08002748
 8002704:	0800274c 	.word	0x0800274c

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
